/**
 * @param {Set<string>} expected
 */
function validator(expected) {
	/**
	 * @param {any} module
	 * @param {string} [file]
	 */
	function validate(module, file) {
		if (!module) return;

		for (const key in module) {
			if (key[0] === '_' || expected.has(key)) continue; // key is valid in this module

			const values = [...expected.values()];

			const hint =
				hint_for_supported_files(key, file?.slice(file.lastIndexOf('.'))) ??
				`valid exports are ${values.join(', ')}, or anything with a '_' prefix`;

			throw new Error(`Invalid export '${key}'${file ? ` in ${file}` : ''} (${hint})`);
		}
	}

	return validate;
}

/**
 * @param {string} key
 * @param {string} ext
 * @returns {string | void}
 */
function hint_for_supported_files(key, ext = '.js') {
	const supported_files = [];

	if (valid_layout_exports.has(key)) {
		supported_files.push(`+layout${ext}`);
	}

	if (valid_page_exports.has(key)) {
		supported_files.push(`+page${ext}`);
	}

	if (valid_layout_server_exports.has(key)) {
		supported_files.push(`+layout.server${ext}`);
	}

	if (valid_page_server_exports.has(key)) {
		supported_files.push(`+page.server${ext}`);
	}

	if (valid_server_exports.has(key)) {
		supported_files.push(`+server${ext}`);
	}

	if (supported_files.length > 0) {
		return `'${key}' is a valid export in ${supported_files.slice(0, -1).join(', ')}${
			supported_files.length > 1 ? ' or ' : ''
		}${supported_files.at(-1)}`;
	}
}

const valid_layout_exports = new Set([
	'load',
	'prerender',
	'csr',
	'ssr',
	'trailingSlash',
	'config'
]);
const valid_page_exports = new Set([...valid_layout_exports, 'entries']);
const valid_layout_server_exports = new Set([...valid_layout_exports]);
const valid_page_server_exports = new Set([...valid_layout_server_exports, 'actions', 'entries']);
const valid_server_exports = new Set([
	'GET',
	'POST',
	'PATCH',
	'PUT',
	'DELETE',
	'OPTIONS',
	'HEAD',
	'fallback',
	'prerender',
	'trailingSlash',
	'config',
	'entries'
]);

export const validate_layout_exports = validator(valid_layout_exports);
export const validate_page_exports = validator(valid_page_exports);
export const validate_layout_server_exports = validator(valid_layout_server_exports);
export const validate_page_server_exports = validator(valid_page_server_exports);
export const validate_server_exports = validator(valid_server_exports);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4cG9ydHMuanM/dj1mOGUxOTEzNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYXJhbSB7U2V0PHN0cmluZz59IGV4cGVjdGVkXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRvcihleHBlY3RlZCkge1xuXHQvKipcblx0ICogQHBhcmFtIHthbnl9IG1vZHVsZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW2ZpbGVdXG5cdCAqL1xuXHRmdW5jdGlvbiB2YWxpZGF0ZShtb2R1bGUsIGZpbGUpIHtcblx0XHRpZiAoIW1vZHVsZSkgcmV0dXJuO1xuXG5cdFx0Zm9yIChjb25zdCBrZXkgaW4gbW9kdWxlKSB7XG5cdFx0XHRpZiAoa2V5WzBdID09PSAnXycgfHwgZXhwZWN0ZWQuaGFzKGtleSkpIGNvbnRpbnVlOyAvLyBrZXkgaXMgdmFsaWQgaW4gdGhpcyBtb2R1bGVcblxuXHRcdFx0Y29uc3QgdmFsdWVzID0gWy4uLmV4cGVjdGVkLnZhbHVlcygpXTtcblxuXHRcdFx0Y29uc3QgaGludCA9XG5cdFx0XHRcdGhpbnRfZm9yX3N1cHBvcnRlZF9maWxlcyhrZXksIGZpbGU/LnNsaWNlKGZpbGUubGFzdEluZGV4T2YoJy4nKSkpID8/XG5cdFx0XHRcdGB2YWxpZCBleHBvcnRzIGFyZSAke3ZhbHVlcy5qb2luKCcsICcpfSwgb3IgYW55dGhpbmcgd2l0aCBhICdfJyBwcmVmaXhgO1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZXhwb3J0ICcke2tleX0nJHtmaWxlID8gYCBpbiAke2ZpbGV9YCA6ICcnfSAoJHtoaW50fSlgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdmFsaWRhdGU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHBhcmFtIHtzdHJpbmd9IGV4dFxuICogQHJldHVybnMge3N0cmluZyB8IHZvaWR9XG4gKi9cbmZ1bmN0aW9uIGhpbnRfZm9yX3N1cHBvcnRlZF9maWxlcyhrZXksIGV4dCA9ICcuanMnKSB7XG5cdGNvbnN0IHN1cHBvcnRlZF9maWxlcyA9IFtdO1xuXG5cdGlmICh2YWxpZF9sYXlvdXRfZXhwb3J0cy5oYXMoa2V5KSkge1xuXHRcdHN1cHBvcnRlZF9maWxlcy5wdXNoKGArbGF5b3V0JHtleHR9YCk7XG5cdH1cblxuXHRpZiAodmFsaWRfcGFnZV9leHBvcnRzLmhhcyhrZXkpKSB7XG5cdFx0c3VwcG9ydGVkX2ZpbGVzLnB1c2goYCtwYWdlJHtleHR9YCk7XG5cdH1cblxuXHRpZiAodmFsaWRfbGF5b3V0X3NlcnZlcl9leHBvcnRzLmhhcyhrZXkpKSB7XG5cdFx0c3VwcG9ydGVkX2ZpbGVzLnB1c2goYCtsYXlvdXQuc2VydmVyJHtleHR9YCk7XG5cdH1cblxuXHRpZiAodmFsaWRfcGFnZV9zZXJ2ZXJfZXhwb3J0cy5oYXMoa2V5KSkge1xuXHRcdHN1cHBvcnRlZF9maWxlcy5wdXNoKGArcGFnZS5zZXJ2ZXIke2V4dH1gKTtcblx0fVxuXG5cdGlmICh2YWxpZF9zZXJ2ZXJfZXhwb3J0cy5oYXMoa2V5KSkge1xuXHRcdHN1cHBvcnRlZF9maWxlcy5wdXNoKGArc2VydmVyJHtleHR9YCk7XG5cdH1cblxuXHRpZiAoc3VwcG9ydGVkX2ZpbGVzLmxlbmd0aCA+IDApIHtcblx0XHRyZXR1cm4gYCcke2tleX0nIGlzIGEgdmFsaWQgZXhwb3J0IGluICR7c3VwcG9ydGVkX2ZpbGVzLnNsaWNlKDAsIC0xKS5qb2luKCcsICcpfSR7XG5cdFx0XHRzdXBwb3J0ZWRfZmlsZXMubGVuZ3RoID4gMSA/ICcgb3IgJyA6ICcnXG5cdFx0fSR7c3VwcG9ydGVkX2ZpbGVzLmF0KC0xKX1gO1xuXHR9XG59XG5cbmNvbnN0IHZhbGlkX2xheW91dF9leHBvcnRzID0gbmV3IFNldChbXG5cdCdsb2FkJyxcblx0J3ByZXJlbmRlcicsXG5cdCdjc3InLFxuXHQnc3NyJyxcblx0J3RyYWlsaW5nU2xhc2gnLFxuXHQnY29uZmlnJ1xuXSk7XG5jb25zdCB2YWxpZF9wYWdlX2V4cG9ydHMgPSBuZXcgU2V0KFsuLi52YWxpZF9sYXlvdXRfZXhwb3J0cywgJ2VudHJpZXMnXSk7XG5jb25zdCB2YWxpZF9sYXlvdXRfc2VydmVyX2V4cG9ydHMgPSBuZXcgU2V0KFsuLi52YWxpZF9sYXlvdXRfZXhwb3J0c10pO1xuY29uc3QgdmFsaWRfcGFnZV9zZXJ2ZXJfZXhwb3J0cyA9IG5ldyBTZXQoWy4uLnZhbGlkX2xheW91dF9zZXJ2ZXJfZXhwb3J0cywgJ2FjdGlvbnMnLCAnZW50cmllcyddKTtcbmNvbnN0IHZhbGlkX3NlcnZlcl9leHBvcnRzID0gbmV3IFNldChbXG5cdCdHRVQnLFxuXHQnUE9TVCcsXG5cdCdQQVRDSCcsXG5cdCdQVVQnLFxuXHQnREVMRVRFJyxcblx0J09QVElPTlMnLFxuXHQnSEVBRCcsXG5cdCdmYWxsYmFjaycsXG5cdCdwcmVyZW5kZXInLFxuXHQndHJhaWxpbmdTbGFzaCcsXG5cdCdjb25maWcnLFxuXHQnZW50cmllcydcbl0pO1xuXG5leHBvcnQgY29uc3QgdmFsaWRhdGVfbGF5b3V0X2V4cG9ydHMgPSB2YWxpZGF0b3IodmFsaWRfbGF5b3V0X2V4cG9ydHMpO1xuZXhwb3J0IGNvbnN0IHZhbGlkYXRlX3BhZ2VfZXhwb3J0cyA9IHZhbGlkYXRvcih2YWxpZF9wYWdlX2V4cG9ydHMpO1xuZXhwb3J0IGNvbnN0IHZhbGlkYXRlX2xheW91dF9zZXJ2ZXJfZXhwb3J0cyA9IHZhbGlkYXRvcih2YWxpZF9sYXlvdXRfc2VydmVyX2V4cG9ydHMpO1xuZXhwb3J0IGNvbnN0IHZhbGlkYXRlX3BhZ2Vfc2VydmVyX2V4cG9ydHMgPSB2YWxpZGF0b3IodmFsaWRfcGFnZV9zZXJ2ZXJfZXhwb3J0cyk7XG5leHBvcnQgY29uc3QgdmFsaWRhdGVfc2VydmVyX2V4cG9ydHMgPSB2YWxpZGF0b3IodmFsaWRfc2VydmVyX2V4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLENBQUMsQ0FBQztBQUNGLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDeEIsQ0FBQyxDQUFDO0FBQ0YsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM3QixDQUFDLENBQUMsQ0FBQztBQUNILENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJO0FBQ3pCLENBQUMsQ0FBQyxDQUFDO0FBQ0gsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU07O0FBRXJCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM1QixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDOztBQUU5RSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOztBQUV4QyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7O0FBRTNFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuRixDQUFDLENBQUM7QUFDRixDQUFDOztBQUVELENBQUMsTUFBTSxDQUFDLFFBQVE7QUFDaEI7O0FBRUEsQ0FBQyxDQUFDO0FBQ0YsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNuQixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ25CLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJO0FBQzFCLENBQUMsQ0FBQztBQUNGLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3BELENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FB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