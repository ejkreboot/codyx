import {
  __require
} from "/node_modules/.vite/deps/chunk-PLDDJCW6.js?v=f8e19137";

// node_modules/webr/dist/webr.mjs
var xs = Object.create;
var vr = Object.defineProperty;
var Es = Object.getOwnPropertyDescriptor;
var vs = Object.getOwnPropertyNames;
var Ps = Object.getPrototypeOf;
var Ts = Object.prototype.hasOwnProperty;
var Pr = (r5) => {
  throw TypeError(r5);
};
var te = ((r5) => typeof __require < "u" ? __require : typeof Proxy < "u" ? new Proxy(r5, { get: (e, t) => (typeof __require < "u" ? __require : e)[t] }) : r5)(function(r5) {
  if (typeof __require < "u") return __require.apply(this, arguments);
  throw Error('Dynamic require of "' + r5 + '" is not supported');
});
var S = (r5, e) => () => (e || r5((e = { exports: {} }).exports, e), e.exports);
var Ss = (r5, e, t, s) => {
  if (e && typeof e == "object" || typeof e == "function") for (let n of vs(e)) !Ts.call(r5, n) && n !== t && vr(r5, n, { get: () => e[n], enumerable: !(s = Es(e, n)) || s.enumerable });
  return r5;
};
var Pe = (r5, e, t) => (t = r5 != null ? xs(Ps(r5)) : {}, Ss(e || !r5 || !r5.__esModule ? vr(t, "default", { value: r5, enumerable: true }) : t, r5));
var zt = (r5, e, t) => e.has(r5) || Pr("Cannot " + t);
var i = (r5, e, t) => (zt(r5, e, "read from private field"), t ? t.call(r5) : e.get(r5));
var p = (r5, e, t) => e.has(r5) ? Pr("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(r5) : e.set(r5, t);
var m = (r5, e, t, s) => (zt(r5, e, "write to private field"), s ? s.call(r5, t) : e.set(r5, t), t);
var M = (r5, e, t) => (zt(r5, e, "access private method"), t);
var Ie = S((I) => {
  "use strict";
  Object.defineProperty(I, "__esModule", { value: true });
  I.getUint64 = I.getInt64 = I.setInt64 = I.setUint64 = I.UINT32_MAX = void 0;
  I.UINT32_MAX = 4294967295;
  function Os(r5, e, t) {
    let s = t / 4294967296, n = t;
    r5.setUint32(e, s), r5.setUint32(e + 4, n);
  }
  I.setUint64 = Os;
  function Ds(r5, e, t) {
    let s = Math.floor(t / 4294967296), n = t;
    r5.setUint32(e, s), r5.setUint32(e + 4, n);
  }
  I.setInt64 = Ds;
  function Cs(r5, e) {
    let t = r5.getInt32(e), s = r5.getUint32(e + 4);
    return t * 4294967296 + s;
  }
  I.getInt64 = Cs;
  function Is(r5, e) {
    let t = r5.getUint32(e), s = r5.getUint32(e + 4);
    return t * 4294967296 + s;
  }
  I.getUint64 = Is;
});
var bt = S((k) => {
  "use strict";
  var Yt, Zt, er;
  Object.defineProperty(k, "__esModule", { value: true });
  k.utf8DecodeTD = k.TEXT_DECODER_THRESHOLD = k.utf8DecodeJs = k.utf8EncodeTE = k.TEXT_ENCODER_THRESHOLD = k.utf8EncodeJs = k.utf8Count = void 0;
  var Nr = Ie(), gt = (typeof process > "u" || ((Yt = process == null ? void 0 : process.env) === null || Yt === void 0 ? void 0 : Yt.TEXT_ENCODING) !== "never") && typeof TextEncoder < "u" && typeof TextDecoder < "u";
  function Us(r5) {
    let e = r5.length, t = 0, s = 0;
    for (; s < e; ) {
      let n = r5.charCodeAt(s++);
      if ((n & 4294967168) === 0) {
        t++;
        continue;
      } else if ((n & 4294965248) === 0) t += 2;
      else {
        if (n >= 55296 && n <= 56319 && s < e) {
          let o = r5.charCodeAt(s);
          (o & 64512) === 56320 && (++s, n = ((n & 1023) << 10) + (o & 1023) + 65536);
        }
        (n & 4294901760) === 0 ? t += 3 : t += 4;
      }
    }
    return t;
  }
  k.utf8Count = Us;
  function Ns(r5, e, t) {
    let s = r5.length, n = t, o = 0;
    for (; o < s; ) {
      let a = r5.charCodeAt(o++);
      if ((a & 4294967168) === 0) {
        e[n++] = a;
        continue;
      } else if ((a & 4294965248) === 0) e[n++] = a >> 6 & 31 | 192;
      else {
        if (a >= 55296 && a <= 56319 && o < s) {
          let l = r5.charCodeAt(o);
          (l & 64512) === 56320 && (++o, a = ((a & 1023) << 10) + (l & 1023) + 65536);
        }
        (a & 4294901760) === 0 ? (e[n++] = a >> 12 & 15 | 224, e[n++] = a >> 6 & 63 | 128) : (e[n++] = a >> 18 & 7 | 240, e[n++] = a >> 12 & 63 | 128, e[n++] = a >> 6 & 63 | 128);
      }
      e[n++] = a & 63 | 128;
    }
  }
  k.utf8EncodeJs = Ns;
  var Ue = gt ? new TextEncoder() : void 0;
  k.TEXT_ENCODER_THRESHOLD = gt ? typeof process < "u" && ((Zt = process == null ? void 0 : process.env) === null || Zt === void 0 ? void 0 : Zt.TEXT_ENCODING) !== "force" ? 200 : 0 : Nr.UINT32_MAX;
  function js(r5, e, t) {
    e.set(Ue.encode(r5), t);
  }
  function Bs(r5, e, t) {
    Ue.encodeInto(r5, e.subarray(t));
  }
  k.utf8EncodeTE = Ue != null && Ue.encodeInto ? Bs : js;
  var Ls = 4096;
  function Fs(r5, e, t) {
    let s = e, n = s + t, o = [], a = "";
    for (; s < n; ) {
      let l = r5[s++];
      if ((l & 128) === 0) o.push(l);
      else if ((l & 224) === 192) {
        let u = r5[s++] & 63;
        o.push((l & 31) << 6 | u);
      } else if ((l & 240) === 224) {
        let u = r5[s++] & 63, v = r5[s++] & 63;
        o.push((l & 31) << 12 | u << 6 | v);
      } else if ((l & 248) === 240) {
        let u = r5[s++] & 63, v = r5[s++] & 63, R = r5[s++] & 63, U = (l & 7) << 18 | u << 12 | v << 6 | R;
        U > 65535 && (U -= 65536, o.push(U >>> 10 & 1023 | 55296), U = 56320 | U & 1023), o.push(U);
      } else o.push(l);
      o.length >= Ls && (a += String.fromCharCode(...o), o.length = 0);
    }
    return o.length > 0 && (a += String.fromCharCode(...o)), a;
  }
  k.utf8DecodeJs = Fs;
  var qs = gt ? new TextDecoder() : null;
  k.TEXT_DECODER_THRESHOLD = gt ? typeof process < "u" && ((er = process == null ? void 0 : process.env) === null || er === void 0 ? void 0 : er.TEXT_DECODER) !== "force" ? 200 : 0 : Nr.UINT32_MAX;
  function Vs(r5, e, t) {
    let s = r5.subarray(e, e + t);
    return qs.decode(s);
  }
  k.utf8DecodeTD = Vs;
});
var rr = S((wt) => {
  "use strict";
  Object.defineProperty(wt, "__esModule", { value: true });
  wt.ExtData = void 0;
  var tr = class {
    constructor(e, t) {
      this.type = e, this.data = t;
    }
  };
  wt.ExtData = tr;
});
var Et = S((xt) => {
  "use strict";
  Object.defineProperty(xt, "__esModule", { value: true });
  xt.DecodeError = void 0;
  var sr = class r5 extends Error {
    constructor(e) {
      super(e);
      let t = Object.create(r5.prototype);
      Object.setPrototypeOf(this, t), Object.defineProperty(this, "name", { configurable: true, enumerable: false, value: r5.name });
    }
  };
  xt.DecodeError = sr;
});
var nr = S((T) => {
  "use strict";
  Object.defineProperty(T, "__esModule", { value: true });
  T.timestampExtension = T.decodeTimestampExtension = T.decodeTimestampToTimeSpec = T.encodeTimestampExtension = T.encodeDateToTimeSpec = T.encodeTimeSpecToTimestamp = T.EXT_TIMESTAMP = void 0;
  var Js = Et(), jr = Ie();
  T.EXT_TIMESTAMP = -1;
  var Hs = 4294967296 - 1, zs = 17179869184 - 1;
  function Br({ sec: r5, nsec: e }) {
    if (r5 >= 0 && e >= 0 && r5 <= zs) if (e === 0 && r5 <= Hs) {
      let t = new Uint8Array(4);
      return new DataView(t.buffer).setUint32(0, r5), t;
    } else {
      let t = r5 / 4294967296, s = r5 & 4294967295, n = new Uint8Array(8), o = new DataView(n.buffer);
      return o.setUint32(0, e << 2 | t & 3), o.setUint32(4, s), n;
    }
    else {
      let t = new Uint8Array(12), s = new DataView(t.buffer);
      return s.setUint32(0, e), (0, jr.setInt64)(s, 4, r5), t;
    }
  }
  T.encodeTimeSpecToTimestamp = Br;
  function Lr(r5) {
    let e = r5.getTime(), t = Math.floor(e / 1e3), s = (e - t * 1e3) * 1e6, n = Math.floor(s / 1e9);
    return { sec: t + n, nsec: s - n * 1e9 };
  }
  T.encodeDateToTimeSpec = Lr;
  function Fr(r5) {
    if (r5 instanceof Date) {
      let e = Lr(r5);
      return Br(e);
    } else return null;
  }
  T.encodeTimestampExtension = Fr;
  function qr(r5) {
    let e = new DataView(r5.buffer, r5.byteOffset, r5.byteLength);
    switch (r5.byteLength) {
      case 4:
        return { sec: e.getUint32(0), nsec: 0 };
      case 8: {
        let t = e.getUint32(0), s = e.getUint32(4), n = (t & 3) * 4294967296 + s, o = t >>> 2;
        return { sec: n, nsec: o };
      }
      case 12: {
        let t = (0, jr.getInt64)(e, 4), s = e.getUint32(0);
        return { sec: t, nsec: s };
      }
      default:
        throw new Js.DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${r5.length}`);
    }
  }
  T.decodeTimestampToTimeSpec = qr;
  function Vr(r5) {
    let e = qr(r5);
    return new Date(e.sec * 1e3 + e.nsec / 1e6);
  }
  T.decodeTimestampExtension = Vr;
  T.timestampExtension = { type: T.EXT_TIMESTAMP, encode: Fr, decode: Vr };
});
var Tt = S((Pt) => {
  "use strict";
  Object.defineProperty(Pt, "__esModule", { value: true });
  Pt.ExtensionCodec = void 0;
  var vt = rr(), Gs = nr(), Ne = class {
    constructor() {
      this.builtInEncoders = [], this.builtInDecoders = [], this.encoders = [], this.decoders = [], this.register(Gs.timestampExtension);
    }
    register({ type: e, encode: t, decode: s }) {
      if (e >= 0) this.encoders[e] = t, this.decoders[e] = s;
      else {
        let n = 1 + e;
        this.builtInEncoders[n] = t, this.builtInDecoders[n] = s;
      }
    }
    tryToEncode(e, t) {
      for (let s = 0; s < this.builtInEncoders.length; s++) {
        let n = this.builtInEncoders[s];
        if (n != null) {
          let o = n(e, t);
          if (o != null) {
            let a = -1 - s;
            return new vt.ExtData(a, o);
          }
        }
      }
      for (let s = 0; s < this.encoders.length; s++) {
        let n = this.encoders[s];
        if (n != null) {
          let o = n(e, t);
          if (o != null) {
            let a = s;
            return new vt.ExtData(a, o);
          }
        }
      }
      return e instanceof vt.ExtData ? e : null;
    }
    decode(e, t, s) {
      let n = t < 0 ? this.builtInDecoders[-1 - t] : this.decoders[t];
      return n ? n(e, t, s) : new vt.ExtData(t, e);
    }
  };
  Pt.ExtensionCodec = Ne;
  Ne.defaultCodec = new Ne();
});
var or = S((Re) => {
  "use strict";
  Object.defineProperty(Re, "__esModule", { value: true });
  Re.createDataView = Re.ensureUint8Array = void 0;
  function Jr(r5) {
    return r5 instanceof Uint8Array ? r5 : ArrayBuffer.isView(r5) ? new Uint8Array(r5.buffer, r5.byteOffset, r5.byteLength) : r5 instanceof ArrayBuffer ? new Uint8Array(r5) : Uint8Array.from(r5);
  }
  Re.ensureUint8Array = Jr;
  function $s(r5) {
    if (r5 instanceof ArrayBuffer) return new DataView(r5);
    let e = Jr(r5);
    return new DataView(e.buffer, e.byteOffset, e.byteLength);
  }
  Re.createDataView = $s;
});
var ir = S((L) => {
  "use strict";
  Object.defineProperty(L, "__esModule", { value: true });
  L.Encoder = L.DEFAULT_INITIAL_BUFFER_SIZE = L.DEFAULT_MAX_DEPTH = void 0;
  var je = bt(), Xs = Tt(), Hr = Ie(), Ks = or();
  L.DEFAULT_MAX_DEPTH = 100;
  L.DEFAULT_INITIAL_BUFFER_SIZE = 2048;
  var ar = class {
    constructor(e = Xs.ExtensionCodec.defaultCodec, t = void 0, s = L.DEFAULT_MAX_DEPTH, n = L.DEFAULT_INITIAL_BUFFER_SIZE, o = false, a = false, l = false, u = false) {
      this.extensionCodec = e, this.context = t, this.maxDepth = s, this.initialBufferSize = n, this.sortKeys = o, this.forceFloat32 = a, this.ignoreUndefined = l, this.forceIntegerToFloat = u, this.pos = 0, this.view = new DataView(new ArrayBuffer(this.initialBufferSize)), this.bytes = new Uint8Array(this.view.buffer);
    }
    reinitializeState() {
      this.pos = 0;
    }
    encodeSharedRef(e) {
      return this.reinitializeState(), this.doEncode(e, 1), this.bytes.subarray(0, this.pos);
    }
    encode(e) {
      return this.reinitializeState(), this.doEncode(e, 1), this.bytes.slice(0, this.pos);
    }
    doEncode(e, t) {
      if (t > this.maxDepth) throw new Error(`Too deep objects in depth ${t}`);
      e == null ? this.encodeNil() : typeof e == "boolean" ? this.encodeBoolean(e) : typeof e == "number" ? this.encodeNumber(e) : typeof e == "string" ? this.encodeString(e) : this.encodeObject(e, t);
    }
    ensureBufferSizeToWrite(e) {
      let t = this.pos + e;
      this.view.byteLength < t && this.resizeBuffer(t * 2);
    }
    resizeBuffer(e) {
      let t = new ArrayBuffer(e), s = new Uint8Array(t), n = new DataView(t);
      s.set(this.bytes), this.view = n, this.bytes = s;
    }
    encodeNil() {
      this.writeU8(192);
    }
    encodeBoolean(e) {
      e === false ? this.writeU8(194) : this.writeU8(195);
    }
    encodeNumber(e) {
      Number.isSafeInteger(e) && !this.forceIntegerToFloat ? e >= 0 ? e < 128 ? this.writeU8(e) : e < 256 ? (this.writeU8(204), this.writeU8(e)) : e < 65536 ? (this.writeU8(205), this.writeU16(e)) : e < 4294967296 ? (this.writeU8(206), this.writeU32(e)) : (this.writeU8(207), this.writeU64(e)) : e >= -32 ? this.writeU8(224 | e + 32) : e >= -128 ? (this.writeU8(208), this.writeI8(e)) : e >= -32768 ? (this.writeU8(209), this.writeI16(e)) : e >= -2147483648 ? (this.writeU8(210), this.writeI32(e)) : (this.writeU8(211), this.writeI64(e)) : this.forceFloat32 ? (this.writeU8(202), this.writeF32(e)) : (this.writeU8(203), this.writeF64(e));
    }
    writeStringHeader(e) {
      if (e < 32) this.writeU8(160 + e);
      else if (e < 256) this.writeU8(217), this.writeU8(e);
      else if (e < 65536) this.writeU8(218), this.writeU16(e);
      else if (e < 4294967296) this.writeU8(219), this.writeU32(e);
      else throw new Error(`Too long string: ${e} bytes in UTF-8`);
    }
    encodeString(e) {
      if (e.length > je.TEXT_ENCODER_THRESHOLD) {
        let n = (0, je.utf8Count)(e);
        this.ensureBufferSizeToWrite(5 + n), this.writeStringHeader(n), (0, je.utf8EncodeTE)(e, this.bytes, this.pos), this.pos += n;
      } else {
        let n = (0, je.utf8Count)(e);
        this.ensureBufferSizeToWrite(5 + n), this.writeStringHeader(n), (0, je.utf8EncodeJs)(e, this.bytes, this.pos), this.pos += n;
      }
    }
    encodeObject(e, t) {
      let s = this.extensionCodec.tryToEncode(e, this.context);
      if (s != null) this.encodeExtension(s);
      else if (Array.isArray(e)) this.encodeArray(e, t);
      else if (ArrayBuffer.isView(e)) this.encodeBinary(e);
      else if (typeof e == "object") this.encodeMap(e, t);
      else throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(e)}`);
    }
    encodeBinary(e) {
      let t = e.byteLength;
      if (t < 256) this.writeU8(196), this.writeU8(t);
      else if (t < 65536) this.writeU8(197), this.writeU16(t);
      else if (t < 4294967296) this.writeU8(198), this.writeU32(t);
      else throw new Error(`Too large binary: ${t}`);
      let s = (0, Ks.ensureUint8Array)(e);
      this.writeU8a(s);
    }
    encodeArray(e, t) {
      let s = e.length;
      if (s < 16) this.writeU8(144 + s);
      else if (s < 65536) this.writeU8(220), this.writeU16(s);
      else if (s < 4294967296) this.writeU8(221), this.writeU32(s);
      else throw new Error(`Too large array: ${s}`);
      for (let n of e) this.doEncode(n, t + 1);
    }
    countWithoutUndefined(e, t) {
      let s = 0;
      for (let n of t) e[n] !== void 0 && s++;
      return s;
    }
    encodeMap(e, t) {
      let s = Object.keys(e);
      this.sortKeys && s.sort();
      let n = this.ignoreUndefined ? this.countWithoutUndefined(e, s) : s.length;
      if (n < 16) this.writeU8(128 + n);
      else if (n < 65536) this.writeU8(222), this.writeU16(n);
      else if (n < 4294967296) this.writeU8(223), this.writeU32(n);
      else throw new Error(`Too large map object: ${n}`);
      for (let o of s) {
        let a = e[o];
        this.ignoreUndefined && a === void 0 || (this.encodeString(o), this.doEncode(a, t + 1));
      }
    }
    encodeExtension(e) {
      let t = e.data.length;
      if (t === 1) this.writeU8(212);
      else if (t === 2) this.writeU8(213);
      else if (t === 4) this.writeU8(214);
      else if (t === 8) this.writeU8(215);
      else if (t === 16) this.writeU8(216);
      else if (t < 256) this.writeU8(199), this.writeU8(t);
      else if (t < 65536) this.writeU8(200), this.writeU16(t);
      else if (t < 4294967296) this.writeU8(201), this.writeU32(t);
      else throw new Error(`Too large extension object: ${t}`);
      this.writeI8(e.type), this.writeU8a(e.data);
    }
    writeU8(e) {
      this.ensureBufferSizeToWrite(1), this.view.setUint8(this.pos, e), this.pos++;
    }
    writeU8a(e) {
      let t = e.length;
      this.ensureBufferSizeToWrite(t), this.bytes.set(e, this.pos), this.pos += t;
    }
    writeI8(e) {
      this.ensureBufferSizeToWrite(1), this.view.setInt8(this.pos, e), this.pos++;
    }
    writeU16(e) {
      this.ensureBufferSizeToWrite(2), this.view.setUint16(this.pos, e), this.pos += 2;
    }
    writeI16(e) {
      this.ensureBufferSizeToWrite(2), this.view.setInt16(this.pos, e), this.pos += 2;
    }
    writeU32(e) {
      this.ensureBufferSizeToWrite(4), this.view.setUint32(this.pos, e), this.pos += 4;
    }
    writeI32(e) {
      this.ensureBufferSizeToWrite(4), this.view.setInt32(this.pos, e), this.pos += 4;
    }
    writeF32(e) {
      this.ensureBufferSizeToWrite(4), this.view.setFloat32(this.pos, e), this.pos += 4;
    }
    writeF64(e) {
      this.ensureBufferSizeToWrite(8), this.view.setFloat64(this.pos, e), this.pos += 8;
    }
    writeU64(e) {
      this.ensureBufferSizeToWrite(8), (0, Hr.setUint64)(this.view, this.pos, e), this.pos += 8;
    }
    writeI64(e) {
      this.ensureBufferSizeToWrite(8), (0, Hr.setInt64)(this.view, this.pos, e), this.pos += 8;
    }
  };
  L.Encoder = ar;
});
var zr = S((St) => {
  "use strict";
  Object.defineProperty(St, "__esModule", { value: true });
  St.encode = void 0;
  var Qs = ir(), Ys = {};
  function Zs(r5, e = Ys) {
    return new Qs.Encoder(e.extensionCodec, e.context, e.maxDepth, e.initialBufferSize, e.sortKeys, e.forceFloat32, e.ignoreUndefined, e.forceIntegerToFloat).encodeSharedRef(r5);
  }
  St.encode = Zs;
});
var Gr = S((_t) => {
  "use strict";
  Object.defineProperty(_t, "__esModule", { value: true });
  _t.prettyByte = void 0;
  function en(r5) {
    return `${r5 < 0 ? "-" : ""}0x${Math.abs(r5).toString(16).padStart(2, "0")}`;
  }
  _t.prettyByte = en;
});
var $r = S((kt) => {
  "use strict";
  Object.defineProperty(kt, "__esModule", { value: true });
  kt.CachedKeyDecoder = void 0;
  var tn = bt(), rn = 16, sn = 16, lr = class {
    constructor(e = rn, t = sn) {
      this.maxKeyLength = e, this.maxLengthPerKey = t, this.hit = 0, this.miss = 0, this.caches = [];
      for (let s = 0; s < this.maxKeyLength; s++) this.caches.push([]);
    }
    canBeCached(e) {
      return e > 0 && e <= this.maxKeyLength;
    }
    find(e, t, s) {
      let n = this.caches[s - 1];
      e: for (let o of n) {
        let a = o.bytes;
        for (let l = 0; l < s; l++) if (a[l] !== e[t + l]) continue e;
        return o.str;
      }
      return null;
    }
    store(e, t) {
      let s = this.caches[e.length - 1], n = { bytes: e, str: t };
      s.length >= this.maxLengthPerKey ? s[Math.random() * s.length | 0] = n : s.push(n);
    }
    decode(e, t, s) {
      let n = this.find(e, t, s);
      if (n != null) return this.hit++, n;
      this.miss++;
      let o = (0, tn.utf8DecodeJs)(e, t, s), a = Uint8Array.prototype.slice.call(e, t, t + s);
      return this.store(a, o), o;
    }
  };
  kt.CachedKeyDecoder = lr;
});
var Mt = S(($) => {
  "use strict";
  Object.defineProperty($, "__esModule", { value: true });
  $.Decoder = $.DataViewIndexOutOfBoundsError = void 0;
  var cr = Gr(), nn = Tt(), ie = Ie(), ur = bt(), pr = or(), on = $r(), G = Et(), an = (r5) => {
    let e = typeof r5;
    return e === "string" || e === "number";
  }, Be = -1, hr = new DataView(new ArrayBuffer(0)), ln = new Uint8Array(hr.buffer);
  $.DataViewIndexOutOfBoundsError = (() => {
    try {
      hr.getInt8(0);
    } catch (r5) {
      return r5.constructor;
    }
    throw new Error("never reached");
  })();
  var Xr = new $.DataViewIndexOutOfBoundsError("Insufficient data"), cn = new on.CachedKeyDecoder(), dr = class {
    constructor(e = nn.ExtensionCodec.defaultCodec, t = void 0, s = ie.UINT32_MAX, n = ie.UINT32_MAX, o = ie.UINT32_MAX, a = ie.UINT32_MAX, l = ie.UINT32_MAX, u = cn) {
      this.extensionCodec = e, this.context = t, this.maxStrLength = s, this.maxBinLength = n, this.maxArrayLength = o, this.maxMapLength = a, this.maxExtLength = l, this.keyDecoder = u, this.totalPos = 0, this.pos = 0, this.view = hr, this.bytes = ln, this.headByte = Be, this.stack = [];
    }
    reinitializeState() {
      this.totalPos = 0, this.headByte = Be, this.stack.length = 0;
    }
    setBuffer(e) {
      this.bytes = (0, pr.ensureUint8Array)(e), this.view = (0, pr.createDataView)(this.bytes), this.pos = 0;
    }
    appendBuffer(e) {
      if (this.headByte === Be && !this.hasRemaining(1)) this.setBuffer(e);
      else {
        let t = this.bytes.subarray(this.pos), s = (0, pr.ensureUint8Array)(e), n = new Uint8Array(t.length + s.length);
        n.set(t), n.set(s, t.length), this.setBuffer(n);
      }
    }
    hasRemaining(e) {
      return this.view.byteLength - this.pos >= e;
    }
    createExtraByteError(e) {
      let { view: t, pos: s } = this;
      return new RangeError(`Extra ${t.byteLength - s} of ${t.byteLength} byte(s) found at buffer[${e}]`);
    }
    decode(e) {
      this.reinitializeState(), this.setBuffer(e);
      let t = this.doDecodeSync();
      if (this.hasRemaining(1)) throw this.createExtraByteError(this.pos);
      return t;
    }
    *decodeMulti(e) {
      for (this.reinitializeState(), this.setBuffer(e); this.hasRemaining(1); ) yield this.doDecodeSync();
    }
    async decodeAsync(e) {
      let t = false, s;
      for await (let l of e) {
        if (t) throw this.createExtraByteError(this.totalPos);
        this.appendBuffer(l);
        try {
          s = this.doDecodeSync(), t = true;
        } catch (u) {
          if (!(u instanceof $.DataViewIndexOutOfBoundsError)) throw u;
        }
        this.totalPos += this.pos;
      }
      if (t) {
        if (this.hasRemaining(1)) throw this.createExtraByteError(this.totalPos);
        return s;
      }
      let { headByte: n, pos: o, totalPos: a } = this;
      throw new RangeError(`Insufficient data in parsing ${(0, cr.prettyByte)(n)} at ${a} (${o} in the current buffer)`);
    }
    decodeArrayStream(e) {
      return this.decodeMultiAsync(e, true);
    }
    decodeStream(e) {
      return this.decodeMultiAsync(e, false);
    }
    async *decodeMultiAsync(e, t) {
      let s = t, n = -1;
      for await (let o of e) {
        if (t && n === 0) throw this.createExtraByteError(this.totalPos);
        this.appendBuffer(o), s && (n = this.readArraySize(), s = false, this.complete());
        try {
          for (; yield this.doDecodeSync(), --n !== 0; ) ;
        } catch (a) {
          if (!(a instanceof $.DataViewIndexOutOfBoundsError)) throw a;
        }
        this.totalPos += this.pos;
      }
    }
    doDecodeSync() {
      e: for (; ; ) {
        let e = this.readHeadByte(), t;
        if (e >= 224) t = e - 256;
        else if (e < 192) if (e < 128) t = e;
        else if (e < 144) {
          let n = e - 128;
          if (n !== 0) {
            this.pushMapState(n), this.complete();
            continue e;
          } else t = {};
        } else if (e < 160) {
          let n = e - 144;
          if (n !== 0) {
            this.pushArrayState(n), this.complete();
            continue e;
          } else t = [];
        } else {
          let n = e - 160;
          t = this.decodeUtf8String(n, 0);
        }
        else if (e === 192) t = null;
        else if (e === 194) t = false;
        else if (e === 195) t = true;
        else if (e === 202) t = this.readF32();
        else if (e === 203) t = this.readF64();
        else if (e === 204) t = this.readU8();
        else if (e === 205) t = this.readU16();
        else if (e === 206) t = this.readU32();
        else if (e === 207) t = this.readU64();
        else if (e === 208) t = this.readI8();
        else if (e === 209) t = this.readI16();
        else if (e === 210) t = this.readI32();
        else if (e === 211) t = this.readI64();
        else if (e === 217) {
          let n = this.lookU8();
          t = this.decodeUtf8String(n, 1);
        } else if (e === 218) {
          let n = this.lookU16();
          t = this.decodeUtf8String(n, 2);
        } else if (e === 219) {
          let n = this.lookU32();
          t = this.decodeUtf8String(n, 4);
        } else if (e === 220) {
          let n = this.readU16();
          if (n !== 0) {
            this.pushArrayState(n), this.complete();
            continue e;
          } else t = [];
        } else if (e === 221) {
          let n = this.readU32();
          if (n !== 0) {
            this.pushArrayState(n), this.complete();
            continue e;
          } else t = [];
        } else if (e === 222) {
          let n = this.readU16();
          if (n !== 0) {
            this.pushMapState(n), this.complete();
            continue e;
          } else t = {};
        } else if (e === 223) {
          let n = this.readU32();
          if (n !== 0) {
            this.pushMapState(n), this.complete();
            continue e;
          } else t = {};
        } else if (e === 196) {
          let n = this.lookU8();
          t = this.decodeBinary(n, 1);
        } else if (e === 197) {
          let n = this.lookU16();
          t = this.decodeBinary(n, 2);
        } else if (e === 198) {
          let n = this.lookU32();
          t = this.decodeBinary(n, 4);
        } else if (e === 212) t = this.decodeExtension(1, 0);
        else if (e === 213) t = this.decodeExtension(2, 0);
        else if (e === 214) t = this.decodeExtension(4, 0);
        else if (e === 215) t = this.decodeExtension(8, 0);
        else if (e === 216) t = this.decodeExtension(16, 0);
        else if (e === 199) {
          let n = this.lookU8();
          t = this.decodeExtension(n, 1);
        } else if (e === 200) {
          let n = this.lookU16();
          t = this.decodeExtension(n, 2);
        } else if (e === 201) {
          let n = this.lookU32();
          t = this.decodeExtension(n, 4);
        } else throw new G.DecodeError(`Unrecognized type byte: ${(0, cr.prettyByte)(e)}`);
        this.complete();
        let s = this.stack;
        for (; s.length > 0; ) {
          let n = s[s.length - 1];
          if (n.type === 0) if (n.array[n.position] = t, n.position++, n.position === n.size) s.pop(), t = n.array;
          else continue e;
          else if (n.type === 1) {
            if (!an(t)) throw new G.DecodeError("The type of key must be string or number but " + typeof t);
            if (t === "__proto__") throw new G.DecodeError("The key __proto__ is not allowed");
            n.key = t, n.type = 2;
            continue e;
          } else if (n.map[n.key] = t, n.readCount++, n.readCount === n.size) s.pop(), t = n.map;
          else {
            n.key = null, n.type = 1;
            continue e;
          }
        }
        return t;
      }
    }
    readHeadByte() {
      return this.headByte === Be && (this.headByte = this.readU8()), this.headByte;
    }
    complete() {
      this.headByte = Be;
    }
    readArraySize() {
      let e = this.readHeadByte();
      switch (e) {
        case 220:
          return this.readU16();
        case 221:
          return this.readU32();
        default: {
          if (e < 160) return e - 144;
          throw new G.DecodeError(`Unrecognized array type byte: ${(0, cr.prettyByte)(e)}`);
        }
      }
    }
    pushMapState(e) {
      if (e > this.maxMapLength) throw new G.DecodeError(`Max length exceeded: map length (${e}) > maxMapLengthLength (${this.maxMapLength})`);
      this.stack.push({ type: 1, size: e, key: null, readCount: 0, map: {} });
    }
    pushArrayState(e) {
      if (e > this.maxArrayLength) throw new G.DecodeError(`Max length exceeded: array length (${e}) > maxArrayLength (${this.maxArrayLength})`);
      this.stack.push({ type: 0, size: e, array: new Array(e), position: 0 });
    }
    decodeUtf8String(e, t) {
      var s;
      if (e > this.maxStrLength) throw new G.DecodeError(`Max length exceeded: UTF-8 byte length (${e}) > maxStrLength (${this.maxStrLength})`);
      if (this.bytes.byteLength < this.pos + t + e) throw Xr;
      let n = this.pos + t, o;
      return this.stateIsMapKey() && (!((s = this.keyDecoder) === null || s === void 0) && s.canBeCached(e)) ? o = this.keyDecoder.decode(this.bytes, n, e) : e > ur.TEXT_DECODER_THRESHOLD ? o = (0, ur.utf8DecodeTD)(this.bytes, n, e) : o = (0, ur.utf8DecodeJs)(this.bytes, n, e), this.pos += t + e, o;
    }
    stateIsMapKey() {
      return this.stack.length > 0 ? this.stack[this.stack.length - 1].type === 1 : false;
    }
    decodeBinary(e, t) {
      if (e > this.maxBinLength) throw new G.DecodeError(`Max length exceeded: bin length (${e}) > maxBinLength (${this.maxBinLength})`);
      if (!this.hasRemaining(e + t)) throw Xr;
      let s = this.pos + t, n = this.bytes.subarray(s, s + e);
      return this.pos += t + e, n;
    }
    decodeExtension(e, t) {
      if (e > this.maxExtLength) throw new G.DecodeError(`Max length exceeded: ext length (${e}) > maxExtLength (${this.maxExtLength})`);
      let s = this.view.getInt8(this.pos + t), n = this.decodeBinary(e, t + 1);
      return this.extensionCodec.decode(n, s, this.context);
    }
    lookU8() {
      return this.view.getUint8(this.pos);
    }
    lookU16() {
      return this.view.getUint16(this.pos);
    }
    lookU32() {
      return this.view.getUint32(this.pos);
    }
    readU8() {
      let e = this.view.getUint8(this.pos);
      return this.pos++, e;
    }
    readI8() {
      let e = this.view.getInt8(this.pos);
      return this.pos++, e;
    }
    readU16() {
      let e = this.view.getUint16(this.pos);
      return this.pos += 2, e;
    }
    readI16() {
      let e = this.view.getInt16(this.pos);
      return this.pos += 2, e;
    }
    readU32() {
      let e = this.view.getUint32(this.pos);
      return this.pos += 4, e;
    }
    readI32() {
      let e = this.view.getInt32(this.pos);
      return this.pos += 4, e;
    }
    readU64() {
      let e = (0, ie.getUint64)(this.view, this.pos);
      return this.pos += 8, e;
    }
    readI64() {
      let e = (0, ie.getInt64)(this.view, this.pos);
      return this.pos += 8, e;
    }
    readF32() {
      let e = this.view.getFloat32(this.pos);
      return this.pos += 4, e;
    }
    readF64() {
      let e = this.view.getFloat64(this.pos);
      return this.pos += 8, e;
    }
  };
  $.Decoder = dr;
});
var yr = S((F) => {
  "use strict";
  Object.defineProperty(F, "__esModule", { value: true });
  F.decodeMulti = F.decode = F.defaultDecodeOptions = void 0;
  var Kr = Mt();
  F.defaultDecodeOptions = {};
  function un(r5, e = F.defaultDecodeOptions) {
    return new Kr.Decoder(e.extensionCodec, e.context, e.maxStrLength, e.maxBinLength, e.maxArrayLength, e.maxMapLength, e.maxExtLength).decode(r5);
  }
  F.decode = un;
  function pn(r5, e = F.defaultDecodeOptions) {
    return new Kr.Decoder(e.extensionCodec, e.context, e.maxStrLength, e.maxBinLength, e.maxArrayLength, e.maxMapLength, e.maxExtLength).decodeMulti(r5);
  }
  F.decodeMulti = pn;
});
var Zr = S((Y) => {
  "use strict";
  Object.defineProperty(Y, "__esModule", { value: true });
  Y.ensureAsyncIterable = Y.asyncIterableFromStream = Y.isAsyncIterable = void 0;
  function Qr(r5) {
    return r5[Symbol.asyncIterator] != null;
  }
  Y.isAsyncIterable = Qr;
  function dn(r5) {
    if (r5 == null) throw new Error("Assertion Failure: value must not be null nor undefined");
  }
  async function* Yr(r5) {
    let e = r5.getReader();
    try {
      for (; ; ) {
        let { done: t, value: s } = await e.read();
        if (t) return;
        dn(s), yield s;
      }
    } finally {
      e.releaseLock();
    }
  }
  Y.asyncIterableFromStream = Yr;
  function hn(r5) {
    return Qr(r5) ? r5 : Yr(r5);
  }
  Y.ensureAsyncIterable = hn;
});
var ts = S((q) => {
  "use strict";
  Object.defineProperty(q, "__esModule", { value: true });
  q.decodeStream = q.decodeMultiStream = q.decodeArrayStream = q.decodeAsync = void 0;
  var fr = Mt(), mr = Zr(), Wt = yr();
  async function yn(r5, e = Wt.defaultDecodeOptions) {
    let t = (0, mr.ensureAsyncIterable)(r5);
    return new fr.Decoder(e.extensionCodec, e.context, e.maxStrLength, e.maxBinLength, e.maxArrayLength, e.maxMapLength, e.maxExtLength).decodeAsync(t);
  }
  q.decodeAsync = yn;
  function fn(r5, e = Wt.defaultDecodeOptions) {
    let t = (0, mr.ensureAsyncIterable)(r5);
    return new fr.Decoder(e.extensionCodec, e.context, e.maxStrLength, e.maxBinLength, e.maxArrayLength, e.maxMapLength, e.maxExtLength).decodeArrayStream(t);
  }
  q.decodeArrayStream = fn;
  function es(r5, e = Wt.defaultDecodeOptions) {
    let t = (0, mr.ensureAsyncIterable)(r5);
    return new fr.Decoder(e.extensionCodec, e.context, e.maxStrLength, e.maxBinLength, e.maxArrayLength, e.maxMapLength, e.maxExtLength).decodeStream(t);
  }
  q.decodeMultiStream = es;
  function mn(r5, e = Wt.defaultDecodeOptions) {
    return es(r5, e);
  }
  q.decodeStream = mn;
});
var ns = S((d) => {
  "use strict";
  Object.defineProperty(d, "__esModule", { value: true });
  d.decodeTimestampExtension = d.encodeTimestampExtension = d.decodeTimestampToTimeSpec = d.encodeTimeSpecToTimestamp = d.encodeDateToTimeSpec = d.EXT_TIMESTAMP = d.ExtData = d.ExtensionCodec = d.Encoder = d.DataViewIndexOutOfBoundsError = d.DecodeError = d.Decoder = d.decodeStream = d.decodeMultiStream = d.decodeArrayStream = d.decodeAsync = d.decodeMulti = d.decode = d.encode = void 0;
  var Rn = zr();
  Object.defineProperty(d, "encode", { enumerable: true, get: function() {
    return Rn.encode;
  } });
  var rs = yr();
  Object.defineProperty(d, "decode", { enumerable: true, get: function() {
    return rs.decode;
  } });
  Object.defineProperty(d, "decodeMulti", { enumerable: true, get: function() {
    return rs.decodeMulti;
  } });
  var At = ts();
  Object.defineProperty(d, "decodeAsync", { enumerable: true, get: function() {
    return At.decodeAsync;
  } });
  Object.defineProperty(d, "decodeArrayStream", { enumerable: true, get: function() {
    return At.decodeArrayStream;
  } });
  Object.defineProperty(d, "decodeMultiStream", { enumerable: true, get: function() {
    return At.decodeMultiStream;
  } });
  Object.defineProperty(d, "decodeStream", { enumerable: true, get: function() {
    return At.decodeStream;
  } });
  var ss = Mt();
  Object.defineProperty(d, "Decoder", { enumerable: true, get: function() {
    return ss.Decoder;
  } });
  Object.defineProperty(d, "DataViewIndexOutOfBoundsError", { enumerable: true, get: function() {
    return ss.DataViewIndexOutOfBoundsError;
  } });
  var gn = Et();
  Object.defineProperty(d, "DecodeError", { enumerable: true, get: function() {
    return gn.DecodeError;
  } });
  var bn = ir();
  Object.defineProperty(d, "Encoder", { enumerable: true, get: function() {
    return bn.Encoder;
  } });
  var wn = Tt();
  Object.defineProperty(d, "ExtensionCodec", { enumerable: true, get: function() {
    return wn.ExtensionCodec;
  } });
  var xn = rr();
  Object.defineProperty(d, "ExtData", { enumerable: true, get: function() {
    return xn.ExtData;
  } });
  var ge = nr();
  Object.defineProperty(d, "EXT_TIMESTAMP", { enumerable: true, get: function() {
    return ge.EXT_TIMESTAMP;
  } });
  Object.defineProperty(d, "encodeDateToTimeSpec", { enumerable: true, get: function() {
    return ge.encodeDateToTimeSpec;
  } });
  Object.defineProperty(d, "encodeTimeSpecToTimestamp", { enumerable: true, get: function() {
    return ge.encodeTimeSpecToTimestamp;
  } });
  Object.defineProperty(d, "decodeTimestampToTimeSpec", { enumerable: true, get: function() {
    return ge.decodeTimestampToTimeSpec;
  } });
  Object.defineProperty(d, "encodeTimestampExtension", { enumerable: true, get: function() {
    return ge.encodeTimestampExtension;
  } });
  Object.defineProperty(d, "decodeTimestampExtension", { enumerable: true, get: function() {
    return ge.decodeTimestampExtension;
  } });
});
var A = class extends Error {
  constructor(e) {
    super(e), this.name = this.constructor.name, Object.setPrototypeOf(this, new.target.prototype);
  }
};
var O = class extends A {
};
var D = class extends A {
};
var X = class extends A {
};
var b = typeof process < "u" && process.release && process.release.name === "node";
var Gt;
if (globalThis.document) Gt = (r5) => new Promise((e, t) => {
  let s = document.createElement("script");
  s.src = r5, s.onload = () => e(), s.onerror = t, document.head.appendChild(s);
});
else if (globalThis.importScripts) Gt = async (r5) => {
  try {
    globalThis.importScripts(r5);
  } catch (e) {
    if (e instanceof TypeError) await Promise.resolve().then(() => Pe(te(r5)));
    else throw e;
  }
};
else if (b) Gt = async (r5) => {
  let e = (await Promise.resolve().then(() => Pe(te("path")))).default;
  await Promise.resolve().then(() => Pe(te(e.resolve(r5))));
};
else throw new A("Cannot determine runtime environment");
var N = { null: 0, symbol: 1, pairlist: 2, closure: 3, environment: 4, promise: 5, call: 6, special: 7, builtin: 8, string: 9, logical: 10, integer: 13, double: 14, complex: 15, character: 16, dots: 17, any: 18, list: 19, expression: 20, bytecode: 21, pointer: 22, weakref: 23, raw: 24, s4: 25, new: 30, free: 31, function: 99 };
function Te(r5) {
  return !!r5 && typeof r5 == "object" && Object.keys(N).includes(r5.type);
}
function re(r5) {
  return !!r5 && typeof r5 == "object" && "re" in r5 && "im" in r5;
}
var c = {};
function Tr(r5) {
  Object.keys(r5).forEach((e) => c._free(r5[e]));
}
function Se(r5) {
  return c._Rf_protect(j(r5)), r5;
}
function w(r5, e) {
  return c._Rf_protect(j(r5)), ++e.n, r5;
}
function Sr(r5) {
  let e = c._malloc(4);
  return c._R_ProtectWithIndex(j(r5), e), { loc: c.getValue(e, "i32"), ptr: e };
}
function _r(r5) {
  c._Rf_unprotect(1), c._free(r5.ptr);
}
function kr(r5, e) {
  return c._R_Reprotect(j(r5), e.loc), r5;
}
function P(r5) {
  c._Rf_unprotect(r5);
}
function $t(r5, e, t) {
  c._Rf_defineVar(j(e), j(t), j(r5));
}
function Xt(r5, e) {
  let t = {}, s = { n: 0 };
  try {
    let n = new ke(e);
    w(n, s), t.code = c.allocateUTF8(r5);
    let o = c._R_ParseEvalString(t.code, n.ptr);
    return h.wrap(o);
  } finally {
    Tr(t), P(s.n);
  }
}
function _e(r5, e) {
  return c.getWasmTableEntry(c.GOT.ffi_safe_eval.value)(j(r5), j(e));
}
var _s = /* @__PURE__ */ new WeakMap();
function Mr(r5, e) {
  return _s.set(r5, e), r5;
}
function Wr(r5) {
  return typeof r5 == "string" && r5.length === Kt;
}
var Kt = 63;
function de() {
  let r5 = Array.from({ length: 4 }, ks).join("-");
  if (r5.length !== Kt) throw new Error("comlink internal error: UUID has the wrong length");
  return r5;
}
function ks() {
  let r5 = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16), e = 15 - r5.length;
  return e > 0 && (r5 = Array.from({ length: e }, () => 0).join("") + r5), r5;
}
function j(r5) {
  return st(r5) ? r5.ptr : r5;
}
function oe(r5, e) {
  if (c._TYPEOF(r5.ptr) !== N[e]) throw new Error(`Unexpected object type "${r5.type()}" when expecting type "${e}"`);
}
function Ar(r5) {
  if (Te(r5)) return new (Or(r5.type))(r5);
  if (typeof r5 > "u") return new Me();
  if (r5 && typeof r5 == "object" && "type" in r5 && r5.type === "null") return new Me();
  if (r5 === null) return new ne({ type: "logical", names: null, values: [null] });
  if (typeof r5 == "boolean") return new ne(r5);
  if (typeof r5 == "number") return new Ce(r5);
  if (typeof r5 == "string") return new z(r5);
  if (re(r5)) return new tt(r5);
  if (ArrayBuffer.isView(r5) || r5 instanceof ArrayBuffer) return new rt(r5);
  if (Array.isArray(r5)) return Ms(r5);
  if (typeof r5 == "object") return Oe.fromObject(r5);
  throw new Error("R object construction for this JS object is not yet supported.");
}
function Ms(r5) {
  let e = { n: 0 };
  if (r5.every((s) => s && typeof s == "object" && !st(s) && !re(s))) {
    let s = r5, n = s.every((a) => Object.keys(a).filter((l) => !Object.keys(s[0]).includes(l)).length === 0 && Object.keys(s[0]).filter((l) => !Object.keys(a).includes(l)).length === 0), o = s.every((a) => Object.values(a).every((l) => Cr(l) || Dr(l)));
    if (n && o) return Oe.fromD3(s);
  }
  if (r5.every((s) => typeof s == "boolean" || s === null)) return new ne(r5);
  if (r5.every((s) => typeof s == "number" || s === null)) return new Ce(r5);
  if (r5.every((s) => typeof s == "string" || s === null)) return new z(r5);
  try {
    let s = new K([new C("c"), ...r5]);
    return w(s, e), s.eval();
  } finally {
    P(e.n);
  }
}
var x = class {
  constructor(e) {
    this.ptr = e;
  }
  type() {
    let e = c._TYPEOF(this.ptr);
    return Object.keys(N).find((s) => N[s] === e);
  }
};
var ye;
var et;
var se = class se2 extends x {
  constructor(t) {
    if (!(t instanceof x)) return Ar(t);
    super(t.ptr);
    p(this, ye);
  }
  static wrap(t) {
    let s = c._TYPEOF(t), n = Object.keys(N)[Object.values(N).indexOf(s)];
    return new (Or(n))(new x(t));
  }
  get [Symbol.toStringTag]() {
    return `RObject:${this.type()}`;
  }
  static getPersistentObject(t) {
    return _[t];
  }
  getPropertyValue(t) {
    return this[t];
  }
  inspect() {
    Xt(".Internal(inspect(x))", { x: this });
  }
  isNull() {
    return c._TYPEOF(this.ptr) === N.null;
  }
  isNa() {
    try {
      let t = Xt("is.na(x)", { x: this });
      return Se(t), t.toBoolean();
    } finally {
      P(1);
    }
  }
  isUnbound() {
    return this.ptr === _.unboundValue.ptr;
  }
  attrs() {
    return We.wrap(c._ATTRIB(this.ptr));
  }
  class() {
    let t = { n: 0 }, s = new K([new C("class"), this]);
    w(s, t);
    try {
      return s.eval();
    } finally {
      P(t.n);
    }
  }
  setNames(t) {
    let s;
    if (t === null) s = _.null;
    else if (Array.isArray(t) && t.every((n) => typeof n == "string" || n === null)) s = new z(t);
    else throw new Error("Argument to setNames must be null or an Array of strings or null");
    return c._Rf_setAttrib(this.ptr, _.namesSymbol.ptr, s.ptr), this;
  }
  names() {
    let t = z.wrap(c._Rf_getAttrib(this.ptr, _.namesSymbol.ptr));
    return t.isNull() ? null : t.toArray();
  }
  includes(t) {
    let s = this.names();
    return s && s.includes(t);
  }
  toJs(t = { depth: 0 }, s = 1) {
    throw new Error("This R object cannot be converted to JS");
  }
  subset(t) {
    return M(this, ye, et).call(this, t, _.bracketSymbol.ptr);
  }
  get(t) {
    return M(this, ye, et).call(this, t, _.bracket2Symbol.ptr);
  }
  getDollar(t) {
    return M(this, ye, et).call(this, t, _.dollarSymbol.ptr);
  }
  pluck(...t) {
    let s = Sr(_.null);
    try {
      let n = (a, l) => {
        let u = a.get(l);
        return kr(u, s);
      }, o = t.reduce(n, this);
      return o.isNull() ? void 0 : o;
    } finally {
      _r(s);
    }
  }
  set(t, s) {
    let n = { n: 0 };
    try {
      let o = new se2(t);
      w(o, n);
      let a = new se2(s);
      w(a, n);
      let l = new C("[[<-"), u = c._Rf_lang4(l.ptr, this.ptr, o.ptr, a.ptr);
      return w(u, n), se2.wrap(_e(u, _.baseEnv));
    } finally {
      P(n.n);
    }
  }
  static getMethods(t) {
    let s = /* @__PURE__ */ new Set(), n = t;
    do
      Object.getOwnPropertyNames(n).map((o) => s.add(o));
    while (n = Object.getPrototypeOf(n));
    return [...s.keys()].filter((o) => typeof t[o] == "function");
  }
};
ye = /* @__PURE__ */ new WeakSet(), et = function(t, s) {
  let n = { n: 0 };
  try {
    let o = new se(t);
    w(o, n);
    let a = c._Rf_lang3(s, this.ptr, o.ptr);
    return w(a, n), se.wrap(_e(a, _.baseEnv));
  } finally {
    P(n.n);
  }
};
var h = se;
var Me = class extends h {
  constructor() {
    return super(new x(c.getValue(c._R_NilValue, "*"))), this;
  }
  toJs() {
    return { type: "null" };
  }
};
var C = class extends h {
  constructor(e) {
    if (e instanceof x) {
      oe(e, "symbol"), super(e);
      return;
    }
    let t = c.allocateUTF8(e);
    try {
      super(new x(c._Rf_install(t)));
    } finally {
      c._free(t);
    }
  }
  toJs() {
    let e = this.toObject();
    return { type: "symbol", printname: e.printname, symvalue: e.symvalue, internal: e.internal };
  }
  toObject() {
    return { printname: this.printname().isUnbound() ? null : this.printname().toString(), symvalue: this.symvalue().isUnbound() ? null : this.symvalue().ptr, internal: this.internal().isNull() ? null : this.internal().ptr };
  }
  toString() {
    return this.printname().toString();
  }
  printname() {
    return De.wrap(c._PRINTNAME(this.ptr));
  }
  symvalue() {
    return h.wrap(c._SYMVALUE(this.ptr));
  }
  internal() {
    return h.wrap(c._INTERNAL(this.ptr));
  }
};
var We = class r extends h {
  constructor(e) {
    if (e instanceof x) return oe(e, "pairlist"), super(e), this;
    let t = { n: 0 };
    try {
      let { names: s, values: n } = fe(e), o = r.wrap(c._Rf_allocList(n.length));
      w(o, t);
      for (let [a, l] = [0, o]; !l.isNull(); [a, l] = [a + 1, l.cdr()]) l.setcar(new h(n[a]));
      o.setNames(s), super(o);
    } finally {
      P(t.n);
    }
  }
  get length() {
    return this.toArray().length;
  }
  toArray(e = { depth: 1 }) {
    return this.toJs(e).values;
  }
  toObject({ allowDuplicateKey: e = true, allowEmptyKey: t = false, depth: s = -1 } = {}) {
    let n = this.entries({ depth: s }), o = n.map(([a]) => a);
    if (!e && new Set(o).size !== o.length) throw new Error("Duplicate key when converting pairlist without allowDuplicateKey enabled");
    if (!t && o.some((a) => !a)) throw new Error("Empty or null key when converting pairlist without allowEmptyKey enabled");
    return Object.fromEntries(n.filter((a, l) => n.findIndex((u) => u[0] === a[0]) === l));
  }
  entries(e = { depth: 1 }) {
    let t = this.toJs(e);
    return t.values.map((s, n) => [t.names ? t.names[n] : null, s]);
  }
  toJs(e = { depth: 0 }, t = 1) {
    let s = [], n = false, o = [];
    for (let l = this; !l.isNull(); l = l.cdr()) {
      let u = l.tag();
      u.isNull() ? s.push("") : (n = true, s.push(u.toString())), e.depth && t >= e.depth ? o.push(l.car()) : o.push(l.car().toJs(e, t + 1));
    }
    return { type: "pairlist", names: n ? s : null, values: o };
  }
  includes(e) {
    return e in this.toObject();
  }
  setcar(e) {
    c._SETCAR(this.ptr, e.ptr);
  }
  car() {
    return h.wrap(c._CAR(this.ptr));
  }
  cdr() {
    return h.wrap(c._CDR(this.ptr));
  }
  tag() {
    return h.wrap(c._TAG(this.ptr));
  }
};
var K = class r2 extends h {
  constructor(e) {
    if (e instanceof x) return oe(e, "call"), super(e), this;
    let t = { n: 0 };
    try {
      let { values: s } = fe(e), n = s.map((a) => w(new h(a), t)), o = r2.wrap(c._Rf_allocVector(N.call, s.length));
      w(o, t);
      for (let [a, l] = [0, o]; !l.isNull(); [a, l] = [a + 1, l.cdr()]) l.setcar(n[a]);
      super(o);
    } finally {
      P(t.n);
    }
  }
  setcar(e) {
    c._SETCAR(this.ptr, e.ptr);
  }
  car() {
    return h.wrap(c._CAR(this.ptr));
  }
  cdr() {
    return h.wrap(c._CDR(this.ptr));
  }
  eval() {
    return c.webr.evalR(this, { env: _.baseEnv });
  }
  capture(e = {}) {
    return c.webr.captureR(this, e);
  }
  deparse() {
    let e = { n: 0 };
    try {
      let t = c._Rf_lang2(new C("deparse1").ptr, c._Rf_lang2(new C("quote").ptr, this.ptr));
      w(t, e);
      let s = z.wrap(_e(t, _.baseEnv));
      return w(s, e), s.toString();
    } finally {
      P(e.n);
    }
  }
};
var Ae = class r3 extends h {
  constructor(e, t = null) {
    if (e instanceof x) {
      if (oe(e, "list"), super(e), t) {
        if (t.length !== this.length) throw new Error("Can't construct named `RList`. Supplied `names` must be the same length as the list.");
        this.setNames(t);
      }
      return this;
    }
    let s = { n: 0 };
    try {
      let n = fe(e), o = c._Rf_allocVector(N.list, n.values.length);
      w(o, s), n.values.forEach((l, u) => {
        Ir(l) ? c._SET_VECTOR_ELT(o, u, new r3(l).ptr) : c._SET_VECTOR_ELT(o, u, new h(l).ptr);
      });
      let a = t || n.names;
      if (a && a.length !== n.values.length) throw new Error("Can't construct named `RList`. Supplied `names` must be the same length as the list.");
      h.wrap(o).setNames(a), super(new x(o));
    } finally {
      P(s.n);
    }
  }
  get length() {
    return c._LENGTH(this.ptr);
  }
  isDataFrame() {
    let e = We.wrap(c._ATTRIB(this.ptr)).get("class");
    return !e.isNull() && e.toArray().includes("data.frame");
  }
  toArray(e = { depth: 1 }) {
    return this.toJs(e).values;
  }
  toObject({ allowDuplicateKey: e = true, allowEmptyKey: t = false, depth: s = -1 } = {}) {
    let n = this.entries({ depth: s }), o = n.map(([a]) => a);
    if (!e && new Set(o).size !== o.length) throw new Error("Duplicate key when converting list without allowDuplicateKey enabled");
    if (!t && o.some((a) => !a)) throw new Error("Empty or null key when converting list without allowEmptyKey enabled");
    return Object.fromEntries(n.filter((a, l) => n.findIndex((u) => u[0] === a[0]) === l));
  }
  toD3() {
    if (!this.isDataFrame()) throw new Error("Can't convert R list object to D3 format. Object must be of class 'data.frame'.");
    return this.entries().reduce((t, s) => (s[1].forEach((n, o) => t[o] = Object.assign(t[o] || {}, { [s[0]]: n })), t), []);
  }
  entries(e = { depth: -1 }) {
    let t = this.toJs(e);
    return this.isDataFrame() && e.depth < 0 && (t.values = t.values.map((s) => s.toArray())), t.values.map((s, n) => [t.names ? t.names[n] : null, s]);
  }
  toJs(e = { depth: 0 }, t = 1) {
    return { type: "list", names: this.names(), values: [...Array(this.length).keys()].map((s) => e.depth && t >= e.depth ? this.get(s + 1) : this.get(s + 1).toJs(e, t + 1)) };
  }
};
var Oe = class r4 extends Ae {
  constructor(e) {
    if (e instanceof x) {
      if (super(e), !this.isDataFrame()) throw new Error("Can't construct `RDataFrame`. Supplied R object is not a `data.frame`.");
      return this;
    }
    return r4.fromObject(e);
  }
  static fromObject(e) {
    let { names: t, values: s } = fe(e), n = { n: 0 };
    try {
      let o = !!t && t.length > 0 && t.every((l) => l), a = s.length > 0 && s.every((l) => Array.isArray(l) || ArrayBuffer.isView(l) || l instanceof ArrayBuffer);
      if (o && a) {
        let l = s, u = l.every((R) => R.length === l[0].length), v = l.every((R) => Cr(R[0]) || Dr(R[0]));
        if (u && v) {
          let R = new Ae({ type: "list", names: t, values: l.map((Ze) => Ar(Ze)) });
          w(R, n);
          let U = new K([new C("as.data.frame"), R]);
          return w(U, n), new r4(U.eval());
        }
      }
    } finally {
      P(n.n);
    }
    throw new Error("Can't construct `data.frame`. Source object is not eligible.");
  }
  static fromD3(e) {
    return this.fromObject(Object.fromEntries(Object.keys(e[0]).map((t) => [t, e.map((s) => s[t])])));
  }
};
var he = class extends h {
  exec(...e) {
    let t = { n: 0 };
    try {
      let s = new K([this, ...e]);
      return w(s, t), s.eval();
    } finally {
      P(t.n);
    }
  }
  capture(e = {}, ...t) {
    let s = { n: 0 };
    try {
      let n = new K([this, ...t]);
      return w(n, s), n.capture(e);
    } finally {
      P(s.n);
    }
  }
};
var nt = class nt2 extends h {
  constructor(e) {
    if (e instanceof x) {
      oe(e, "string"), super(e);
      return;
    }
    let t = c.allocateUTF8(e);
    try {
      super(new x(c._Rf_mkCharCE(t, nt2.CEType.CE_UTF8)));
    } finally {
      c._free(t);
    }
  }
  toString() {
    let e = c._vmaxget();
    try {
      return c.UTF8ToString(c._Rf_translateCharUTF8(this.ptr));
    } finally {
      c._vmaxset(e);
    }
  }
  toJs() {
    return { type: "string", value: this.toString() };
  }
};
nt.CEType = { CE_NATIVE: 0, CE_UTF8: 1, CE_LATIN1: 2, CE_BYTES: 3, CE_SYMBOL: 5, CE_ANY: 99 };
var De = nt;
var ke = class extends h {
  constructor(e = {}) {
    if (e instanceof x) return oe(e, "environment"), super(e), this;
    let t = 0;
    try {
      let { names: s, values: n } = fe(e), o = Se(c._R_NewEnv(_.globalEnv.ptr, 0, 0));
      ++t, n.forEach((a, l) => {
        let u = s ? s[l] : null;
        if (!u) throw new Error("Can't create object in new environment with empty symbol name");
        let v = new C(u), R = Se(new h(a));
        try {
          $t(o, v, R);
        } finally {
          P(1);
        }
      }), super(new x(o));
    } finally {
      P(t);
    }
  }
  ls(e = false, t = true) {
    return z.wrap(c._R_lsInternal3(this.ptr, Number(e), Number(t))).toArray();
  }
  bind(e, t) {
    let s = new C(e), n = Se(new h(t));
    try {
      $t(this, s, n);
    } finally {
      P(1);
    }
  }
  names() {
    return this.ls(true, true);
  }
  frame() {
    return h.wrap(c._FRAME(this.ptr));
  }
  subset(e) {
    if (typeof e == "number") throw new Error("Object of type environment is not subsettable");
    return this.getDollar(e);
  }
  toObject({ depth: e = -1 } = {}) {
    let t = this.names();
    return Object.fromEntries([...Array(t.length).keys()].map((s) => {
      let n = this.getDollar(t[s]);
      return [t[s], e < 0 ? n : n.toJs({ depth: e })];
    }));
  }
  toJs(e = { depth: 0 }, t = 1) {
    let s = this.names(), n = [...Array(s.length).keys()].map((o) => e.depth && t >= e.depth ? this.getDollar(s[o]) : this.getDollar(s[o]).toJs(e, t + 1));
    return { type: "environment", names: s, values: n };
  }
};
var Q = class extends h {
  constructor(e, t, s) {
    if (e instanceof x) return oe(e, t), super(e), this;
    let n = { n: 0 };
    try {
      let { names: o, values: a } = fe(e), l = c._Rf_allocVector(N[t], a.length);
      w(l, n), a.forEach(s(l)), h.wrap(l).setNames(o), super(new x(l));
    } finally {
      P(n.n);
    }
  }
  get length() {
    return c._LENGTH(this.ptr);
  }
  get(e) {
    return super.get(e);
  }
  subset(e) {
    return super.subset(e);
  }
  getDollar() {
    throw new Error("$ operator is invalid for atomic vectors");
  }
  detectMissing() {
    let e = { n: 0 };
    try {
      let t = c._Rf_lang2(new C("is.na").ptr, this.ptr);
      w(t, e);
      let s = ne.wrap(_e(t, _.baseEnv));
      w(s, e);
      let n = s.toTypedArray();
      return Array.from(n).map((o) => !!o);
    } finally {
      P(e.n);
    }
  }
  toArray() {
    let e = this.toTypedArray();
    return this.detectMissing().map((t, s) => t ? null : e[s]);
  }
  toObject({ allowDuplicateKey: e = true, allowEmptyKey: t = false } = {}) {
    let s = this.entries(), n = s.map(([o]) => o);
    if (!e && new Set(n).size !== n.length) throw new Error("Duplicate key when converting atomic vector without allowDuplicateKey enabled");
    if (!t && n.some((o) => !o)) throw new Error("Empty or null key when converting atomic vector without allowEmptyKey enabled");
    return Object.fromEntries(s.filter((o, a) => s.findIndex((l) => l[0] === o[0]) === a));
  }
  entries() {
    let e = this.toArray(), t = this.names();
    return e.map((s, n) => [t ? t[n] : null, s]);
  }
  toJs() {
    return { type: this.type(), names: this.names(), values: this.toArray() };
  }
};
var ot;
var at = class at2 extends Q {
  constructor(e) {
    super(e, "logical", i(at2, ot));
  }
  getBoolean(e) {
    return this.get(e).toArray()[0];
  }
  toBoolean() {
    if (this.length !== 1) throw new Error("Can't convert atomic vector of length > 1 to a scalar JS value");
    let e = this.getBoolean(1);
    if (e === null) throw new Error("Can't convert missing value `NA` to a JS boolean");
    return e;
  }
  toTypedArray() {
    return new Int32Array(c.HEAP32.subarray(c._LOGICAL(this.ptr) / 4, c._LOGICAL(this.ptr) / 4 + this.length));
  }
  toArray() {
    let e = this.toTypedArray();
    return this.detectMissing().map((t, s) => t ? null : !!e[s]);
  }
};
ot = /* @__PURE__ */ new WeakMap(), p(at, ot, (e) => {
  let t = c._LOGICAL(e), s = c.getValue(c._R_NaInt, "i32");
  return (n, o) => {
    c.setValue(t + 4 * o, n === null ? s : !!n, "i32");
  };
});
var ne = at;
var it;
var lt = class lt2 extends Q {
  constructor(e) {
    super(e, "integer", i(lt2, it));
  }
  getNumber(e) {
    return this.get(e).toArray()[0];
  }
  toNumber() {
    if (this.length !== 1) throw new Error("Can't convert atomic vector of length > 1 to a scalar JS value");
    let e = this.getNumber(1);
    if (e === null) throw new Error("Can't convert missing value `NA` to a JS number");
    return e;
  }
  toTypedArray() {
    return new Int32Array(c.HEAP32.subarray(c._INTEGER(this.ptr) / 4, c._INTEGER(this.ptr) / 4 + this.length));
  }
};
it = /* @__PURE__ */ new WeakMap(), p(lt, it, (e) => {
  let t = c._INTEGER(e), s = c.getValue(c._R_NaInt, "i32");
  return (n, o) => {
    c.setValue(t + 4 * o, n === null ? s : Math.round(Number(n)), "i32");
  };
});
var Qt = lt;
var ct;
var ut = class ut2 extends Q {
  constructor(e) {
    super(e, "double", i(ut2, ct));
  }
  getNumber(e) {
    return this.get(e).toArray()[0];
  }
  toNumber() {
    if (this.length !== 1) throw new Error("Can't convert atomic vector of length > 1 to a scalar JS value");
    let e = this.getNumber(1);
    if (e === null) throw new Error("Can't convert missing value `NA` to a JS number");
    return e;
  }
  toTypedArray() {
    return new Float64Array(c.HEAPF64.subarray(c._REAL(this.ptr) / 8, c._REAL(this.ptr) / 8 + this.length));
  }
};
ct = /* @__PURE__ */ new WeakMap(), p(ut, ct, (e) => {
  let t = c._REAL(e), s = c.getValue(c._R_NaReal, "double");
  return (n, o) => {
    c.setValue(t + 8 * o, n === null ? s : n, "double");
  };
});
var Ce = ut;
var pt;
var dt = class dt2 extends Q {
  constructor(e) {
    super(e, "complex", i(dt2, pt));
  }
  getComplex(e) {
    return this.get(e).toArray()[0];
  }
  toComplex() {
    if (this.length !== 1) throw new Error("Can't convert atomic vector of length > 1 to a scalar JS value");
    let e = this.getComplex(1);
    if (e === null) throw new Error("Can't convert missing value `NA` to a JS object");
    return e;
  }
  toTypedArray() {
    return new Float64Array(c.HEAPF64.subarray(c._COMPLEX(this.ptr) / 8, c._COMPLEX(this.ptr) / 8 + 2 * this.length));
  }
  toArray() {
    let e = this.toTypedArray();
    return this.detectMissing().map((t, s) => t ? null : { re: e[2 * s], im: e[2 * s + 1] });
  }
};
pt = /* @__PURE__ */ new WeakMap(), p(dt, pt, (e) => {
  let t = c._COMPLEX(e), s = c.getValue(c._R_NaReal, "double");
  return (n, o) => {
    c.setValue(t + 8 * (2 * o), n === null ? s : n.re, "double"), c.setValue(t + 8 * (2 * o + 1), n === null ? s : n.im, "double");
  };
});
var tt = dt;
var ht;
var yt = class yt2 extends Q {
  constructor(e) {
    super(e, "character", i(yt2, ht));
  }
  getString(e) {
    return this.get(e).toArray()[0];
  }
  toString() {
    if (this.length !== 1) throw new Error("Can't convert atomic vector of length > 1 to a scalar JS value");
    let e = this.getString(1);
    if (e === null) throw new Error("Can't convert missing value `NA` to a JS string");
    return e;
  }
  toTypedArray() {
    return new Uint32Array(c.HEAPU32.subarray(c._STRING_PTR(this.ptr) / 4, c._STRING_PTR(this.ptr) / 4 + this.length));
  }
  toArray() {
    let e = c._vmaxget();
    try {
      return this.detectMissing().map((t, s) => t ? null : c.UTF8ToString(c._Rf_translateCharUTF8(c._STRING_ELT(this.ptr, s))));
    } finally {
      c._vmaxset(e);
    }
  }
};
ht = /* @__PURE__ */ new WeakMap(), p(yt, ht, (e) => (t, s) => {
  t === null ? c._SET_STRING_ELT(e, s, _.naString.ptr) : c._SET_STRING_ELT(e, s, new De(t).ptr);
});
var z = yt;
var ft;
var mt = class mt2 extends Q {
  constructor(e) {
    e instanceof ArrayBuffer && (e = new Uint8Array(e)), super(e, "raw", i(mt2, ft));
  }
  getNumber(e) {
    return this.get(e).toArray()[0];
  }
  toNumber() {
    if (this.length !== 1) throw new Error("Can't convert atomic vector of length > 1 to a scalar JS value");
    let e = this.getNumber(1);
    if (e === null) throw new Error("Can't convert missing value `NA` to a JS number");
    return e;
  }
  toTypedArray() {
    return new Uint8Array(c.HEAPU8.subarray(c._RAW(this.ptr), c._RAW(this.ptr) + this.length));
  }
};
ft = /* @__PURE__ */ new WeakMap(), p(mt, ft, (e) => {
  let t = c._RAW(e);
  return (s, n) => {
    c.setValue(t + n, Number(s), "i8");
  };
});
var rt = mt;
function fe(r5) {
  return Te(r5) ? r5 : Array.isArray(r5) || ArrayBuffer.isView(r5) ? { names: null, values: r5 } : r5 && typeof r5 == "object" && !re(r5) ? { names: Object.keys(r5), values: Object.values(r5) } : { names: null, values: [r5] };
}
function Or(r5) {
  let e = { object: h, null: Me, symbol: C, pairlist: We, closure: he, environment: ke, call: K, special: he, builtin: he, string: De, logical: ne, integer: Qt, double: Ce, complex: tt, character: z, list: Ae, raw: rt, function: he, dataframe: Oe };
  return r5 in e ? e[r5] : h;
}
function st(r5) {
  return r5 instanceof h;
}
function Dr(r5) {
  let e = ["logical", "integer", "double", "complex", "character"];
  return st(r5) && e.includes(r5.type()) || st(r5) && r5.isNa();
}
function Cr(r5) {
  return r5 === null || typeof r5 == "number" || typeof r5 == "boolean" || typeof r5 == "string" || re(r5);
}
var _;
function ae() {
  let r5 = { resolve: (() => {
  }), reject: (() => {
  }), promise: Promise.resolve() }, e = new Promise((t, s) => {
    r5.resolve = t, r5.reject = s;
  });
  return r5.promise = e, r5;
}
function Ur(r5) {
  return new Promise((e) => setTimeout(e, r5));
}
function B(r5, e, t, ...s) {
  return r5 == null || As(r5) ? r5 : r5 instanceof ArrayBuffer ? new Uint8Array(r5) : e(r5) ? t(r5, ...s) : Array.isArray(r5) || ArrayBuffer.isView(r5) ? r5.map((n) => B(n, e, t, ...s)) : r5 instanceof x ? r5 : typeof r5 == "object" ? Object.fromEntries(Object.entries(r5).map(([n, o]) => [n, B(o, e, t, ...s)])) : r5;
}
function me(r5, e, t, s, n = true) {
  let o = new XMLHttpRequest();
  o.open("get", r5, n), o.onload = () => {
    if (o.status >= 200 && o.status < 300) try {
      let a = new Worker(URL.createObjectURL(new Blob([o.responseText])), s);
      e(a);
    } catch (a) {
      if (t) t(a instanceof Error ? a : new Error(String(a)));
      else throw a;
    }
    else t ? t(new Error(`Worker loading error: HTTP ${o.status}`)) : console.error(`HTTP Error: ${o.status}`);
  }, o.onerror = () => {
    t ? t(new Error(`Network error loading ${r5}`)) : console.error(`Network error loading ${r5}`);
  }, o.send();
}
function Rt(r5) {
  if (b) return false;
  let e = new URL(location.href), t = new URL(r5, location.origin);
  return !(e.host === t.host && e.port === t.port && e.protocol === t.protocol);
}
function As(r5) {
  return typeof ImageBitmap < "u" && r5 instanceof ImageBitmap;
}
function Ir(r5) {
  return typeof r5 == "object" && r5 !== null && !Array.isArray(r5) && !ArrayBuffer.isView(r5) && !re(r5) && !Te(r5) && !(r5 instanceof Date) && !(r5 instanceof RegExp) && !(r5 instanceof Error) && !(r5 instanceof x) && Object.getPrototypeOf(r5) === Object.prototype;
}
var is = Pe(ns());
var En = new TextEncoder();
async function le(r5, e, t) {
  try {
    let { taskId: s, sizeBuffer: n, dataBuffer: o, signalBuffer: a } = e, l = (0, is.encode)(t), u = l.length <= o.length;
    if (Atomics.store(n, 0, l.length), Atomics.store(n, 1, +u), !u) {
      let [v, R] = vn(r5);
      o.set(En.encode(v)), await os(a, s), o = (await R).dataBuffer;
    }
    o.set(l), Atomics.store(n, 1, 1), await os(a, s);
  } catch (s) {
    console.warn(s);
  }
}
function vn(r5) {
  let e = de();
  return [e, new Promise((t) => {
    b ? r5.once("message", (s) => {
      !s.id || s.id !== e || t(s);
    }) : r5.addEventListener("message", function s(n) {
      !n.data || !n.data.id || n.data.id !== e || (r5.removeEventListener("message", s), t(n.data));
    }), r5.start && r5.start();
  })];
}
async function os(r5, e) {
  let t = (e >> 1) % 32, s = 1;
  for (; Atomics.compareExchange(r5, t + 1, 0, e) !== 0; ) await Ur(s), s < 32 && (s *= 2);
  Atomics.or(r5, 0, 1 << t), Atomics.notify(r5, 0);
}
var V;
var J;
var Le;
var gr;
var be = class {
  constructor() {
    p(this, Le);
    p(this, V);
    p(this, J);
    m(this, J, []), m(this, V, []);
  }
  reset() {
    m(this, J, []), m(this, V, []);
  }
  put(e) {
    i(this, J).length || M(this, Le, gr).call(this), i(this, J).shift()(e);
  }
  async get() {
    return i(this, V).length || M(this, Le, gr).call(this), i(this, V).shift();
  }
  isEmpty() {
    return !i(this, V).length;
  }
  isBlocked() {
    return !!i(this, J).length;
  }
  get length() {
    return i(this, V).length - i(this, J).length;
  }
};
V = /* @__PURE__ */ new WeakMap(), J = /* @__PURE__ */ new WeakMap(), Le = /* @__PURE__ */ new WeakSet(), gr = function() {
  i(this, V).push(new Promise((e) => {
    i(this, J).push(e);
  }));
};
function br(r5, e) {
  return cs({ type: "request", data: { uuid: de(), msg: r5 } }, e);
}
function ls(r5, e, t) {
  return cs({ type: "response", data: { uuid: r5, resp: e } }, t);
}
function cs(r5, e) {
  return e && Mr(r5, e), r5;
}
function us(r5) {
  let e = new O(r5.obj.message);
  return r5.obj.name == "ErrnoError" ? e.message = `ErrnoError: ${String(r5.obj.errno)}` : r5.obj.name !== "Error" && (e.name = r5.obj.name), e.stack = r5.obj.stack, e;
}
function Pn(r5) {
  return !!r5 && typeof r5 == "object" && "payloadType" in r5 && "obj" in r5;
}
function Ot(r5) {
  return Pn(r5) && r5.payloadType === "ptr";
}
var we;
var Fe;
var xe = class {
  constructor() {
    this.inputQueue = new be();
    this.outputQueue = new be();
    this.systemQueue = new be();
    this.eventQueue = new Array();
    p(this, we, /* @__PURE__ */ new Map());
    p(this, Fe, false);
  }
  async read() {
    return await this.outputQueue.get();
  }
  async flush() {
    let e = [];
    for (; !this.outputQueue.isEmpty(); ) e.push(await this.read());
    return e;
  }
  async readSystem() {
    return await this.systemQueue.get();
  }
  write(e) {
    if (i(this, Fe)) throw new D("The webR communication channel has been closed.");
    this.inputQueue.put(e);
  }
  async request(e, t) {
    let s = br(e, t), { resolve: n, reject: o, promise: a } = ae();
    return i(this, we).set(s.data.uuid, { resolve: n, reject: o }), this.write(s), a;
  }
  putClosedMessage() {
    m(this, Fe, true), this.outputQueue.put({ type: "closed" });
  }
  resolveResponse(e) {
    let t = e.data.uuid, s = i(this, we).get(t);
    if (s) {
      let n = e.data.resp.data;
      i(this, we).delete(t), n.payloadType === "err" ? s.reject(us(n)) : s.resolve(n);
    } else console.warn("Can't find request.");
  }
};
we = /* @__PURE__ */ new WeakMap(), Fe = /* @__PURE__ */ new WeakMap();
var Ra = new TextDecoder("utf-8");
var ga = new Int32Array(new ArrayBuffer(4));
var ce;
var Dt = class {
  constructor(e) {
    this.chan = e;
    p(this, ce, /* @__PURE__ */ new Map());
    this.WebSocket = b ? te("ws") : WebSocket;
  }
  new(e, t, s) {
    let n = new this.WebSocket(t, s || []);
    n.binaryType = "arraybuffer", n.addEventListener("open", () => {
      this.chan.emit({ type: "websocket-open", data: { uuid: e } });
    }), n.addEventListener("message", (o) => {
      let a = new Uint8Array(o.data);
      this.chan.emit({ type: "websocket-message", data: { uuid: e, data: a } });
    }), n.addEventListener("close", (o) => {
      this.chan.emit({ type: "websocket-close", data: { uuid: e, code: o.code, reason: o.reason } });
    }), n.addEventListener("error", () => {
      this.chan.emit({ type: "websocket-error", data: { uuid: e } });
    }), i(this, ce).set(e, n);
  }
  send(e, t) {
    let s = i(this, ce).get(e);
    s == null || s.send(t);
  }
  close(e, t, s) {
    let n = i(this, ce).get(e);
    n == null || n.close(t, s), i(this, ce).delete(e);
  }
};
ce = /* @__PURE__ */ new WeakMap();
b && (globalThis.CloseEvent = class extends Event {
  constructor(e, t = {}) {
    super(e, t), this.wasClean = t.wasClean || false, this.code = t.code || 0, this.reason = t.reason || "";
  }
});
var Z;
var Ct = class {
  constructor(e) {
    this.chan = e;
    p(this, Z, /* @__PURE__ */ new Map());
  }
  new(e, t, s) {
    if (b) {
      let n = new Worker(t, s), o = n;
      o.on("message", (a) => {
        this.chan.emit({ type: "worker-message", data: { uuid: e, data: a } });
      }), o.on("messageerror", (a) => {
        this.chan.emit({ type: "worker-messageerror", data: { uuid: e, data: a } });
      }), o.on("error", () => {
        this.chan.emit({ type: "worker-error", data: { uuid: e } });
      }), i(this, Z).set(e, n);
    } else me(t, (n) => {
      n.addEventListener("message", (o) => {
        this.chan.emit({ type: "worker-message", data: { uuid: e, data: o.data } });
      }), n.addEventListener("messageerror", (o) => {
        this.chan.emit({ type: "worker-messageerror", data: { uuid: e, data: o.data } });
      }), n.addEventListener("error", () => {
        this.chan.emit({ type: "worker-error", data: { uuid: e } });
      }), i(this, Z).set(e, n);
    }, (n) => {
      throw n;
    }, s, false);
  }
  postMessage(e) {
    let { uuid: t, async: s, handles: n, data: o, transfer: a } = e.data, l = i(this, Z).get(t);
    if (!l) throw new Error(`Worker with uuid ${t} not found`);
    if (!s && n) {
      let u = (v) => {
        let R = v.data.uuid, U = v.data.result, Ze = v.data.error;
        R === t && (Ze ? n.reject(new Error(Ze)) : n.resolve(U), l.removeEventListener("message", u));
      };
      l.addEventListener("message", u);
    }
    l.postMessage({ uuid: t, data: o }, { transfer: a });
  }
  terminate(e) {
    let t = i(this, Z).get(e);
    t == null || t.terminate(), i(this, Z).delete(e);
  }
};
Z = /* @__PURE__ */ new WeakMap();
b && (globalThis.Worker = te("worker_threads").Worker);
var Ee;
var It;
var ps;
var Ve;
var qe = class extends xe {
  constructor(t) {
    super();
    p(this, It);
    p(this, Ee);
    this.close = () => {
    };
    p(this, Ve, async (t2, s2) => {
      if (!(!s2 || !s2.type)) switch (s2.type) {
        case "resolve":
          m(this, Ee, new Int32Array(s2.data)), this.resolve();
          return;
        case "response":
          this.resolveResponse(s2);
          return;
        case "system":
          this.systemQueue.put(s2.data);
          return;
        default:
          this.outputQueue.put(s2);
          return;
        case "sync-request": {
          let n = s2, o = n.data.msg, a = n.data.reqData;
          switch (o.type) {
            case "read": {
              let l = await this.inputQueue.get();
              await le(t2, a, l);
              break;
            }
            case "event": {
              let l = this.eventQueue.shift();
              await le(t2, a, l);
              break;
            }
            case "eval-await": {
              let l = o.data, u = {};
              try {
                u.result = await (0, eval)(l), typeof u.result == "function" && (u.result = String(u.result));
              } catch (v) {
                let R = v;
                u.error = R.message;
              }
              await le(t2, a, { type: "eval-response", data: u });
              break;
            }
            case "post-message-worker": {
              let l = o.data;
              l.handles = ae(), this.systemQueue.put({ type: "postMessageWorker", data: l }), l.async ? await le(t2, a, { type: "post-message-response" }) : l.handles.promise.then((u) => {
                le(t2, a, { type: "post-message-response", data: { result: u } });
              }, (u) => {
                le(t2, a, { type: "post-message-response", data: { error: String(u) } });
              });
              break;
            }
            default:
              throw new D(`Unsupported request type '${o.type}'.`);
          }
          return;
        }
        case "request":
          throw new D("Can't send messages of type 'request' from a worker. Please Use 'sync-request' instead.");
      }
    });
    ({ resolve: this.resolve, reject: this.reject, promise: this.initialised } = ae());
    let s = (n) => {
      M(this, It, ps).call(this, n), this.close = () => {
        n.terminate(), this.putClosedMessage();
      };
      let o = { type: "init", data: { config: t, channelType: H.SharedArrayBuffer } };
      n.postMessage(o);
    };
    if (Rt(t.baseUrl)) me(`${t.baseUrl}webr-worker.js`, (n) => s(n), (n) => {
      this.reject(new O(`Worker loading error: ${n.message}`));
    });
    else {
      let n = new Worker(`${t.baseUrl}webr-worker.js`);
      s(n);
    }
  }
  emit(t) {
    if (!i(this, Ee)) throw new D("Failed attempt to interrupt before initialising interruptBuffer");
    this.eventQueue.push({ type: "event", data: { msg: t } }), i(this, Ee)[0] = 1;
  }
  interrupt() {
    this.inputQueue.reset(), this.emit({ type: "interrupt" });
  }
};
Ee = /* @__PURE__ */ new WeakMap(), It = /* @__PURE__ */ new WeakSet(), ps = function(t) {
  b ? (t.on("message", (s) => {
    i(this, Ve).call(this, t, s);
  }), t.on("error", (s) => {
    console.error(s), this.reject(new O("An error occurred initialising the webR SharedBufferChannel worker."));
  })) : (t.onmessage = (s) => i(this, Ve).call(this, t, s.data), t.onerror = (s) => {
    console.error(s), this.reject(new O("An error occurred initialising the webR SharedBufferChannel worker."));
  });
}, Ve = /* @__PURE__ */ new WeakMap();
b && (globalThis.Worker = te("worker_threads").Worker);
var ve;
var Ut;
var ds;
var He;
var Je = class extends xe {
  constructor(t) {
    super();
    p(this, Ut);
    this.close = () => {
    };
    this.emit = () => {
    };
    p(this, ve);
    p(this, He, async (t2, s2) => {
      if (!(!s2 || !s2.type)) switch (s2.type) {
        case "resolve":
          this.resolve();
          return;
        case "response":
          this.resolveResponse(s2);
          return;
        case "system":
          this.systemQueue.put(s2.data);
          return;
        default:
          this.outputQueue.put(s2);
          return;
        case "request": {
          let n = s2, o = n.data.msg;
          switch (o.type) {
            case "read": {
              let a = await this.inputQueue.get();
              if (i(this, ve)) {
                let l = ls(n.data.uuid, a);
                i(this, ve).postMessage(l);
              }
              break;
            }
            default:
              throw new D(`Unsupported request type '${o.type}'.`);
          }
          return;
        }
        case "sync-request":
          throw new D("Can't send messages of type 'sync-request' in PostMessage mode. Use 'request' instead.");
      }
    });
    ({ resolve: this.resolve, reject: this.reject, promise: this.initialised } = ae());
    let s = (n) => {
      m(this, ve, n), M(this, Ut, ds).call(this, n), this.close = () => {
        n.terminate(), this.putClosedMessage();
      };
      let o = { type: "init", data: { config: t, channelType: H.PostMessage } };
      n.postMessage(o);
    };
    if (Rt(t.baseUrl)) me(`${t.baseUrl}webr-worker.js`, (n) => s(n), (n) => {
      this.reject(new O(`Worker loading error: ${n.message}`));
    });
    else {
      let n = new Worker(`${t.baseUrl}webr-worker.js`);
      s(n);
    }
  }
  interrupt() {
    console.error("Interrupting R execution is not available when using the PostMessage channel");
  }
};
ve = /* @__PURE__ */ new WeakMap(), Ut = /* @__PURE__ */ new WeakSet(), ds = function(t) {
  b ? (t.on("message", (s) => {
    i(this, He).call(this, t, s);
  }), t.on("error", (s) => {
    console.error(s), this.reject(new O("An error occurred initialising the webR PostMessageChannel worker."));
  })) : (t.onmessage = (s) => i(this, He).call(this, t, s.data), t.onerror = (s) => {
    console.error(s), this.reject(new O("An error occurred initialising the webR PostMessageChannel worker."));
  });
}, He = /* @__PURE__ */ new WeakMap();
var H = { Automatic: 0, SharedArrayBuffer: 1, PostMessage: 3 };
function hs(r5) {
  switch (r5.channelType) {
    case H.SharedArrayBuffer:
      return new qe(r5);
    case H.PostMessage:
      return new Je(r5);
    case H.Automatic:
    default:
      return typeof SharedArrayBuffer < "u" ? new qe(r5) : new Je(r5);
  }
}
var ys = b ? __dirname + "/" : "https://webr.r-wasm.org/v0.5.6/";
var fs = "https://repo.r-wasm.org";
var wr = "0.5.6";
var xr = "4.5.1";
function E(r5) {
  return !!r5 && (typeof r5 == "object" || typeof r5 == "function") && "payloadType" in r5 && Ot(r5._payload);
}
function bi(r5) {
  return E(r5) && r5._payload.obj.type === "null";
}
function wi(r5) {
  return E(r5) && r5._payload.obj.type === "symbol";
}
function xi(r5) {
  return E(r5) && r5._payload.obj.type === "pairlist";
}
function Ei(r5) {
  return E(r5) && r5._payload.obj.type === "environment";
}
function vi(r5) {
  return E(r5) && r5._payload.obj.type === "logical";
}
function Pi(r5) {
  return E(r5) && r5._payload.obj.type === "integer";
}
function Ti(r5) {
  return E(r5) && r5._payload.obj.type === "double";
}
function Si(r5) {
  return E(r5) && r5._payload.obj.type === "complex";
}
function _i(r5) {
  return E(r5) && r5._payload.obj.type === "character";
}
function ki(r5) {
  return E(r5) && r5._payload.obj.type === "list";
}
function Mi(r5) {
  return E(r5) && r5._payload.obj.type === "raw";
}
function Wi(r5) {
  return E(r5) && r5._payload.obj.type === "call";
}
function ms(r5) {
  var e;
  return !!(E(r5) && ((e = r5._payload.obj.methods) != null && e.includes("exec")));
}
function Tn() {
}
function Sn(r5, e) {
  return async function* () {
    let t = { type: "callRObjectMethod", data: { payload: e._payload, prop: "getPropertyValue", args: [{ payloadType: "raw", obj: "length" }], shelter: void 0 } }, s = await r5.request(t);
    if (typeof s.obj != "number") throw new A("Cannot iterate over object, unexpected type for length property.");
    for (let n = 1; n <= s.obj; n++) yield e.get(n);
  };
}
function Rs(r5, e, t) {
  return async (...s) => {
    let n = s.map((l) => E(l) ? l._payload : { obj: B(l, E, (u) => u._payload), payloadType: "raw" }), o = { type: "callRObjectMethod", data: { payload: t, prop: e, args: n } }, a = await r5.request(o);
    switch (a.payloadType) {
      case "ptr":
        return ee(r5, a);
      case "raw":
        return B(a, Ot, (u, v) => ee(v, u), r5).obj;
    }
  };
}
async function _n(r5, e, t, ...s) {
  let n = { type: "newRObject", data: { objType: e, args: B(s, E, (a) => a._payload), shelter: t } }, o = await r5.request(n);
  switch (o.payloadType) {
    case "raw":
      throw new X("Unexpected raw payload type returned from newRObject");
    case "ptr":
      return ee(r5, o);
  }
}
function ee(r5, e) {
  var s;
  let t = new Proxy((s = e.obj.methods) != null && s.includes("exec") ? Object.assign(Tn, { ...e }) : e, { get: (n, o) => {
    var a;
    if (o === "_payload") return e;
    if (o === Symbol.asyncIterator) return Sn(r5, t);
    if ((a = e.obj.methods) != null && a.includes(o.toString())) return Rs(r5, o.toString(), e);
  }, apply: async (n, o, a) => {
    let l = await ee(r5, e).exec(...a);
    return ms(l) ? l : l.toJs();
  } });
  return t;
}
function W(r5, e, t) {
  return new Proxy(h, { construct: (s, n) => _n(r5, t, e, ...n), get: (s, n) => Rs(r5, n.toString()) });
}
var ze;
var Ge;
var $e;
var Xe;
var Ke;
var Nt;
var jt;
var Bt;
var Lt;
var Ft;
var qt;
var gs;
var Er = class {
  constructor(e = {}, t = { REnv: { R_HOME: "/usr/lib/R", FONTCONFIG_PATH: "/etc/fonts", R_ENABLE_JIT: "0" } }) {
    p(this, qt);
    p(this, ze);
    p(this, Ge);
    p(this, $e);
    p(this, Xe);
    p(this, Ke);
    p(this, Nt, (e2) => {
      console.log(e2);
    });
    p(this, jt, (e2) => {
      console.error(e2);
    });
    p(this, Bt, (e2) => {
      let t2 = prompt(e2);
      t2 && this.stdin(`${t2}
`);
    });
    p(this, Lt, (e2) => {
      if (b) throw new Error("Plotting with HTML canvas is not yet supported under Node");
      this.canvas.getContext("2d").drawImage(e2, 0, 0);
    });
    p(this, Ft, () => {
      if (b) throw new Error("Plotting with HTML canvas is not yet supported under Node");
      this.canvas.getContext("2d").clearRect(0, 0, this.canvas.width, this.canvas.height);
    });
    this.webR = new Vt(t), b || (this.canvas = document.createElement("canvas"), this.canvas.setAttribute("width", "1008"), this.canvas.setAttribute("height", "1008")), m(this, ze, e.stdout || i(this, Nt)), m(this, Ge, e.stderr || i(this, jt)), m(this, $e, e.prompt || i(this, Bt)), m(this, Xe, e.canvasImage || i(this, Lt)), m(this, Ke, e.canvasNewPage || i(this, Ft)), this.webR.evalRVoid("options(device=webr::canvas)");
  }
  stdin(e) {
    this.webR.writeConsole(e);
  }
  interrupt() {
    this.webR.interrupt();
  }
  run() {
    M(this, qt, gs).call(this);
  }
};
ze = /* @__PURE__ */ new WeakMap(), Ge = /* @__PURE__ */ new WeakMap(), $e = /* @__PURE__ */ new WeakMap(), Xe = /* @__PURE__ */ new WeakMap(), Ke = /* @__PURE__ */ new WeakMap(), Nt = /* @__PURE__ */ new WeakMap(), jt = /* @__PURE__ */ new WeakMap(), Bt = /* @__PURE__ */ new WeakMap(), Lt = /* @__PURE__ */ new WeakMap(), Ft = /* @__PURE__ */ new WeakMap(), qt = /* @__PURE__ */ new WeakSet(), gs = async function() {
  for (; ; ) {
    let e = await this.webR.read();
    switch (e.type) {
      case "stdout":
        i(this, ze).call(this, e.data);
        break;
      case "stderr":
        i(this, Ge).call(this, e.data);
        break;
      case "prompt":
        i(this, $e).call(this, e.data);
        break;
      case "canvas":
        e.data.event === "canvasImage" ? i(this, Xe).call(this, e.data.image) : e.data.event === "canvasNewPage" && i(this, Ke).call(this);
        break;
      case "closed":
        return;
      default:
        console.warn(`Unhandled output type for webR Console: ${e.type}.`);
    }
  }
};
var kn = { FONTCONFIG_PATH: "/etc/fonts", R_HOME: "/usr/lib/R", R_ENABLE_JIT: "0", ALL_PROXY: "socks5h://localhost:8580", WEBR: "1", WEBR_VERSION: wr, R_VERSION: xr };
var bs = { RArgs: [], REnv: kn, baseUrl: ys, serviceWorkerUrl: "", repoUrl: fs, homedir: "/home/web_user", interactive: true, channelType: H.Automatic, createLazyFilesystem: true };
var y;
var ue;
var pe;
var Qe;
var Ht;
var ws;
var Vt = class {
  constructor(e = {}) {
    p(this, Ht);
    p(this, y);
    p(this, ue);
    p(this, pe);
    p(this, Qe);
    this.version = wr;
    this.versionR = xr;
    this.FS = { analyzePath: async (e2, t2) => {
      let s = { type: "analyzePath", data: { path: e2, dontResolveLastLink: t2 } };
      return (await i(this, y).request(s)).obj;
    }, lookupPath: async (e2) => {
      let t2 = { type: "lookupPath", data: { path: e2 } };
      return (await i(this, y).request(t2)).obj;
    }, mkdir: async (e2) => {
      let t2 = { type: "mkdir", data: { path: e2 } };
      return (await i(this, y).request(t2)).obj;
    }, mount: async (e2, t2, s) => {
      let n = [];
      "blobs" in t2 && t2.blobs && (n = [...n, ...t2.blobs.map((a) => a.data instanceof Blob ? a.data.arrayBuffer().then((l) => {
        a.data = new Uint8Array(l);
      }) : Promise.resolve())]), "packages" in t2 && t2.packages && (n = [...n, ...t2.packages.map((a) => a.blob instanceof Blob ? a.blob.arrayBuffer().then((l) => {
        a.blob = new Uint8Array(l);
      }) : Promise.resolve())]), await Promise.all(n);
      let o = { type: "mount", data: { type: e2, options: t2, mountpoint: s } };
      await i(this, y).request(o);
    }, syncfs: async (e2) => {
      let t2 = { type: "syncfs", data: { populate: e2 } };
      await i(this, y).request(t2);
    }, readFile: async (e2, t2) => {
      let s = { type: "readFile", data: { path: e2, flags: t2 } };
      return (await i(this, y).request(s)).obj;
    }, rename: async (e2, t2) => {
      let s = { type: "rename", data: { oldpath: e2, newpath: t2 } };
      await i(this, y).request(s);
    }, rmdir: async (e2) => {
      let t2 = { type: "rmdir", data: { path: e2 } };
      await i(this, y).request(t2);
    }, writeFile: async (e2, t2, s) => {
      let n = { type: "writeFile", data: { path: e2, data: t2, flags: s } };
      await i(this, y).request(n);
    }, unlink: async (e2) => {
      let t2 = { type: "unlink", data: { path: e2 } };
      await i(this, y).request(t2);
    }, unmount: async (e2) => {
      let t2 = { type: "unmount", data: { path: e2 } };
      await i(this, y).request(t2);
    } };
    let t = { ...bs, ...e, REnv: { ...bs.REnv, ...e.REnv } };
    m(this, y, hs(t)), m(this, ue, new Dt(i(this, y))), m(this, pe, new Ct(i(this, y))), this.objs = {}, this.Shelter = Mn(i(this, y)), m(this, Qe, i(this, y).initialised.then(async () => {
      this.globalShelter = await new this.Shelter(), this.RObject = this.globalShelter.RObject, this.RLogical = this.globalShelter.RLogical, this.RInteger = this.globalShelter.RInteger, this.RDouble = this.globalShelter.RDouble, this.RComplex = this.globalShelter.RComplex, this.RCharacter = this.globalShelter.RCharacter, this.RRaw = this.globalShelter.RRaw, this.RList = this.globalShelter.RList, this.RDataFrame = this.globalShelter.RDataFrame, this.RPairlist = this.globalShelter.RPairlist, this.REnvironment = this.globalShelter.REnvironment, this.RSymbol = this.globalShelter.RSymbol, this.RString = this.globalShelter.RString, this.RCall = this.globalShelter.RCall, this.objs = { baseEnv: await this.RObject.getPersistentObject("baseEnv"), globalEnv: await this.RObject.getPersistentObject("globalEnv"), null: await this.RObject.getPersistentObject("null"), true: await this.RObject.getPersistentObject("true"), false: await this.RObject.getPersistentObject("false"), na: await this.RObject.getPersistentObject("na") }, M(this, Ht, ws).call(this);
    }));
  }
  async init() {
    return i(this, Qe);
  }
  close() {
    i(this, y).close();
  }
  async read() {
    return await i(this, y).read();
  }
  async *stream() {
    for (; ; ) {
      let e = await i(this, y).read();
      if (e.type === "closed") return;
      yield e;
    }
  }
  async flush() {
    return await i(this, y).flush();
  }
  write(e) {
    i(this, y).write(e);
  }
  writeConsole(e) {
    this.write({ type: "stdin", data: e + `
` });
  }
  interrupt() {
    i(this, y).interrupt();
  }
  async installPackages(e, t) {
    let s = Object.assign({ quiet: false, mount: true }, t), n = { type: "installPackages", data: { name: e, options: s } };
    await i(this, y).request(n);
  }
  async destroy(e) {
    await this.globalShelter.destroy(e);
  }
  async evalR(e, t) {
    return this.globalShelter.evalR(e, t);
  }
  async evalRVoid(e, t) {
    return this.evalRRaw(e, "void", t);
  }
  async evalRBoolean(e, t) {
    return this.evalRRaw(e, "boolean", t);
  }
  async evalRNumber(e, t) {
    return this.evalRRaw(e, "number", t);
  }
  async evalRString(e, t) {
    return this.evalRRaw(e, "string", t);
  }
  async evalRRaw(e, t, s = {}) {
    let n = B(s, E, (l) => l._payload), o = { type: "evalRRaw", data: { code: e, options: n, outputType: t } }, a = await i(this, y).request(o);
    switch (a.payloadType) {
      case "raw":
        return a.obj;
      case "ptr":
        throw new X("Unexpected ptr payload type returned from evalRVoid");
    }
  }
  async invokeWasmFunction(e, ...t) {
    let s = { type: "invokeWasmFunction", data: { ptr: e, args: t } };
    return (await i(this, y).request(s)).obj;
  }
};
y = /* @__PURE__ */ new WeakMap(), ue = /* @__PURE__ */ new WeakMap(), pe = /* @__PURE__ */ new WeakMap(), Qe = /* @__PURE__ */ new WeakMap(), Ht = /* @__PURE__ */ new WeakSet(), ws = async function() {
  for (; ; ) {
    let e = await i(this, y).readSystem();
    switch (e.type) {
      case "setTimeoutWasm":
        setTimeout((t, s) => {
          this.invokeWasmFunction(t, ...s);
        }, e.data.delay, e.data.ptr, e.data.args);
        break;
      case "proxyWebSocket": {
        let t = e;
        i(this, ue).new(t.data.uuid, t.data.url, t.data.protocol);
        break;
      }
      case "sendWebSocket": {
        let t = e;
        i(this, ue).send(t.data.uuid, t.data.data);
        break;
      }
      case "closeWebSocket": {
        let t = e;
        i(this, ue).close(t.data.uuid, t.data.code, t.data.reason);
        break;
      }
      case "proxyWorker": {
        let t = e;
        i(this, pe).new(t.data.uuid, t.data.url, t.data.options);
        break;
      }
      case "postMessageWorker": {
        let t = e;
        i(this, pe).postMessage(t);
        break;
      }
      case "terminateWorker": {
        let t = e;
        i(this, pe).terminate(t.data.uuid);
        break;
      }
      case "console.log":
        console.log(e.data);
        break;
      case "console.warn":
        console.warn(e.data);
        break;
      case "console.error":
        console.error(e.data);
        break;
      case "close":
        i(this, y).close();
        break;
      default:
        throw new A("Unknown system message type `" + e.type + "`");
    }
  }
};
var g;
var f;
var Ye;
var Jt = class {
  constructor(e) {
    p(this, g, "");
    p(this, f);
    p(this, Ye, false);
    m(this, f, e);
  }
  async init() {
    if (i(this, Ye)) return;
    let e = { type: "newShelter" }, t = await i(this, f).request(e);
    m(this, g, t.obj), this.RObject = W(i(this, f), i(this, g), "object"), this.RLogical = W(i(this, f), i(this, g), "logical"), this.RInteger = W(i(this, f), i(this, g), "integer"), this.RDouble = W(i(this, f), i(this, g), "double"), this.RComplex = W(i(this, f), i(this, g), "complex"), this.RCharacter = W(i(this, f), i(this, g), "character"), this.RRaw = W(i(this, f), i(this, g), "raw"), this.RList = W(i(this, f), i(this, g), "list"), this.RDataFrame = W(i(this, f), i(this, g), "dataframe"), this.RPairlist = W(i(this, f), i(this, g), "pairlist"), this.REnvironment = W(i(this, f), i(this, g), "environment"), this.RSymbol = W(i(this, f), i(this, g), "symbol"), this.RString = W(i(this, f), i(this, g), "string"), this.RCall = W(i(this, f), i(this, g), "call"), m(this, Ye, true);
  }
  async purge() {
    let e = { type: "shelterPurge", data: i(this, g) };
    await i(this, f).request(e);
  }
  async destroy(e) {
    let t = { type: "shelterDestroy", data: { id: i(this, g), obj: e._payload } };
    await i(this, f).request(t);
  }
  async size() {
    let e = { type: "shelterSize", data: i(this, g) };
    return (await i(this, f).request(e)).obj;
  }
  async evalR(e, t = {}) {
    let s = B(t, E, (a) => a._payload), n = { type: "evalR", data: { code: e, options: s, shelter: i(this, g) } }, o = await i(this, f).request(n);
    switch (o.payloadType) {
      case "raw":
        throw new X("Unexpected payload type returned from evalR");
      default:
        return ee(i(this, f), o);
    }
  }
  async captureR(e, t = {}) {
    let s = B(t, E, (a) => a._payload), n = { type: "captureR", data: { code: e, options: s, shelter: i(this, g) } }, o = await i(this, f).request(n);
    switch (o.payloadType) {
      case "ptr":
        throw new X("Unexpected payload type returned from evalR");
      case "raw": {
        let a = o.obj, l = ee(i(this, f), a.result), u = a.output, v = a.images;
        for (let R = 0; R < u.length; ++R) u[R].type !== "stdout" && u[R].type !== "stderr" && (u[R].data = ee(i(this, f), u[R].data));
        return { result: l, output: u, images: v };
      }
    }
  }
};
g = /* @__PURE__ */ new WeakMap(), f = /* @__PURE__ */ new WeakMap(), Ye = /* @__PURE__ */ new WeakMap();
function Mn(r5) {
  return new Proxy(Jt, { construct: async () => {
    let e = new Jt(r5);
    return await e.init(), e;
  } });
}
export {
  H as ChannelType,
  Er as Console,
  Jt as Shelter,
  Vt as WebR,
  D as WebRChannelError,
  A as WebRError,
  X as WebRPayloadError,
  O as WebRWorkerError,
  Wi as isRCall,
  _i as isRCharacter,
  Si as isRComplex,
  Ti as isRDouble,
  Ei as isREnvironment,
  ms as isRFunction,
  Pi as isRInteger,
  ki as isRList,
  vi as isRLogical,
  bi as isRNull,
  E as isRObject,
  xi as isRPairlist,
  Mi as isRRaw,
  wi as isRSymbol,
  Wr as isShelterID
};
//# sourceMappingURL=webr.js.map
