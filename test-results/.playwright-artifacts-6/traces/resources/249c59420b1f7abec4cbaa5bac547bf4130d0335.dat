import { exec, parse_route_id } from "/node_modules/@sveltejs/kit/src/utils/routing.js?v=f8e19137";

/**
 * @param {import('./types.js').SvelteKitApp} app
 * @returns {import('types').CSRRoute[]}
 */
export function parse({ nodes, server_loads, dictionary, matchers }) {
	const layouts_with_server_load = new Set(server_loads);

	return Object.entries(dictionary).map(([id, [leaf, layouts, errors]]) => {
		const { pattern, params } = parse_route_id(id);

		/** @type {import('types').CSRRoute} */
		const route = {
			id,
			/** @param {string} path */
			exec: (path) => {
				const match = pattern.exec(path);
				if (match) return exec(match, params, matchers);
			},
			errors: [1, ...(errors || [])].map((n) => nodes[n]),
			layouts: [0, ...(layouts || [])].map(create_layout_loader),
			leaf: create_leaf_loader(leaf)
		};

		// bit of a hack, but ensures that layout/error node lists are the same
		// length, without which the wrong data will be applied if the route
		// manifest looks like `[[a, b], [c,], d]`
		route.errors.length = route.layouts.length = Math.max(
			route.errors.length,
			route.layouts.length
		);

		return route;
	});

	/**
	 * @param {number} id
	 * @returns {[boolean, import('types').CSRPageNodeLoader]}
	 */
	function create_leaf_loader(id) {
		// whether or not the route uses the server data is
		// encoded using the ones' complement, to save space
		const uses_server_data = id < 0;
		if (uses_server_data) id = ~id;
		return [uses_server_data, nodes[id]];
	}

	/**
	 * @param {number | undefined} id
	 * @returns {[boolean, import('types').CSRPageNodeLoader] | undefined}
	 */
	function create_layout_loader(id) {
		// whether or not the layout uses the server data is
		// encoded in the layouts array, to save space
		return id === undefined ? id : [layouts_with_server_load.has(id), nodes[id]];
	}
}

/**
 * @param {import('types').CSRRouteServer} input
 * @param {import('types').CSRPageNodeLoader[]} app_nodes Will be modified if a new node is loaded that's not already in the array
 * @returns {import('types').CSRRoute}
 */
export function parse_server_route({ nodes, id, leaf, layouts, errors }, app_nodes) {
	return {
		id,
		exec: () => ({}), // dummy function; exec already happened on the server
		// By writing to app_nodes only when a loader at that index is not already defined,
		// we ensure that loaders have referential equality when they load the same node.
		// Code elsewhere in client.js relies on this referential equality to determine
		// if a loader is different and should therefore (re-)run.
		errors: errors.map((n) => (n ? (app_nodes[n] ||= nodes[n]) : undefined)),
		layouts: layouts.map((n) => (n ? [n[0], (app_nodes[n[1]] ||= nodes[n[1]])] : undefined)),
		leaf: [leaf[0], (app_nodes[leaf[1]] ||= nodes[leaf[1]])]
	};
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlLmpzP3Y9ZjhlMTkxMzciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhlYywgcGFyc2Vfcm91dGVfaWQgfSBmcm9tIFwiL25vZGVfbW9kdWxlcy9Ac3ZlbHRlanMva2l0L3NyYy91dGlscy9yb3V0aW5nLmpzP3Y9ZjhlMTkxMzdcIjtcblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi90eXBlcy5qcycpLlN2ZWx0ZUtpdEFwcH0gYXBwXG4gKiBAcmV0dXJucyB7aW1wb3J0KCd0eXBlcycpLkNTUlJvdXRlW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZSh7IG5vZGVzLCBzZXJ2ZXJfbG9hZHMsIGRpY3Rpb25hcnksIG1hdGNoZXJzIH0pIHtcblx0Y29uc3QgbGF5b3V0c193aXRoX3NlcnZlcl9sb2FkID0gbmV3IFNldChzZXJ2ZXJfbG9hZHMpO1xuXG5cdHJldHVybiBPYmplY3QuZW50cmllcyhkaWN0aW9uYXJ5KS5tYXAoKFtpZCwgW2xlYWYsIGxheW91dHMsIGVycm9yc11dKSA9PiB7XG5cdFx0Y29uc3QgeyBwYXR0ZXJuLCBwYXJhbXMgfSA9IHBhcnNlX3JvdXRlX2lkKGlkKTtcblxuXHRcdC8qKiBAdHlwZSB7aW1wb3J0KCd0eXBlcycpLkNTUlJvdXRlfSAqL1xuXHRcdGNvbnN0IHJvdXRlID0ge1xuXHRcdFx0aWQsXG5cdFx0XHQvKiogQHBhcmFtIHtzdHJpbmd9IHBhdGggKi9cblx0XHRcdGV4ZWM6IChwYXRoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IG1hdGNoID0gcGF0dGVybi5leGVjKHBhdGgpO1xuXHRcdFx0XHRpZiAobWF0Y2gpIHJldHVybiBleGVjKG1hdGNoLCBwYXJhbXMsIG1hdGNoZXJzKTtcblx0XHRcdH0sXG5cdFx0XHRlcnJvcnM6IFsxLCAuLi4oZXJyb3JzIHx8IFtdKV0ubWFwKChuKSA9PiBub2Rlc1tuXSksXG5cdFx0XHRsYXlvdXRzOiBbMCwgLi4uKGxheW91dHMgfHwgW10pXS5tYXAoY3JlYXRlX2xheW91dF9sb2FkZXIpLFxuXHRcdFx0bGVhZjogY3JlYXRlX2xlYWZfbG9hZGVyKGxlYWYpXG5cdFx0fTtcblxuXHRcdC8vIGJpdCBvZiBhIGhhY2ssIGJ1dCBlbnN1cmVzIHRoYXQgbGF5b3V0L2Vycm9yIG5vZGUgbGlzdHMgYXJlIHRoZSBzYW1lXG5cdFx0Ly8gbGVuZ3RoLCB3aXRob3V0IHdoaWNoIHRoZSB3cm9uZyBkYXRhIHdpbGwgYmUgYXBwbGllZCBpZiB0aGUgcm91dGVcblx0XHQvLyBtYW5pZmVzdCBsb29rcyBsaWtlIGBbW2EsIGJdLCBbYyxdLCBkXWBcblx0XHRyb3V0ZS5lcnJvcnMubGVuZ3RoID0gcm91dGUubGF5b3V0cy5sZW5ndGggPSBNYXRoLm1heChcblx0XHRcdHJvdXRlLmVycm9ycy5sZW5ndGgsXG5cdFx0XHRyb3V0ZS5sYXlvdXRzLmxlbmd0aFxuXHRcdCk7XG5cblx0XHRyZXR1cm4gcm91dGU7XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaWRcblx0ICogQHJldHVybnMge1tib29sZWFuLCBpbXBvcnQoJ3R5cGVzJykuQ1NSUGFnZU5vZGVMb2FkZXJdfVxuXHQgKi9cblx0ZnVuY3Rpb24gY3JlYXRlX2xlYWZfbG9hZGVyKGlkKSB7XG5cdFx0Ly8gd2hldGhlciBvciBub3QgdGhlIHJvdXRlIHVzZXMgdGhlIHNlcnZlciBkYXRhIGlzXG5cdFx0Ly8gZW5jb2RlZCB1c2luZyB0aGUgb25lcycgY29tcGxlbWVudCwgdG8gc2F2ZSBzcGFjZVxuXHRcdGNvbnN0IHVzZXNfc2VydmVyX2RhdGEgPSBpZCA8IDA7XG5cdFx0aWYgKHVzZXNfc2VydmVyX2RhdGEpIGlkID0gfmlkO1xuXHRcdHJldHVybiBbdXNlc19zZXJ2ZXJfZGF0YSwgbm9kZXNbaWRdXTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge251bWJlciB8IHVuZGVmaW5lZH0gaWRcblx0ICogQHJldHVybnMge1tib29sZWFuLCBpbXBvcnQoJ3R5cGVzJykuQ1NSUGFnZU5vZGVMb2FkZXJdIHwgdW5kZWZpbmVkfVxuXHQgKi9cblx0ZnVuY3Rpb24gY3JlYXRlX2xheW91dF9sb2FkZXIoaWQpIHtcblx0XHQvLyB3aGV0aGVyIG9yIG5vdCB0aGUgbGF5b3V0IHVzZXMgdGhlIHNlcnZlciBkYXRhIGlzXG5cdFx0Ly8gZW5jb2RlZCBpbiB0aGUgbGF5b3V0cyBhcnJheSwgdG8gc2F2ZSBzcGFjZVxuXHRcdHJldHVybiBpZCA9PT0gdW5kZWZpbmVkID8gaWQgOiBbbGF5b3V0c193aXRoX3NlcnZlcl9sb2FkLmhhcyhpZCksIG5vZGVzW2lkXV07XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgndHlwZXMnKS5DU1JSb3V0ZVNlcnZlcn0gaW5wdXRcbiAqIEBwYXJhbSB7aW1wb3J0KCd0eXBlcycpLkNTUlBhZ2VOb2RlTG9hZGVyW119IGFwcF9ub2RlcyBXaWxsIGJlIG1vZGlmaWVkIGlmIGEgbmV3IG5vZGUgaXMgbG9hZGVkIHRoYXQncyBub3QgYWxyZWFkeSBpbiB0aGUgYXJyYXlcbiAqIEByZXR1cm5zIHtpbXBvcnQoJ3R5cGVzJykuQ1NSUm91dGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZV9zZXJ2ZXJfcm91dGUoeyBub2RlcywgaWQsIGxlYWYsIGxheW91dHMsIGVycm9ycyB9LCBhcHBfbm9kZXMpIHtcblx0cmV0dXJuIHtcblx0XHRpZCxcblx0XHRleGVjOiAoKSA9PiAoe30pLCAvLyBkdW1teSBmdW5jdGlvbjsgZXhlYyBhbHJlYWR5IGhhcHBlbmVkIG9uIHRoZSBzZXJ2ZXJcblx0XHQvLyBCeSB3cml0aW5nIHRvIGFwcF9ub2RlcyBvbmx5IHdoZW4gYSBsb2FkZXIgYXQgdGhhdCBpbmRleCBpcyBub3QgYWxyZWFkeSBkZWZpbmVkLFxuXHRcdC8vIHdlIGVuc3VyZSB0aGF0IGxvYWRlcnMgaGF2ZSByZWZlcmVudGlhbCBlcXVhbGl0eSB3aGVuIHRoZXkgbG9hZCB0aGUgc2FtZSBub2RlLlxuXHRcdC8vIENvZGUgZWxzZXdoZXJlIGluIGNsaWVudC5qcyByZWxpZXMgb24gdGhpcyByZWZlcmVudGlhbCBlcXVhbGl0eSB0byBkZXRlcm1pbmVcblx0XHQvLyBpZiBhIGxvYWRlciBpcyBkaWZmZXJlbnQgYW5kIHNob3VsZCB0aGVyZWZvcmUgKHJlLSlydW4uXG5cdFx0ZXJyb3JzOiBlcnJvcnMubWFwKChuKSA9PiAobiA/IChhcHBfbm9kZXNbbl0gfHw9IG5vZGVzW25dKSA6IHVuZGVmaW5lZCkpLFxuXHRcdGxheW91dHM6IGxheW91dHMubWFwKChuKSA9PiAobiA/IFtuWzBdLCAoYXBwX25vZGVzW25bMV1dIHx8PSBub2Rlc1tuWzFdXSldIDogdW5kZWZpbmVkKSksXG5cdFx0bGVhZjogW2xlYWZbMF0sIChhcHBfbm9kZXNbbGVhZlsxXV0gfHw9IG5vZGVzW2xlYWZbMV1dKV1cblx0fTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDOztBQUVsRyxDQUFDLENBQUM7QUFDRixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM5QyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztB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LENBQUMsQ0FBQztBQUMzQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQzdILENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRO0FBQ3JDLENBQUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNwRixDQUFDLE1BQU0sQ0FBQztBQUNSLENBQUMsQ0FBQyxFQUFFO0FBQ0osQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ3BFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU87QUFDcEYsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUk7QUFDbEYsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7QUFDeEUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHO0FBQzNELENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMxRixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6RCxDQUFDLENBQUM7QUFDRjsifQ==