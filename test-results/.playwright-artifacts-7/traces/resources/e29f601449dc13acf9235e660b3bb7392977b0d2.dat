import { DEV } from "/node_modules/.vite/deps/esm-env.js?v=f8e19137";
import { getContext } from "/node_modules/.vite/deps/svelte.js?v=f8e19137";

function context() {
	return getContext('__request__');
}

/** @param {string} name */
function context_dev(name) {
	try {
		return context();
	} catch {
		throw new Error(
			`Can only read '${name}' on the server during rendering (not in e.g. \`load\` functions), as it is bound to the current request via component context. This prevents state from leaking between users.` +
				'For more information, see https://svelte.dev/docs/kit/state-management#avoid-shared-state-on-the-server'
		);
	}
}

export const page = {
	get data() {
		return (DEV ? context_dev('page.data') : context()).page.data;
	},
	get error() {
		return (DEV ? context_dev('page.error') : context()).page.error;
	},
	get form() {
		return (DEV ? context_dev('page.form') : context()).page.form;
	},
	get params() {
		return (DEV ? context_dev('page.params') : context()).page.params;
	},
	get route() {
		return (DEV ? context_dev('page.route') : context()).page.route;
	},
	get state() {
		return (DEV ? context_dev('page.state') : context()).page.state;
	},
	get status() {
		return (DEV ? context_dev('page.status') : context()).page.status;
	},
	get url() {
		return (DEV ? context_dev('page.url') : context()).page.url;
	}
};

export const navigating = {
	from: null,
	to: null,
	type: null,
	willUnload: null,
	delta: null,
	complete: null
};

export const updated = {
	get current() {
		return false;
	},
	check: () => {
		throw new Error('Can only call updated.check() in the browser');
	}
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcz92PWY4ZTE5MTM3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERFViB9IGZyb20gXCIvbm9kZV9tb2R1bGVzLy52aXRlL2RlcHMvZXNtLWVudi5qcz92PWY4ZTE5MTM3XCI7XG5pbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSBcIi9ub2RlX21vZHVsZXMvLnZpdGUvZGVwcy9zdmVsdGUuanM/dj1mOGUxOTEzN1wiO1xuXG5mdW5jdGlvbiBjb250ZXh0KCkge1xuXHRyZXR1cm4gZ2V0Q29udGV4dCgnX19yZXF1ZXN0X18nKTtcbn1cblxuLyoqIEBwYXJhbSB7c3RyaW5nfSBuYW1lICovXG5mdW5jdGlvbiBjb250ZXh0X2RldihuYW1lKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGNvbnRleHQoKTtcblx0fSBjYXRjaCB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0YENhbiBvbmx5IHJlYWQgJyR7bmFtZX0nIG9uIHRoZSBzZXJ2ZXIgZHVyaW5nIHJlbmRlcmluZyAobm90IGluIGUuZy4gXFxgbG9hZFxcYCBmdW5jdGlvbnMpLCBhcyBpdCBpcyBib3VuZCB0byB0aGUgY3VycmVudCByZXF1ZXN0IHZpYSBjb21wb25lbnQgY29udGV4dC4gVGhpcyBwcmV2ZW50cyBzdGF0ZSBmcm9tIGxlYWtpbmcgYmV0d2VlbiB1c2Vycy5gICtcblx0XHRcdFx0J0ZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mva2l0L3N0YXRlLW1hbmFnZW1lbnQjYXZvaWQtc2hhcmVkLXN0YXRlLW9uLXRoZS1zZXJ2ZXInXG5cdFx0KTtcblx0fVxufVxuXG5leHBvcnQgY29uc3QgcGFnZSA9IHtcblx0Z2V0IGRhdGEoKSB7XG5cdFx0cmV0dXJuIChERVYgPyBjb250ZXh0X2RldigncGFnZS5kYXRhJykgOiBjb250ZXh0KCkpLnBhZ2UuZGF0YTtcblx0fSxcblx0Z2V0IGVycm9yKCkge1xuXHRcdHJldHVybiAoREVWID8gY29udGV4dF9kZXYoJ3BhZ2UuZXJyb3InKSA6IGNvbnRleHQoKSkucGFnZS5lcnJvcjtcblx0fSxcblx0Z2V0IGZvcm0oKSB7XG5cdFx0cmV0dXJuIChERVYgPyBjb250ZXh0X2RldigncGFnZS5mb3JtJykgOiBjb250ZXh0KCkpLnBhZ2UuZm9ybTtcblx0fSxcblx0Z2V0IHBhcmFtcygpIHtcblx0XHRyZXR1cm4gKERFViA/IGNvbnRleHRfZGV2KCdwYWdlLnBhcmFtcycpIDogY29udGV4dCgpKS5wYWdlLnBhcmFtcztcblx0fSxcblx0Z2V0IHJvdXRlKCkge1xuXHRcdHJldHVybiAoREVWID8gY29udGV4dF9kZXYoJ3BhZ2Uucm91dGUnKSA6IGNvbnRleHQoKSkucGFnZS5yb3V0ZTtcblx0fSxcblx0Z2V0IHN0YXRlKCkge1xuXHRcdHJldHVybiAoREVWID8gY29udGV4dF9kZXYoJ3BhZ2Uuc3RhdGUnKSA6IGNvbnRleHQoKSkucGFnZS5zdGF0ZTtcblx0fSxcblx0Z2V0IHN0YXR1cygpIHtcblx0XHRyZXR1cm4gKERFViA/IGNvbnRleHRfZGV2KCdwYWdlLnN0YXR1cycpIDogY29udGV4dCgpKS5wYWdlLnN0YXR1cztcblx0fSxcblx0Z2V0IHVybCgpIHtcblx0XHRyZXR1cm4gKERFViA/IGNvbnRleHRfZGV2KCdwYWdlLnVybCcpIDogY29udGV4dCgpKS5wYWdlLnVybDtcblx0fVxufTtcblxuZXhwb3J0IGNvbnN0IG5hdmlnYXRpbmcgPSB7XG5cdGZyb206IG51bGwsXG5cdHRvOiBudWxsLFxuXHR0eXBlOiBudWxsLFxuXHR3aWxsVW5sb2FkOiBudWxsLFxuXHRkZWx0YTogbnVsbCxcblx0Y29tcGxldGU6IG51bGxcbn07XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVkID0ge1xuXHRnZXQgY3VycmVudCgpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cdGNoZWNrOiAoKSA9PiB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdDYW4gb25seSBjYWxsIHVwZGF0ZWQuY2hlY2soKSBpbiB0aGUgYnJvd3NlcicpO1xuXHR9XG59O1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUNwRSxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQzs7QUFFMUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDbkIsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDakM7O0FBRUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFCLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0IsQ0FBQyxHQUFHLENBQUM7QUFDTCxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2xCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUNULENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUs7QUFDakIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzNNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTTtBQUM1RyxDQUFDLENBQUMsQ0FBQztBQUNILENBQUM7QUFDRDs7QUFFQSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDcEIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNaLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUk7QUFDL0QsQ0FBQyxDQUFDO0FBQ0YsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNiLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUs7QUFDakUsQ0FBQyxDQUFDO0FBQ0YsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNaLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUk7QUFDL0QsQ0FBQyxDQUFDO0FBQ0YsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNkLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU07QUFDbkUsQ0FBQyxDQUFDO0FBQ0YsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNiLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUs7QUFDakUsQ0FBQyxDQUFDO0FBQ0YsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNiLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUs7QUFDakUsQ0FBQyxDQUFDO0FBQ0YsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNkLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU07QUFDbkUsQ0FBQyxDQUFDO0FBQ0YsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNYLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUc7QUFDN0QsQ0FBQztBQUNELENBQUM7O0FBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQzFCLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSTtBQUNYLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSTtBQUNULENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSTtBQUNYLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSTtBQUNqQixDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUk7QUFDWixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ1gsQ0FBQzs7QUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDdkIsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNmLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSztBQUNkLENBQUMsQ0FBQztBQUNGLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDZCxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pFLENBQUM7QUFDRCxDQUFDOyJ9