[
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "heading",
          "depth": 1,
          "children": [
            {
              "type": "text",
              "value": "Codyx API Reference"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Welcome to the "
            },
            {
              "type": "strong",
              "children": [
                {
                  "type": "text",
                  "value": "Codyx API Reference"
                }
              ]
            },
            {
              "type": "text",
              "value": "! This comprehensive documentation covers all the classes, methods, and interfaces that power Codyx's interactive computing environment."
            }
          ]
        },
        {
          "type": "heading",
          "depth": 2,
          "children": [
            {
              "type": "text",
              "value": "About Codyx"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "strong",
              "children": [
                {
                  "type": "text",
                  "value": "Codyx"
                }
              ]
            },
            {
              "type": "text",
              "value": " is a browser-based collaborative notebook platform that lets you execute Python and R code seamlessly, interleaved with markdown documentation. Built with modern web technologies, it brings the power of data science to your browser with no installation required."
            }
          ]
        },
        {
          "type": "heading",
          "depth": 3,
          "children": [
            {
              "type": "text",
              "value": "Key Features"
            }
          ]
        },
        {
          "type": "list",
          "ordered": false,
          "start": null,
          "spread": false,
          "children": [
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "text",
                          "value": "üêç Python Support"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " - Full Pyodide integration with popular data science libraries"
                    }
                  ]
                }
              ]
            },
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "text",
                          "value": "üìä R Integration"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " - Complete WebR environment with statistical computing capabilities"
                    }
                  ]
                }
              ]
            },
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "text",
                          "value": "üìù Rich Documentation"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " - Enhanced markdown with live preview and editing"
                    }
                  ]
                }
              ]
            },
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "text",
                          "value": "üîÑ Real-time Collaboration"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " - Multiple users can edit simultaneously"
                    }
                  ]
                }
              ]
            },
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "text",
                          "value": "üåê Browser-native"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " - Runs entirely in your browser, no server required"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "depth": 2,
          "children": [
            {
              "type": "text",
              "value": "üèóÔ∏è Architecture Overview"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Codyx follows a clean "
            },
            {
              "type": "strong",
              "children": [
                {
                  "type": "text",
                  "value": "Model-View-Controller (MVC)"
                }
              ]
            },
            {
              "type": "text",
              "value": " architecture:"
            }
          ]
        },
        {
          "type": "list",
          "ordered": false,
          "start": null,
          "spread": false,
          "children": [
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "text",
                          "value": "üìã Controllers"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " - Handle business logic, execution, and state management"
                    }
                  ]
                }
              ]
            },
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "text",
                          "value": "üé® Components"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " - Manage UI rendering and user interactions"
                    }
                  ]
                }
              ]
            },
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "text",
                          "value": "‚öôÔ∏è Services"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " - Provide external integrations (Python/R runtimes)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "text",
                          "value": "üõ†Ô∏è Utilities"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " - Support text processing and data management"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "depth": 2,
          "children": [
            {
              "type": "text",
              "value": "üìö Documentation Sections"
            }
          ]
        },
        {
          "type": "heading",
          "depth": 3,
          "children": [
            {
              "type": "text",
              "value": "Controllers (Business Logic)"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "The heart of Codyx's notebook functionality, managing code execution, variable tracking, and cell lifecycle."
            }
          ]
        },
        {
          "type": "heading",
          "depth": 3,
          "children": [
            {
              "type": "text",
              "value": "Core Infrastructure"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Essential classes that orchestrate notebook operations, persistence, and collaboration features."
            }
          ]
        },
        {
          "type": "heading",
          "depth": 3,
          "children": [
            {
              "type": "text",
              "value": "Runtime Services"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Integrations with Pyodide (Python) and WebR (R) that bring computational power to the browser."
            }
          ]
        },
        {
          "type": "heading",
          "depth": 3,
          "children": [
            {
              "type": "text",
              "value": "Utilities"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Helper classes for text processing, variable highlighting, and data management."
            }
          ]
        },
        {
          "type": "heading",
          "depth": 3,
          "children": [
            {
              "type": "text",
              "value": "UI Components"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Svelte 5 components that provide the interactive user interface with reactive state management."
            }
          ]
        },
        {
          "type": "heading",
          "depth": 2,
          "children": [
            {
              "type": "text",
              "value": "üéØ Quick Navigation Tips"
            }
          ]
        },
        {
          "type": "list",
          "ordered": false,
          "start": null,
          "spread": false,
          "children": [
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "text",
                          "value": "Search"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " - Use the search box to quickly find classes or methods"
                    }
                  ]
                }
              ]
            },
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "text",
                          "value": "Navigation"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " - Click on class names in the sidebar for instant access"
                    }
                  ]
                }
              ]
            },
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "text",
                          "value": "Examples"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " - Most methods include practical code examples"
                    }
                  ]
                }
              ]
            },
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "text",
                          "value": "Types"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " - Comprehensive parameter and return type information"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "depth": 2,
          "children": [
            {
              "type": "text",
              "value": "üîó Related Resources"
            }
          ]
        },
        {
          "type": "list",
          "ordered": false,
          "start": null,
          "spread": false,
          "children": [
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://github.com/ejkreboot/codyx",
                          "children": [
                            {
                              "type": "text",
                              "value": "Project Repository"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " - Source code and contributions"
                    }
                  ]
                }
              ]
            },
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "link",
                          "title": null,
                          "url": "../../../README.md",
                          "children": [
                            {
                              "type": "text",
                              "value": "User Documentation"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " - Getting started guides and tutorials"
                    }
                  ]
                }
              ]
            },
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "strong",
                      "children": [
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://codyx.dev",
                          "children": [
                            {
                              "type": "text",
                              "value": "Live Demo"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " - Try Codyx in your browser"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "thematicBreak"
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "emphasis",
              "children": [
                {
                  "type": "text",
                  "value": "This documentation is auto-generated from JSDoc comments in the source code using DocumentationJS."
                }
              ]
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "fileoverview",
        "description": "Codyx - Interactive Computing Platform",
        "lineNumber": 1
      },
      {
        "title": "version",
        "description": "1.0.0",
        "lineNumber": 2
      },
      {
        "title": "author",
        "description": "Codyx Team",
        "lineNumber": 3
      },
      {
        "title": "description",
        "description": "# Codyx API Reference\n\nWelcome to the **Codyx API Reference**! This comprehensive documentation covers all the classes, methods, and interfaces that power Codyx's interactive computing environment.\n\n## About Codyx\n\n**Codyx** is a browser-based collaborative notebook platform that lets you execute Python and R code seamlessly, interleaved with markdown documentation. Built with modern web technologies, it brings the power of data science to your browser with no installation required.\n\n### Key Features\n\n- **üêç Python Support** - Full Pyodide integration with popular data science libraries\n- **üìä R Integration** - Complete WebR environment with statistical computing capabilities  \n- **üìù Rich Documentation** - Enhanced markdown with live preview and editing\n- **üîÑ Real-time Collaboration** - Multiple users can edit simultaneously\n- **üåê Browser-native** - Runs entirely in your browser, no server required\n\n## üèóÔ∏è Architecture Overview\n\nCodyx follows a clean **Model-View-Controller (MVC)** architecture:\n\n- **üìã Controllers** - Handle business logic, execution, and state management  \n- **üé® Components** - Manage UI rendering and user interactions\n- **‚öôÔ∏è Services** - Provide external integrations (Python/R runtimes)\n- **üõ†Ô∏è Utilities** - Support text processing and data management\n\n## üìö Documentation Sections\n\n### Controllers (Business Logic)\nThe heart of Codyx's notebook functionality, managing code execution, variable tracking, and cell lifecycle.\n\n### Core Infrastructure  \nEssential classes that orchestrate notebook operations, persistence, and collaboration features.\n\n### Runtime Services\nIntegrations with Pyodide (Python) and WebR (R) that bring computational power to the browser.\n\n### Utilities\nHelper classes for text processing, variable highlighting, and data management.\n\n### UI Components\nSvelte 5 components that provide the interactive user interface with reactive state management.\n\n## üéØ Quick Navigation Tips\n\n- **Search** - Use the search box to quickly find classes or methods\n- **Navigation** - Click on class names in the sidebar for instant access  \n- **Examples** - Most methods include practical code examples\n- **Types** - Comprehensive parameter and return type information\n\n## üîó Related Resources\n\n- **[Project Repository](https://github.com/ejkreboot/codyx)** - Source code and contributions\n- **[User Documentation](../../../README.md)** - Getting started guides and tutorials  \n- **[Live Demo](https://codyx.dev)** - Try Codyx in your browser\n\n---\n\n*This documentation is auto-generated from JSDoc comments in the source code using DocumentationJS.*",
        "lineNumber": 4
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 65,
        "column": 3,
        "index": 2901
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 1,
          "column": 0,
          "index": 0
        },
        "end": {
          "line": 70,
          "column": 3,
          "index": 3059
        }
      },
      "file": "/Users/erikor/codyx/src/app-docs.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "file",
    "version": "1.0.0",
    "author": "Codyx Team",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [],
    "namespace": ""
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "The main Codyx application namespace containing all core functionality for interactive computing in the browser."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "namespace",
        "description": null,
        "lineNumber": 1,
        "type": null,
        "name": "Codyx"
      },
      {
        "title": "description",
        "description": "The main Codyx application namespace containing all core functionality for interactive computing in the browser.",
        "lineNumber": 2
      }
    ],
    "loc": {
      "start": {
        "line": 67,
        "column": 0,
        "index": 2903
      },
      "end": {
        "line": 70,
        "column": 3,
        "index": 3059
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 1,
          "column": 0,
          "index": 0
        },
        "end": {
          "line": 70,
          "column": 3,
          "index": 3059
        }
      },
      "file": "/Users/erikor/codyx/src/app-docs.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "namespace",
    "name": "Codyx",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "Codyx",
        "kind": "namespace"
      }
    ],
    "namespace": "Codyx"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Abstract base class for cell controllers\nDefines the interface and common functionality for all cell types"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Note: Despite the historical \"Renderer\" naming, these classes handle\nbusiness logic and state management, not UI rendering.\nUI rendering is handled by the corresponding Svelte components."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 8,
        "type": null,
        "name": "CellController"
      },
      {
        "title": "abstract",
        "description": null,
        "lineNumber": 9
      },
      {
        "title": "example",
        "description": "// CellController is abstract - extend it to create specific cell types\nclass MyCustomController extends CellController {\n  constructor(cellId, cellIndex, initialText) {\n    super(cellId, cellIndex, initialText, 'custom');\n  }\n  \n  async execute() {\n    return { output: 'Custom execution result' };\n  }\n  \n  render() {\n    return { component: MyCustomRenderer, props: {} };\n  }\n}",
        "lineNumber": 10
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 26,
        "column": 3,
        "index": 798
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 27,
          "column": 0,
          "index": 799
        },
        "end": {
          "line": 247,
          "column": 1,
          "index": 7053
        }
      },
      "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
    },
    "augments": [],
    "examples": [
      {
        "description": "// CellController is abstract - extend it to create specific cell types\nclass MyCustomController extends CellController {\n  constructor(cellId, cellIndex, initialText) {\n    super(cellId, cellIndex, initialText, 'custom');\n  }\n  \n  async execute() {\n    return { output: 'Custom execution result' };\n  }\n  \n  render() {\n    return { component: MyCustomRenderer, props: {} };\n  }\n}"
      }
    ],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "CellController",
    "abstract": true,
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Create a new cell controller"
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "param",
          "description": "Unique identifier for the cell",
          "lineNumber": 2,
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "name": "cellId"
        },
        {
          "title": "param",
          "description": "Position index of the cell in the notebook",
          "lineNumber": 3,
          "type": {
            "type": "NameExpression",
            "name": "number"
          },
          "name": "cellIndex"
        },
        {
          "title": "param",
          "description": "Initial text content of the cell",
          "lineNumber": 4,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "string"
            }
          },
          "name": "initialText",
          "default": "''"
        },
        {
          "title": "param",
          "description": "Type identifier for the cell (python, markdown, r, etc.)",
          "lineNumber": 5,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "string"
            }
          },
          "name": "type",
          "default": "'unknown'"
        },
        {
          "title": "throws",
          "description": "When trying to instantiate abstract CellController directly",
          "lineNumber": 6,
          "type": {
            "type": "NameExpression",
            "name": "Error"
          }
        }
      ],
      "loc": {
        "start": {
          "line": 28,
          "column": 4,
          "index": 833
        },
        "end": {
          "line": 35,
          "column": 7,
          "index": 1278
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 36,
            "column": 4,
            "index": 1283
          },
          "end": {
            "line": 50,
            "column": 5,
            "index": 1830
          }
        },
        "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js",
        "sortKey": "!/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js 00000036",
        "code": "{\n    /**\n     * Create a new cell controller\n     * @param {string} cellId - Unique identifier for the cell\n     * @param {number} cellIndex - Position index of the cell in the notebook\n     * @param {string} [initialText=''] - Initial text content of the cell\n     * @param {string} [type='unknown'] - Type identifier for the cell (python, markdown, r, etc.)\n     * @throws {Error} When trying to instantiate abstract CellController directly\n     */\n    constructor(cellId, cellIndex, initialText = '', type = 'unknown') {\n        if (this.constructor === CellController) {\n            throw new Error('CellController is abstract and cannot be instantiated directly');\n        }\n    \n        this.type = type;\n        this.cellId = cellId;\n        this.cellIndex = cellIndex;\n        this.text = $state(initialText);\n        this.isEditing = $state(false);\n        this.isDirty = $state(false);\n        \n        // Validate required methods are implemented\n        this.validateImplementation();\n    }\n    \n    /**\n     * Validate that required methods are implemented by subclasses\n     */\n    validateImplementation() {\n        const requiredMethods = ['render', 'execute', 'clear', 'handleInput'];\n        const optionalMethods = ['getVariables', 'updateHighlighting', 'onDestroy', 'getExecutionBindings'];\n        \n        requiredMethods.forEach(method => {\n            if (!this[method] || typeof this[method] !== 'function') {\n                throw new Error(`${this.constructor.name} must implement ${method}() method`);\n            }\n        });\n        \n        const implementedMethods = requiredMethods.concat(optionalMethods);\n    }\n    \n    // ============ ABSTRACT METHODS ============\n    // These must be implemented by subclasses\n    \n    /**\n     * Render the cell content\n     * @abstract\n     * @returns {Object} Render configuration\n     */\n    render() {\n        throw new Error('render() method must be implemented by subclass');\n    }\n    \n    /**\n     * Execute the cell\n     * @abstract\n     * @returns {Promise<Object>} Execution result\n     */\n    async execute() {\n        throw new Error('execute() method must be implemented by subclass');\n    }\n    \n    /**\n     * Clear the cell content\n     * @abstract\n     */\n    clear() {\n        throw new Error('clear() method must be implemented by subclass');\n    }\n    \n    /**\n     * Handle input events\n     * @abstract\n     * @param {Event} event - Input event\n     */\n    handleInput(event) {\n        throw new Error('handleInput() method must be implemented by subclass');\n    }\n    \n    // ============ OPTIONAL METHODS ============\n    // These have default implementations but can be overridden\n    \n    /**\n     * Get variables defined in current environment\n     * @returns {Array} Array of variable objects\n     */\n    getVariables() {\n        return [];\n    }\n    \n    /**\n     * Update syntax highlighting\n     */\n    updateHighlighting() {\n        // Default implementation does nothing\n    }\n    \n    /**\n     * Get execution bindings for this cell\n     * @returns {Object} Execution bindings\n     */\n    getExecutionBindings() {\n        return {\n            execute: () => this.execute(),\n            clear: () => this.clear(),\n            updateText: (text) => this.updateText(text),\n            getText: () => this.text,\n            getType: () => this.type,\n            getCellId: () => this.cellId,\n            getCellIndex: () => this.cellIndex,\n            setEditing: (editing) => this.setEditing(editing),\n            isEditing: () => this.isEditing,\n            isDirty: () => this.isDirty,\n        };\n    }\n    \n    // ============ COMMON UTILITY METHODS ============\n    \n    /**\n     * Update text content and mark as dirty\n     * @param {string} newText - New text content\n     */\n    updateText(newText) {\n        if (this.text !== newText) {\n            this.text = newText;\n            this.isDirty = true;\n        }\n    }\n    \n    /**\n     * Set editing state\n     * @param {boolean} editing - Whether cell is being edited\n     */\n    setEditing(editing) {\n        this.isEditing = editing;\n    }\n    \n    /**\n     * Mark cell as clean (not dirty)\n     */\n    markClean() {\n        this.isDirty = false;\n    }\n    \n    /**\n     * Get cell metadata\n     * @returns {Object} Cell metadata\n     */\n    getMetadata() {\n        return {\n            cellId: this.cellId,\n            cellIndex: this.cellIndex,\n            type: this.type,\n            isEditing: this.isEditing,\n            isDirty: this.isDirty,\n            textLength: this.text?.length || 0\n        };\n    }\n    \n\n    \n    /**\n     * Helper method to debounce function calls\n     * @param {Function} func - Function to debounce\n     * @param {number} wait - Wait time in milliseconds\n     * @returns {Function} Debounced function\n     */\n    debounce(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout);\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n    \n    /**\n     * Get a unique identifier for this cell\n     * @returns {string} Unique cell identifier\n     */\n    getUniqueId() {\n        return `${this.type}-${this.cellId}`;\n    }\n    \n    /**\n     * Create a clone of the cell with new ID\n     * @param {string} newCellId - New cell ID\n     * @param {number} newCellIndex - New cell index\n     * @returns {CellController} New cell instance\n     */\n    clone(newCellId, newCellIndex) {\n        const CloneClass = this.constructor;\n        return new CloneClass(newCellId, newCellIndex, this.text);\n    }\n    \n    /**\n     * Serialize cell to JSON\n     * @returns {Object} Serialized cell data\n     */\n    toJSON() {\n        return {\n            cellId: this.cellId,\n            cellIndex: this.cellIndex,\n            type: this.type,\n            text: this.text,\n            metadata: this.getMetadata()\n        };\n    }\n    \n    /**\n     * Cleanup when controller is destroyed\n     */\n    onDestroy() {\n        // Default implementation - can be overridden by subclasses\n        this.isEditing = false;\n        this.isDirty = false;\n    }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "cellId",
          "lineNumber": 2,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Unique identifier for the cell"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        {
          "title": "param",
          "name": "cellIndex",
          "lineNumber": 3,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Position index of the cell in the notebook"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        {
          "title": "param",
          "name": "initialText",
          "lineNumber": 4,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Initial text content of the cell"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "default": "''"
        },
        {
          "title": "param",
          "name": "type",
          "lineNumber": 5,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Type identifier for the cell (python, markdown, r, etc.)"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "default": "'unknown'"
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "When trying to instantiate abstract CellController directly"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "Error"
          }
        }
      ],
      "todos": [],
      "yields": []
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Validate that required methods are implemented by subclasses"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 52,
              "column": 4,
              "index": 1840
            },
            "end": {
              "line": 54,
              "column": 7,
              "index": 1919
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 55,
                "column": 4,
                "index": 1924
              },
              "end": {
                "line": 66,
                "column": 5,
                "index": 2474
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "validateImplementation",
          "kind": "function",
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "validateImplementation",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#validateImplementation"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Render the cell content"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "abstract",
              "description": null,
              "lineNumber": 2
            },
            {
              "title": "returns",
              "description": "Render configuration",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 71,
              "column": 4,
              "index": 2586
            },
            "end": {
              "line": 75,
              "column": 7,
              "index": 2691
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 76,
                "column": 4,
                "index": 2696
              },
              "end": {
                "line": 78,
                "column": 5,
                "index": 2788
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Render configuration"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "abstract": true,
          "name": "render",
          "kind": "function",
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "render",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#render"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Execute the cell"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "abstract",
              "description": null,
              "lineNumber": 2
            },
            {
              "title": "returns",
              "description": "Execution result",
              "lineNumber": 3,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "Object"
                  }
                ]
              }
            }
          ],
          "loc": {
            "start": {
              "line": 80,
              "column": 4,
              "index": 2798
            },
            "end": {
              "line": 84,
              "column": 7,
              "index": 2901
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 85,
                "column": 4,
                "index": 2906
              },
              "end": {
                "line": 87,
                "column": 5,
                "index": 3006
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Execution result"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "Object"
                  }
                ]
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "abstract": true,
          "name": "execute",
          "kind": "function",
          "async": true,
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "execute",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#execute"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Clear the cell content"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "abstract",
              "description": null,
              "lineNumber": 2
            }
          ],
          "loc": {
            "start": {
              "line": 89,
              "column": 4,
              "index": 3016
            },
            "end": {
              "line": 92,
              "column": 7,
              "index": 3074
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 93,
                "column": 4,
                "index": 3079
              },
              "end": {
                "line": 95,
                "column": 5,
                "index": 3169
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "abstract": true,
          "name": "clear",
          "kind": "function",
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "clear",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#clear"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Handle input events"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "abstract",
              "description": null,
              "lineNumber": 2
            },
            {
              "title": "param",
              "description": "Input event",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "Event"
              },
              "name": "event"
            }
          ],
          "loc": {
            "start": {
              "line": 97,
              "column": 4,
              "index": 3179
            },
            "end": {
              "line": 101,
              "column": 7,
              "index": 3276
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 102,
                "column": 4,
                "index": 3281
              },
              "end": {
                "line": 104,
                "column": 5,
                "index": 3388
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "event",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Input event"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Event"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "abstract": true,
          "name": "handleInput",
          "kind": "function",
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "handleInput",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#handleInput"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Get variables defined in current environment"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "Array of variable objects",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Array"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 109,
              "column": 4,
              "index": 3517
            },
            "end": {
              "line": 112,
              "column": 7,
              "index": 3630
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 113,
                "column": 4,
                "index": 3635
              },
              "end": {
                "line": 115,
                "column": 5,
                "index": 3676
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Array of variable objects"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Array"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "getVariables",
          "kind": "function",
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "getVariables",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#getVariables"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Update syntax highlighting"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 117,
              "column": 4,
              "index": 3686
            },
            "end": {
              "line": 119,
              "column": 7,
              "index": 3731
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 120,
                "column": 4,
                "index": 3736
              },
              "end": {
                "line": 122,
                "column": 5,
                "index": 3811
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "updateHighlighting",
          "kind": "function",
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "updateHighlighting",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#updateHighlighting"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Get execution bindings for this cell"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "Execution bindings",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 124,
              "column": 4,
              "index": 3821
            },
            "end": {
              "line": 127,
              "column": 7,
              "index": 3920
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 128,
                "column": 4,
                "index": 3925
              },
              "end": {
                "line": 141,
                "column": 5,
                "index": 4437
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Execution bindings"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "getExecutionBindings",
          "kind": "function",
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "getExecutionBindings",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#getExecutionBindings"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Update text content and mark as dirty"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "New text content",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "newText"
            }
          ],
          "loc": {
            "start": {
              "line": 145,
              "column": 4,
              "index": 4508
            },
            "end": {
              "line": 148,
              "column": 7,
              "index": 4614
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 149,
                "column": 4,
                "index": 4619
              },
              "end": {
                "line": 154,
                "column": 5,
                "index": 4759
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "newText",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "New text content"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "updateText",
          "kind": "function",
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "updateText",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#updateText"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Set editing state"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Whether cell is being edited",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              },
              "name": "editing"
            }
          ],
          "loc": {
            "start": {
              "line": 156,
              "column": 4,
              "index": 4769
            },
            "end": {
              "line": 159,
              "column": 7,
              "index": 4868
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 160,
                "column": 4,
                "index": 4873
              },
              "end": {
                "line": 162,
                "column": 5,
                "index": 4934
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "editing",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Whether cell is being edited"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "setEditing",
          "kind": "function",
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "setEditing",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#setEditing"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Mark cell as clean (not dirty)"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 164,
              "column": 4,
              "index": 4944
            },
            "end": {
              "line": 166,
              "column": 7,
              "index": 4993
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 167,
                "column": 4,
                "index": 4998
              },
              "end": {
                "line": 169,
                "column": 5,
                "index": 5047
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "markClean",
          "kind": "function",
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "markClean",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#markClean"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Get cell metadata"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "Cell metadata",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 171,
              "column": 4,
              "index": 5057
            },
            "end": {
              "line": 174,
              "column": 7,
              "index": 5132
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 175,
                "column": 4,
                "index": 5137
              },
              "end": {
                "line": 184,
                "column": 5,
                "index": 5408
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Cell metadata"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "getMetadata",
          "kind": "function",
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "getMetadata",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#getMetadata"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Helper method to debounce function calls"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Function to debounce",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "func"
            },
            {
              "title": "param",
              "description": "Wait time in milliseconds",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "wait"
            },
            {
              "title": "returns",
              "description": "Debounced function",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 188,
              "column": 4,
              "index": 5424
            },
            "end": {
              "line": 193,
              "column": 7,
              "index": 5638
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 194,
                "column": 4,
                "index": 5643
              },
              "end": {
                "line": 204,
                "column": 5,
                "index": 5956
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "func",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Function to debounce"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Function"
              }
            },
            {
              "title": "param",
              "name": "wait",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Wait time in milliseconds"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Debounced function"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "debounce",
          "kind": "function",
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "debounce",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#debounce"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Get a unique identifier for this cell"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "Unique cell identifier",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 206,
              "column": 4,
              "index": 5966
            },
            "end": {
              "line": 209,
              "column": 7,
              "index": 6070
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 210,
                "column": 4,
                "index": 6075
              },
              "end": {
                "line": 212,
                "column": 5,
                "index": 6142
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Unique cell identifier"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "getUniqueId",
          "kind": "function",
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "getUniqueId",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#getUniqueId"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Create a clone of the cell with new ID"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "New cell ID",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "newCellId"
            },
            {
              "title": "param",
              "description": "New cell index",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "newCellIndex"
            },
            {
              "title": "returns",
              "description": "New cell instance",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "CellController"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 214,
              "column": 4,
              "index": 6152
            },
            "end": {
              "line": 219,
              "column": 7,
              "index": 6360
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 220,
                "column": 4,
                "index": 6365
              },
              "end": {
                "line": 223,
                "column": 5,
                "index": 6515
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "newCellId",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "New cell ID"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "newCellIndex",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "New cell index"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "New cell instance"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "CellController"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "clone",
          "kind": "function",
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "clone",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#clone"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Serialize cell to JSON"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "Serialized cell data",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 225,
              "column": 4,
              "index": 6525
            },
            "end": {
              "line": 228,
              "column": 7,
              "index": 6612
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 229,
                "column": 4,
                "index": 6617
              },
              "end": {
                "line": 237,
                "column": 5,
                "index": 6832
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Serialized cell data"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "toJSON",
          "kind": "function",
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "toJSON",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#toJSON"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Cleanup when controller is destroyed"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 239,
              "column": 4,
              "index": 6842
            },
            "end": {
              "line": 241,
              "column": 7,
              "index": 6897
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 242,
                "column": 4,
                "index": 6902
              },
              "end": {
                "line": 246,
                "column": 5,
                "index": 7051
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/CellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "onDestroy",
          "kind": "function",
          "memberof": "CellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CellController",
              "kind": "class"
            },
            {
              "name": "onDestroy",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "CellController#onDestroy"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "CellController",
        "kind": "class"
      }
    ],
    "namespace": "CellController"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Markdown Cell Controller - Manages rich text formatting and documentation"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Handles markdown text rendering with edit/preview modes, supports enhanced\nmarkdown features, and provides seamless integration for documentation cells."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 6,
        "type": null,
        "name": "MarkdownCellController"
      },
      {
        "title": "extends",
        "description": null,
        "lineNumber": 7,
        "type": null,
        "name": "CellController"
      },
      {
        "title": "example",
        "description": "// Create a new markdown cell controller\nconst controller = new MarkdownCellController('cell-1', 0, '# Hello World\\n\\nThis is **bold** text.');\n\n// Toggle preview mode\ncontroller.togglePreview();\nconsole.log(controller.isPreviewMode); // true\n\n// Execute (render) markdown\nconst result = await controller.execute();\nconsole.log(result.output); // Rendered HTML",
        "lineNumber": 8
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0,
        "index": 152
      },
      "end": {
        "line": 23,
        "column": 3,
        "index": 866
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 24,
          "column": 0,
          "index": 867
        },
        "end": {
          "line": 139,
          "column": 1,
          "index": 3626
        }
      },
      "file": "/Users/erikor/codyx/src/lib/classes/cells/MarkdownCellController.svelte.js"
    },
    "augments": [
      {
        "title": "extends",
        "description": null,
        "lineNumber": 7,
        "type": null,
        "name": "CellController"
      }
    ],
    "examples": [
      {
        "description": "// Create a new markdown cell controller\nconst controller = new MarkdownCellController('cell-1', 0, '# Hello World\\n\\nThis is **bold** text.');\n\n// Toggle preview mode\ncontroller.togglePreview();\nconsole.log(controller.isPreviewMode); // true\n\n// Execute (render) markdown\nconst result = await controller.execute();\nconsole.log(result.output); // Rendered HTML"
      }
    ],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "MarkdownCellController",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Create a new markdown cell controller"
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "param",
          "description": "Unique identifier for the cell",
          "lineNumber": 2,
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "name": "cellId"
        },
        {
          "title": "param",
          "description": "Position index of the cell in the notebook",
          "lineNumber": 3,
          "type": {
            "type": "NameExpression",
            "name": "number"
          },
          "name": "cellIndex"
        },
        {
          "title": "param",
          "description": "Initial markdown content",
          "lineNumber": 4,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "string"
            }
          },
          "name": "initialText",
          "default": "''"
        }
      ],
      "loc": {
        "start": {
          "line": 25,
          "column": 4,
          "index": 932
        },
        "end": {
          "line": 30,
          "column": 7,
          "index": 1196
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 31,
            "column": 4,
            "index": 1201
          },
          "end": {
            "line": 35,
            "column": 5,
            "index": 1429
          }
        },
        "file": "/Users/erikor/codyx/src/lib/classes/cells/MarkdownCellController.svelte.js",
        "sortKey": "!/Users/erikor/codyx/src/lib/classes/cells/MarkdownCellController.svelte.js 00000031",
        "code": "{\n    /**\n     * Create a new markdown cell controller\n     * @param {string} cellId - Unique identifier for the cell\n     * @param {number} cellIndex - Position index of the cell in the notebook\n     * @param {string} [initialText=''] - Initial markdown content\n     */\n    constructor(cellId, cellIndex, initialText = '') {\n        super(cellId, cellIndex, initialText, 'markdown');\n        this.isPreviewMode = $state(false);\n        // isEditing is now inherited from CellController base class\n    }\n\n    /**\n     * Render the markdown cell - returns Svelte component instance\n     * @returns {Object} Render configuration with component and props\n     */\n    render(callbacks = {}) {\n        return {\n            component: MarkdownCellRenderer,\n            props: {\n                controller: this, // Updated from 'renderer' to 'controller'\n                ...callbacks\n            }\n        };\n    }\n\n    /**\n     * Execute cell - toggles preview mode for markdown\n     * @returns {Promise<Object>} Execution result\n     */\n    async execute() {\n        this.isPreviewMode = !this.isPreviewMode;\n        return {\n            success: true,\n            output: null,\n            isPreviewMode: this.isPreviewMode\n        };\n    }\n\n    /**\n     * Clear cell content and reset state\n     */\n    clear() {\n        this.text = '';\n        this.isPreviewMode = false;\n        this.isEditing = false;\n    }\n\n    /**\n     * Handle input events\n     * @param {Event} event - Input event\n     */\n    handleInput(event) {\n        this.text = event.target.value;\n    }\n\n    /**\n     * Start editing mode\n     */\n    startEditing() {\n        this.isEditing = true;\n    }\n\n    /**\n     * Stop editing mode  \n     */\n    stopEditing() {\n        this.isEditing = false;\n    }\n\n    /**\n     * Get icon configuration for markdown cells\n     * @returns {Object} Icon configuration\n     */\n    getIconConfig() {\n        return {\n            type: 'material-icon',\n            icon: 'markdown',\n            color: 'var(--color-accent-2)'\n        };\n    }\n\n    /**\n     * Get variables (markdown cells don't have variables)\n     * @returns {Array} Empty array\n     */\n    getVariables() {\n        return [];\n    }\n\n    /**\n     * Update highlighting (no-op for markdown)\n     */\n    updateHighlighting() {\n        // Markdown cells don't have syntax highlighting\n    }\n\n    /**\n     * Get execution bindings (no-op for markdown)\n     * @returns {Object} Empty object\n     */\n    getExecutionBindings() {\n        return {};\n    }\n\n    /**\n     * Cleanup resources\n     */\n    onDestroy() {\n        // No special cleanup needed for markdown\n        \n        // Call parent cleanup\n        super.onDestroy();\n    }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "cellId",
          "lineNumber": 2,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Unique identifier for the cell"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        {
          "title": "param",
          "name": "cellIndex",
          "lineNumber": 3,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Position index of the cell in the notebook"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        {
          "title": "param",
          "name": "initialText",
          "lineNumber": 4,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Initial markdown content"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "default": "''"
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": []
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Render the markdown cell - returns Svelte component instance"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "Render configuration with component and props",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 37,
              "column": 4,
              "index": 1435
            },
            "end": {
              "line": 40,
              "column": 7,
              "index": 1585
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 41,
                "column": 4,
                "index": 1590
              },
              "end": {
                "line": 49,
                "column": 5,
                "index": 1834
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/MarkdownCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "callbacks",
              "lineNumber": 41,
              "default": "{}"
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Render configuration with component and props"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "render",
          "kind": "function",
          "memberof": "MarkdownCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "MarkdownCellController",
              "kind": "class"
            },
            {
              "name": "render",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "MarkdownCellController#render"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Execute cell - toggles preview mode for markdown"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "Execution result",
              "lineNumber": 2,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "Object"
                  }
                ]
              }
            }
          ],
          "loc": {
            "start": {
              "line": 51,
              "column": 4,
              "index": 1840
            },
            "end": {
              "line": 54,
              "column": 7,
              "index": 1958
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 55,
                "column": 4,
                "index": 1963
              },
              "end": {
                "line": 62,
                "column": 5,
                "index": 2163
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/MarkdownCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Execution result"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "Object"
                  }
                ]
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "execute",
          "kind": "function",
          "async": true,
          "memberof": "MarkdownCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "MarkdownCellController",
              "kind": "class"
            },
            {
              "name": "execute",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "MarkdownCellController#execute"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Clear cell content and reset state"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 64,
              "column": 4,
              "index": 2169
            },
            "end": {
              "line": 66,
              "column": 7,
              "index": 2222
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 67,
                "column": 4,
                "index": 2227
              },
              "end": {
                "line": 71,
                "column": 5,
                "index": 2334
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/MarkdownCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "clear",
          "kind": "function",
          "memberof": "MarkdownCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "MarkdownCellController",
              "kind": "class"
            },
            {
              "name": "clear",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "MarkdownCellController#clear"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Handle input events"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Input event",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Event"
              },
              "name": "event"
            }
          ],
          "loc": {
            "start": {
              "line": 73,
              "column": 4,
              "index": 2340
            },
            "end": {
              "line": 76,
              "column": 7,
              "index": 2420
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 77,
                "column": 4,
                "index": 2425
              },
              "end": {
                "line": 79,
                "column": 5,
                "index": 2491
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/MarkdownCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "event",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Input event"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Event"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "handleInput",
          "kind": "function",
          "memberof": "MarkdownCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "MarkdownCellController",
              "kind": "class"
            },
            {
              "name": "handleInput",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "MarkdownCellController#handleInput"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Start editing mode"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 81,
              "column": 4,
              "index": 2497
            },
            "end": {
              "line": 83,
              "column": 7,
              "index": 2534
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 84,
                "column": 4,
                "index": 2539
              },
              "end": {
                "line": 86,
                "column": 5,
                "index": 2592
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/MarkdownCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "startEditing",
          "kind": "function",
          "memberof": "MarkdownCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "MarkdownCellController",
              "kind": "class"
            },
            {
              "name": "startEditing",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "MarkdownCellController#startEditing"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Stop editing mode"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 88,
              "column": 4,
              "index": 2598
            },
            "end": {
              "line": 90,
              "column": 7,
              "index": 2636
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 91,
                "column": 4,
                "index": 2641
              },
              "end": {
                "line": 93,
                "column": 5,
                "index": 2694
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/MarkdownCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "stopEditing",
          "kind": "function",
          "memberof": "MarkdownCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "MarkdownCellController",
              "kind": "class"
            },
            {
              "name": "stopEditing",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "MarkdownCellController#stopEditing"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Get icon configuration for markdown cells"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "Icon configuration",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 95,
              "column": 4,
              "index": 2700
            },
            "end": {
              "line": 98,
              "column": 7,
              "index": 2804
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 99,
                "column": 4,
                "index": 2809
              },
              "end": {
                "line": 105,
                "column": 5,
                "index": 2968
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/MarkdownCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Icon configuration"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "getIconConfig",
          "kind": "function",
          "memberof": "MarkdownCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "MarkdownCellController",
              "kind": "class"
            },
            {
              "name": "getIconConfig",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "MarkdownCellController#getIconConfig"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Get variables (markdown cells don't have variables)"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "Empty array",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Array"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 107,
              "column": 4,
              "index": 2974
            },
            "end": {
              "line": 110,
              "column": 7,
              "index": 3080
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 111,
                "column": 4,
                "index": 3085
              },
              "end": {
                "line": 113,
                "column": 5,
                "index": 3126
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/MarkdownCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Empty array"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Array"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "getVariables",
          "kind": "function",
          "memberof": "MarkdownCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "MarkdownCellController",
              "kind": "class"
            },
            {
              "name": "getVariables",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "MarkdownCellController#getVariables"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Update highlighting (no-op for markdown)"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 115,
              "column": 4,
              "index": 3132
            },
            "end": {
              "line": 117,
              "column": 7,
              "index": 3191
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 118,
                "column": 4,
                "index": 3196
              },
              "end": {
                "line": 120,
                "column": 5,
                "index": 3281
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/MarkdownCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "updateHighlighting",
          "kind": "function",
          "memberof": "MarkdownCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "MarkdownCellController",
              "kind": "class"
            },
            {
              "name": "updateHighlighting",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "MarkdownCellController#updateHighlighting"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Get execution bindings (no-op for markdown)"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "Empty object",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 122,
              "column": 4,
              "index": 3287
            },
            "end": {
              "line": 125,
              "column": 7,
              "index": 3387
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 126,
                "column": 4,
                "index": 3392
              },
              "end": {
                "line": 128,
                "column": 5,
                "index": 3441
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/MarkdownCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Empty object"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "getExecutionBindings",
          "kind": "function",
          "memberof": "MarkdownCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "MarkdownCellController",
              "kind": "class"
            },
            {
              "name": "getExecutionBindings",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "MarkdownCellController#getExecutionBindings"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Cleanup resources"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 130,
              "column": 4,
              "index": 3447
            },
            "end": {
              "line": 132,
              "column": 7,
              "index": 3483
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 133,
                "column": 4,
                "index": 3488
              },
              "end": {
                "line": 138,
                "column": 5,
                "index": 3624
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/MarkdownCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "onDestroy",
          "kind": "function",
          "memberof": "MarkdownCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "MarkdownCellController",
              "kind": "class"
            },
            {
              "name": "onDestroy",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "MarkdownCellController#onDestroy"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "MarkdownCellController",
        "kind": "class"
      }
    ],
    "namespace": "MarkdownCellController"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Python Cell Controller - Manages Python code execution and environment"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Handles Python code execution using Pyodide, tracks variables for syntax highlighting,\nand provides intelligent import suggestions with automatic package installation."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 6,
        "type": null,
        "name": "PythonCellController"
      },
      {
        "title": "extends",
        "description": null,
        "lineNumber": 7,
        "type": null,
        "name": "CellController"
      },
      {
        "title": "example",
        "description": "// Create a new Python cell controller\nconst controller = new PythonCellController('cell-1', 0, 'import pandas as pd\\nprint(\"Hello World\")');\n\n// Execute the code\nconst result = await controller.execute();\nconsole.log(result.output); // Python execution output\n\n// Get available variables for syntax highlighting\nconst vars = await controller.getVariables();\nconsole.log(vars); // ['pd'] - available variables",
        "lineNumber": 8
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0,
        "index": 148
      },
      "end": {
        "line": 23,
        "column": 3,
        "index": 921
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 24,
          "column": 0,
          "index": 922
        },
        "end": {
          "line": 426,
          "column": 1,
          "index": 14587
        }
      },
      "file": "/Users/erikor/codyx/src/lib/classes/cells/PythonCellController.svelte.js"
    },
    "augments": [
      {
        "title": "extends",
        "description": null,
        "lineNumber": 7,
        "type": null,
        "name": "CellController"
      }
    ],
    "examples": [
      {
        "description": "// Create a new Python cell controller\nconst controller = new PythonCellController('cell-1', 0, 'import pandas as pd\\nprint(\"Hello World\")');\n\n// Execute the code\nconst result = await controller.execute();\nconsole.log(result.output); // Python execution output\n\n// Get available variables for syntax highlighting\nconst vars = await controller.getVariables();\nconsole.log(vars); // ['pd'] - available variables"
      }
    ],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "PythonCellController",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Create a new Python cell controller"
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "param",
          "description": "Unique identifier for the cell",
          "lineNumber": 2,
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "name": "cellId"
        },
        {
          "title": "param",
          "description": "Position index of the cell in the notebook",
          "lineNumber": 3,
          "type": {
            "type": "NameExpression",
            "name": "number"
          },
          "name": "cellIndex"
        },
        {
          "title": "param",
          "description": "Initial Python code content",
          "lineNumber": 4,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "string"
            }
          },
          "name": "initialText",
          "default": "''"
        }
      ],
      "loc": {
        "start": {
          "line": 25,
          "column": 4,
          "index": 985
        },
        "end": {
          "line": 30,
          "column": 7,
          "index": 1252
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 31,
            "column": 4,
            "index": 1257
          },
          "end": {
            "line": 50,
            "column": 5,
            "index": 2022
          }
        },
        "file": "/Users/erikor/codyx/src/lib/classes/cells/PythonCellController.svelte.js",
        "sortKey": "!/Users/erikor/codyx/src/lib/classes/cells/PythonCellController.svelte.js 00000031",
        "code": "{\n    /**\n     * Create a new Python cell controller\n     * @param {string} cellId - Unique identifier for the cell\n     * @param {number} cellIndex - Position index of the cell in the notebook  \n     * @param {string} [initialText=''] - Initial Python code content\n     */\n    constructor(cellId, cellIndex, initialText = '') {\n        super(cellId, cellIndex, initialText, 'python');\n        this.output = $state(null);\n        this.isExecuting = $state(false);\n        this.isEditing = $state(false);\n        this.variables = $state({});\n        this.globalVariables = $state({});\n        this.importSuggestions = $state([]);\n        \n        // Import pyodide service\n        import('../pyodide-service.js').then(({ pyodideService }) => {\n            this.pyodideService = pyodideService;\n            this.subscribeToGlobalVariables();\n        });\n        \n        // Import package data\n        import('../pyodide-packages.json').then(data => {\n            this.packageMapping = this.createPackageMapping(data.packages);\n        });\n    }\n    \n    render(props) {\n        return {\n            component: PythonCellRenderer,\n            props: {\n                controller: this, // Updated from 'renderer' to 'controller'\n                ...props\n            }\n        };\n    }\n    \n    /**\n     * Execute Python code using Pyodide service\n     * \n     * Runs the Python code in the browser using Pyodide, handles various output types\n     * (text, plots, data tables, errors), and updates the cell's output state.\n     * \n     * @async\n     * @returns {Promise<Object>} Execution result object\n     * @returns {boolean} result.success - Whether execution was successful\n     * @returns {Object} [result.output] - Execution output (text, plots, data, or error)\n     * @returns {string} [result.error] - Error message if execution failed\n     * \n     * @throws {Error} If Pyodide service is not initialized\n     * \n     * @example\n     * // Execute simple Python code\n     * const result = await controller.execute();\n     * if (result.success) {\n     *   console.log('Output:', result.output);\n     * }\n     * \n     * @example\n     * // Handle different output types\n     * await controller.execute();\n     * if (controller.output.type === 'plot') {\n     *   displayPlot(controller.output.content);\n     * } else if (controller.output.type === 'error') {\n     *   showError(controller.output.content);\n     * }\n     */\n    async execute() {\n        if (!this.text.trim()) {\n            return { success: false, error: 'No Python code to execute' };\n        }\n\n        this.isExecuting = true;\n        this.output = null;\n\n        try {\n            // Check if pyodideService is available\n            if (!this.pyodideService) {\n                throw new Error('Python service not initialized. Please wait and try again.');\n            }\n\n            const result = await this.pyodideService.executeCode(this.text);\n            \n            if (result.error) {\n                this.output = {\n                    type: 'error',\n                    content: result.error\n                };\n                this.isExecuting = false;\n                return { success: false, error: result.error };\n            }\n\n            // Handle different output types\n            const hasPlots = result.hasPlot && result.plotData;\n            const hasText = result.output && result.output.trim();\n            \n            if (hasPlots && hasText) {\n                // Both plots and text output\n                this.output = {\n                    type: 'mixed',\n                    textContent: result.output,\n                    plots: [result.plotData] // Python typically has one plot at a time\n                };\n            } else if (hasPlots) {\n                // Only plots\n                this.output = {\n                    type: 'plot',\n                    content: result.plotData,\n                    plots: [result.plotData]\n                };\n            } else if (hasText) {\n                // Only text output\n                this.output = {\n                    type: 'text',\n                    content: result.output\n                };\n            } else {\n                // No visible output\n                this.output = {\n                    type: 'text',\n                    content: '(No output)'\n                };\n            }\n            \n            // Update variables if available\n            if (result.userVariables) {\n                this.variables = result.userVariables;\n            }\n            \n            this.isExecuting = false;\n            return { success: true, output: this.output };\n            \n        } catch (error) {\n            this.output = {\n                type: 'error',\n                content: error.message || String(error)\n            };\n            this.isExecuting = false;\n            return { success: false, error: error.message || String(error) };\n        }\n    }\n    \n    clear() {\n        this.output = null;\n        this.isExecuting = false;\n        // Could also clear variables if needed\n        // this.variables = {};\n    }\n\n    /**\n     * Start editing mode\n     */\n    startEditing() {\n        this.isEditing = true;\n    }\n\n    /**\n     * Stop editing mode  \n     */\n    stopEditing() {\n        this.isEditing = false;\n    }\n    \n    handleInput = (event) => {\n        this.updateImportSuggestions();\n        console.log('Import suggestions:', this.importSuggestions); \n    }\n    \n    /**\n     * Get variables from Python environment\n     * @returns {Promise<Array<string>>} Array of user-defined variable names\n     */\n    async getVariables() {\n        try {\n            // Check if pyodideService is available\n            if (!this.pyodideService) {\n                console.warn('Python service not initialized yet');\n                return [];\n            }\n\n            // Execute Python code to get user-defined variables\n            const pythonCode = `\nimport builtins\nbuiltin_names = set(dir(builtins))\nuser_vars = [name for name in globals() if not name.startswith('_') and name not in builtin_names and not callable(globals()[name]) or name in ['pd', 'np', 'plt', 'sns']]\nprint(user_vars)\n            `.trim();\n            \n            const result = await this.pyodideService.executeCode(pythonCode);\n            \n            if (result?.output && !result.error) {\n                // Parse Python list output: ['x', 'y', 'data'] ‚Üí ['x', 'y', 'data']\n                const output = result.output.trim();\n                \n                // Handle empty list case\n                if (output === '[]') {\n                    return [];\n                }\n                \n                // Parse the Python list string\n                try {\n                    // Remove surrounding brackets and split by comma\n                    const listContent = output.slice(1, -1); // Remove [ and ]\n                    if (!listContent.trim()) return [];\n                    \n                    const vars = listContent.split(',')\n                        .map(item => item.trim().replace(/['\"]/g, '')) // Remove quotes\n                        .filter(item => item.length > 0);                        \n                    return vars;\n                } catch (parseError) {\n                    console.warn('Failed to parse Python variables output:', output);\n                    return [];\n                }\n            }\n            \n            return [];\n        } catch (error) {\n            console.warn('Failed to get Python variables:', error);\n            return [];\n        }\n    }\n    \n    updateHighlighting(variables) {\n        this.globalVariables = variables;\n    }\n    \n    /**\n     * Get icon configuration for Python cells\n     * @returns {Object} Icon configuration\n     */\n    getIconConfig() {\n        return {\n            type: 'custom-symbol',\n            icon: 'python-symbol',\n            color: '#3776ab'\n        };\n    }\n    \n    // ============ PYTHON-SPECIFIC METHODS ============\n    \n    /**\n     * Subscribe to global variable changes from PyodideService\n     */\n    subscribeToGlobalVariables() {\n        if (this.pyodideService) {\n            this.unsubscribeFromVariables = this.pyodideService.subscribeToVariables(\n                (variables) => {\n                    this.globalVariables = variables;\n                }\n            );\n        }\n    }\n    \n    /**\n     * Create mapping from import names to package names\n     * @param {Array} packages - Available packages\n     * @returns {Object} - Package mapping\n     */\n    createPackageMapping(packages) {\n        const mapping = {};\n        packages.forEach(pkg => {\n            mapping[pkg] = pkg;\n        });\n        \n        const specialMappings = {\n            'sklearn': 'scikit-learn',\n            'cv2': 'opencv-python',\n            'PIL': 'Pillow', \n            'bs4': 'beautifulsoup4',\n            'yaml': 'pyyaml',\n            'Image': 'Pillow',\n            'requests': 'requests'\n        };\n        \n        Object.assign(mapping, specialMappings);\n        return mapping;\n    }\n    \n    /**\n     * Update import suggestions based on current text\n     */\n    updateImportSuggestions() {\n        if (!this.packageMapping) return;\n        \n        const suggestions = [];\n        const lines = this.text.split('\\n');\n        const suggestedPackages = new Set();\n        \n        lines.forEach((line, lineIndex) => {\n            const trimmed = line.trim();\n            \n            if (trimmed.startsWith('#') || trimmed === '') return;\n            \n            const importPatterns = [\n                /^import\\s+([a-zA-Z_][a-zA-Z0-9_]*)/,\n                /^from\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s+import/,\n                /^import\\s+([a-zA-Z_][a-zA-Z0-9_]*(?:\\s*,\\s*[a-zA-Z_][a-zA-Z0-9_]*)*)/,\n            ];\n            \n            for (const pattern of importPatterns) {\n                const match = trimmed.match(pattern);\n                if (match && match[1]) {\n                    const packageNames = match[1].split(',').map(name => name.trim());\n                    \n                    for (const packageName of packageNames) {\n                        if (this.packageMapping[packageName] && !suggestedPackages.has(packageName)) {\n                            const installName = this.packageMapping[packageName];\n                            const isAlreadyInstalling = lines.some(l => {\n                                const installPattern = new RegExp(\n                                    `micropip\\\\.install\\\\s*\\\\(\\\\s*['\"\\`]${installName}['\"\\`]\\\\s*\\\\)`\n                                );\n                                return installPattern.test(l.trim());\n                            });\n\n                            if (!isAlreadyInstalling) {\n                                suggestions.push({\n                                    line: lineIndex,\n                                    packageName: packageName,\n                                    installName: installName,\n                                    originalLine: line\n                                });\n                                suggestedPackages.add(packageName);\n                            }\n                        }\n                    }\n                }\n            }\n        });\n        \n        this.importSuggestions = suggestions;\n    }\n    \n    /**\n     * Insert package installation code at the appropriate line\n     * @param {Object} suggestion - Import suggestion object\n     */\n    insertInstallCode(suggestion) {\n        const lines = this.text.split('\\n');\n        \n        const hasMicropipImport = lines.some(line => \n            line.trim().match(/^import\\s+micropip\\s*$/)\n        );\n        \n        let installCode = '';\n        if (!hasMicropipImport) {\n            installCode += 'import micropip\\n';\n        }\n        installCode += `await micropip.install('${suggestion.installName}')`;\n        \n        lines.splice(suggestion.line, 0, installCode);\n        this.updateText(lines.join('\\n'));\n        \n        this.importSuggestions = this.importSuggestions.filter(s => s !== suggestion);\n    }\n    \n    /**\n     * Generate highlighted code with variable highlighting\n     * @param {string} code - Source code\n     * @param {Object} variables - Variables to highlight\n     * @returns {string} - HTML with highlighted variables\n     */\n    getHighlightedCode(code, variables) {\n        if (!code || !variables || Object.keys(variables).length === 0) {\n            return code;\n        }\n        \n        const variableNames = Object.keys(variables);\n        if (variableNames.length === 0) return code;\n        \n        let highlightedCode = code\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&#39;');\n        \n        variableNames.sort((a, b) => b.length - a.length);\n        \n        for (const varName of variableNames) {\n            const escapedVarName = varName.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n            const regex = new RegExp(`\\\\b(${escapedVarName})\\\\b(?![^<]*>)`, 'g');\n            highlightedCode = highlightedCode.replace(regex, '<span class=\"defined-variable\">$1</span>');\n        }\n        \n        return highlightedCode;\n    }\n    \n    /**\n     * Cleanup when controller is destroyed\n     */\n    onDestroy() {\n        if (this.unsubscribeFromVariables) {\n            this.unsubscribeFromVariables();\n        }\n        this.isExecuting = false;\n        this.isEditing = false;\n        this.output = null;\n        \n        // Call parent cleanup\n        super.onDestroy();\n    }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "cellId",
          "lineNumber": 2,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Unique identifier for the cell"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        {
          "title": "param",
          "name": "cellIndex",
          "lineNumber": 3,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Position index of the cell in the notebook"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        {
          "title": "param",
          "name": "initialText",
          "lineNumber": 4,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Initial Python code content"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "default": "''"
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": []
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Execute Python code using Pyodide service"
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Runs the Python code in the browser using Pyodide, handles various output types\n(text, plots, data tables, errors), and updates the cell's output state."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "async",
              "description": null,
              "lineNumber": 6
            },
            {
              "title": "returns",
              "description": "Execution result object",
              "lineNumber": 7,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "Object"
                  }
                ]
              }
            },
            {
              "title": "returns",
              "description": "result.success - Whether execution was successful",
              "lineNumber": 8,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "returns",
              "description": "[result.output] - Execution output (text, plots, data, or error)",
              "lineNumber": 9,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            {
              "title": "returns",
              "description": "[result.error] - Error message if execution failed",
              "lineNumber": 10,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "throws",
              "description": "If Pyodide service is not initialized",
              "lineNumber": 12,
              "type": {
                "type": "NameExpression",
                "name": "Error"
              }
            },
            {
              "title": "example",
              "description": "// Execute simple Python code\nconst result = await controller.execute();\nif (result.success) {\n  console.log('Output:', result.output);\n}",
              "lineNumber": 14
            },
            {
              "title": "example",
              "description": "// Handle different output types\nawait controller.execute();\nif (controller.output.type === 'plot') {\n  displayPlot(controller.output.content);\n} else if (controller.output.type === 'error') {\n  showError(controller.output.content);\n}",
              "lineNumber": 21
            }
          ],
          "loc": {
            "start": {
              "line": 62,
              "column": 4,
              "index": 2271
            },
            "end": {
              "line": 91,
              "column": 7,
              "index": 3402
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 92,
                "column": 4,
                "index": 3407
              },
              "end": {
                "line": 165,
                "column": 5,
                "index": 5905
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/PythonCellController.svelte.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "// Execute simple Python code\nconst result = await controller.execute();\nif (result.success) {\n  console.log('Output:', result.output);\n}"
            },
            {
              "description": "// Handle different output types\nawait controller.execute();\nif (controller.output.type === 'plot') {\n  displayPlot(controller.output.content);\n} else if (controller.output.type === 'error') {\n  showError(controller.output.content);\n}"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Execution result object"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "Object"
                  }
                ]
              }
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "result.success - Whether execution was successful"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "[result.output] - Execution output (text, plots, data, or error)"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "[result.error] - Error message if execution failed"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "sees": [],
          "throws": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "If Pyodide service is not initialized"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Error"
              }
            }
          ],
          "todos": [],
          "yields": [],
          "async": true,
          "name": "execute",
          "kind": "function",
          "memberof": "PythonCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "PythonCellController",
              "kind": "class"
            },
            {
              "name": "execute",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "PythonCellController#execute"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Start editing mode"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 174,
              "column": 4,
              "index": 6078
            },
            "end": {
              "line": 176,
              "column": 7,
              "index": 6115
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 177,
                "column": 4,
                "index": 6120
              },
              "end": {
                "line": 179,
                "column": 5,
                "index": 6173
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/PythonCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "startEditing",
          "kind": "function",
          "memberof": "PythonCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "PythonCellController",
              "kind": "class"
            },
            {
              "name": "startEditing",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "PythonCellController#startEditing"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Stop editing mode"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 181,
              "column": 4,
              "index": 6179
            },
            "end": {
              "line": 183,
              "column": 7,
              "index": 6217
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 184,
                "column": 4,
                "index": 6222
              },
              "end": {
                "line": 186,
                "column": 5,
                "index": 6275
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/PythonCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "stopEditing",
          "kind": "function",
          "memberof": "PythonCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "PythonCellController",
              "kind": "class"
            },
            {
              "name": "stopEditing",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "PythonCellController#stopEditing"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Get variables from Python environment"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "Array of user-defined variable names",
              "lineNumber": 2,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "applications": [
                  {
                    "type": "TypeApplication",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Array"
                    },
                    "applications": [
                      {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "loc": {
            "start": {
              "line": 193,
              "column": 4,
              "index": 6436
            },
            "end": {
              "line": 196,
              "column": 7,
              "index": 6570
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 197,
                "column": 4,
                "index": 6575
              },
              "end": {
                "line": 245,
                "column": 5,
                "index": 8541
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/PythonCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Array of user-defined variable names"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "applications": [
                  {
                    "type": "TypeApplication",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Array"
                    },
                    "applications": [
                      {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "getVariables",
          "kind": "function",
          "async": true,
          "memberof": "PythonCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "PythonCellController",
              "kind": "class"
            },
            {
              "name": "getVariables",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "PythonCellController#getVariables"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Get icon configuration for Python cells"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "Icon configuration",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 251,
              "column": 4,
              "index": 8640
            },
            "end": {
              "line": 254,
              "column": 7,
              "index": 8742
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 255,
                "column": 4,
                "index": 8747
              },
              "end": {
                "line": 261,
                "column": 5,
                "index": 8897
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/PythonCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Icon configuration"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "getIconConfig",
          "kind": "function",
          "memberof": "PythonCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "PythonCellController",
              "kind": "class"
            },
            {
              "name": "getIconConfig",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "PythonCellController#getIconConfig"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Subscribe to global variable changes from PyodideService"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 265,
              "column": 4,
              "index": 8969
            },
            "end": {
              "line": 267,
              "column": 7,
              "index": 9044
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 268,
                "column": 4,
                "index": 9049
              },
              "end": {
                "line": 276,
                "column": 5,
                "index": 9336
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/PythonCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "subscribeToGlobalVariables",
          "kind": "function",
          "memberof": "PythonCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "PythonCellController",
              "kind": "class"
            },
            {
              "name": "subscribeToGlobalVariables",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "PythonCellController#subscribeToGlobalVariables"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Create mapping from import names to package names"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Available packages",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Array"
              },
              "name": "packages"
            },
            {
              "title": "returns",
              "description": "Package mapping",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 278,
              "column": 4,
              "index": 9346
            },
            "end": {
              "line": 282,
              "column": 7,
              "index": 9509
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 283,
                "column": 4,
                "index": 9514
              },
              "end": {
                "line": 301,
                "column": 5,
                "index": 10032
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/PythonCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "packages",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Available packages"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Array"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Package mapping"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "createPackageMapping",
          "kind": "function",
          "memberof": "PythonCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "PythonCellController",
              "kind": "class"
            },
            {
              "name": "createPackageMapping",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "PythonCellController#createPackageMapping"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Update import suggestions based on current text"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 303,
              "column": 4,
              "index": 10042
            },
            "end": {
              "line": 305,
              "column": 7,
              "index": 10108
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 306,
                "column": 4,
                "index": 10113
              },
              "end": {
                "line": 355,
                "column": 5,
                "index": 12277
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/PythonCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "updateImportSuggestions",
          "kind": "function",
          "memberof": "PythonCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "PythonCellController",
              "kind": "class"
            },
            {
              "name": "updateImportSuggestions",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "PythonCellController#updateImportSuggestions"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Insert package installation code at the appropriate line"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Import suggestion object",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "suggestion"
            }
          ],
          "loc": {
            "start": {
              "line": 357,
              "column": 4,
              "index": 12287
            },
            "end": {
              "line": 360,
              "column": 7,
              "index": 12423
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 361,
                "column": 4,
                "index": 12428
              },
              "end": {
                "line": 378,
                "column": 5,
                "index": 13052
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/PythonCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "suggestion",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Import suggestion object"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "insertInstallCode",
          "kind": "function",
          "memberof": "PythonCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "PythonCellController",
              "kind": "class"
            },
            {
              "name": "insertInstallCode",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "PythonCellController#insertInstallCode"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Generate highlighted code with variable highlighting"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Source code",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "code"
            },
            {
              "title": "param",
              "description": "Variables to highlight",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "variables"
            },
            {
              "title": "returns",
              "description": "HTML with highlighted variables",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 380,
              "column": 4,
              "index": 13062
            },
            "end": {
              "line": 385,
              "column": 7,
              "index": 13292
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 386,
                "column": 4,
                "index": 13297
              },
              "end": {
                "line": 410,
                "column": 5,
                "index": 14235
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/PythonCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "code",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Source code"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "variables",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Variables to highlight"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "HTML with highlighted variables"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "getHighlightedCode",
          "kind": "function",
          "memberof": "PythonCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "PythonCellController",
              "kind": "class"
            },
            {
              "name": "getHighlightedCode",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "PythonCellController#getHighlightedCode"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Cleanup when controller is destroyed"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 412,
              "column": 4,
              "index": 14245
            },
            "end": {
              "line": 414,
              "column": 7,
              "index": 14300
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 415,
                "column": 4,
                "index": 14305
              },
              "end": {
                "line": 425,
                "column": 5,
                "index": 14585
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/PythonCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "onDestroy",
          "kind": "function",
          "memberof": "PythonCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "PythonCellController",
              "kind": "class"
            },
            {
              "name": "onDestroy",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "PythonCellController#onDestroy"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "PythonCellController",
        "kind": "class"
      }
    ],
    "namespace": "PythonCellController"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "R Cell Controller - Manages R statistical computing code execution"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Handles R code execution using WebR, manages R packages, and provides\nstatistical computing capabilities directly in the browser."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 6,
        "type": null,
        "name": "RCellController"
      },
      {
        "title": "extends",
        "description": null,
        "lineNumber": 7,
        "type": null,
        "name": "CellController"
      },
      {
        "title": "example",
        "description": "// Create a new R cell controller\nconst controller = new RCellController('cell-1', 0, 'data <- c(1,2,3,4,5)\\nmean(data)');\n\n// Execute R code\nconst result = await controller.execute();\nconsole.log(result.output); // R execution output\n\n// Install R packages\nawait controller.installPackages(['ggplot2', 'dplyr']);",
        "lineNumber": 8
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0,
        "index": 194
      },
      "end": {
        "line": 23,
        "column": 3,
        "index": 821
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 24,
          "column": 0,
          "index": 822
        },
        "end": {
          "line": 214,
          "column": 1,
          "index": 6202
        }
      },
      "file": "/Users/erikor/codyx/src/lib/classes/cells/RCellController.svelte.js"
    },
    "augments": [
      {
        "title": "extends",
        "description": null,
        "lineNumber": 7,
        "type": null,
        "name": "CellController"
      }
    ],
    "examples": [
      {
        "description": "// Create a new R cell controller\nconst controller = new RCellController('cell-1', 0, 'data <- c(1,2,3,4,5)\\nmean(data)');\n\n// Execute R code\nconst result = await controller.execute();\nconsole.log(result.output); // R execution output\n\n// Install R packages\nawait controller.installPackages(['ggplot2', 'dplyr']);"
      }
    ],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "RCellController",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Create a new R cell controller"
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "param",
          "description": "Unique identifier for the cell",
          "lineNumber": 2,
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "name": "cellId"
        },
        {
          "title": "param",
          "description": "Position index of the cell in the notebook",
          "lineNumber": 3,
          "type": {
            "type": "NameExpression",
            "name": "number"
          },
          "name": "cellIndex"
        },
        {
          "title": "param",
          "description": "Initial R code content",
          "lineNumber": 4,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "string"
            }
          },
          "name": "initialText",
          "default": "''"
        }
      ],
      "loc": {
        "start": {
          "line": 25,
          "column": 4,
          "index": 880
        },
        "end": {
          "line": 30,
          "column": 7,
          "index": 1135
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 31,
            "column": 4,
            "index": 1140
          },
          "end": {
            "line": 36,
            "column": 5,
            "index": 1362
          }
        },
        "file": "/Users/erikor/codyx/src/lib/classes/cells/RCellController.svelte.js",
        "sortKey": "!/Users/erikor/codyx/src/lib/classes/cells/RCellController.svelte.js 00000031",
        "code": "{\n    /**\n     * Create a new R cell controller\n     * @param {string} cellId - Unique identifier for the cell\n     * @param {number} cellIndex - Position index of the cell in the notebook\n     * @param {string} [initialText=''] - Initial R code content\n     */\n    constructor(cellId, cellIndex, initialText = '') {\n        super(cellId, cellIndex, initialText, 'r');\n        this.output = $state(null);\n        this.isExecuting = $state(false);\n        this.packages = $state([]);\n    }\n\n    /**\n     * Render the R cell - returns Svelte component instance\n     * @returns {Object} Render configuration with component and props\n     */\n    render(callbacks = {}) {\n        return {\n            component: RCellRenderer,\n            props: {\n                controller: this, // Updated from 'renderer' to 'controller'\n                ...callbacks\n            }\n        };\n    }\n\n    /**\n     * Execute R code using WebR service\n     * @returns {Promise<Object>} Execution result\n     */\n    async execute() {\n        if (!this.text.trim()) {\n            return { success: false, error: 'No R code to execute' };\n        }\n\n        this.isExecuting = true;\n        this.output = null;\n\n        try {\n            // Check WebR service status\n            const status = webRService.getStatus();\n            if (status === 'error') {\n                throw new Error('WebR service failed to initialize. Please refresh the page and try again.');\n            }\n\n            const result = await webRService.executeCode(this.text);\n            \n            if (result.error) {\n                this.output = {\n                    type: 'error',\n                    content: result.error\n                };\n                this.isExecuting = false;\n                return { success: false, error: result.error };\n            }\n\n            // Handle different output types - support both plots and text\n            const hasPlots = result.plots && result.plots.length > 0;\n            const hasText = result.output && result.output.trim();\n            \n            if (hasPlots && hasText) {\n                // Both plots and text output\n                this.output = {\n                    type: 'mixed',\n                    textContent: result.output,\n                    plots: result.plots\n                };\n            } else if (hasPlots) {\n                // Only plots\n                this.output = {\n                    type: 'plot',\n                    content: result.plots[0], // Show first plot for backward compatibility\n                    plots: result.plots // Keep all plots available\n                };\n            } else if (hasText) {\n                // Only text output\n                this.output = {\n                    type: 'text',\n                    content: result.output\n                };\n            } else {\n                // No visible output\n                this.output = {\n                    type: 'text',\n                    content: '(No output)'\n                };\n            }\n            \n            this.isExecuting = false;\n            return { success: true, output: this.output };\n            \n        } catch (error) {\n            this.output = {\n                type: 'error',\n                content: error.message || String(error)\n            };\n            this.isExecuting = false;\n            return { success: false, error: error.message || String(error) };\n        }\n    }\n\n    /**\n     * Start editing mode\n     */\n    startEditing() {\n        this.isEditing = true;\n    }\n\n    /**\n     * Stop editing mode  \n     */\n    stopEditing() {\n        this.isEditing = false;\n    }\n\n    /**\n     * Clear cell content and reset state\n     */\n    clear() {\n        this.text = '';\n        this.output = null;\n        this.isExecuting = false;\n    }\n\n    /**\n     * Handle input events\n     * @param {Event} event - Input event\n     */\n    handleInput(event) {\n        this.text = event.target.value;\n    }\n\n    /**\n     * Get icon configuration for R cells\n     * @returns {Object} Icon configuration\n     */\n    getIconConfig() {\n        return {\n            type: 'custom-symbol',\n            icon: 'r-symbol',\n            color: '#054ba4'\n        };\n    }\n\n    /**\n     * Get variables from R environment\n     * @returns {Promise<Array<string>>} Array of R variable names\n     */\n    async getVariables() {\n        const var_text = await webRService.executeCode('ls()');\n        if(var_text?.output.includes(\"character(0)\")) {\n            return [];\n        }\n        const vars = var_text.output.replace(/\\[1\\]\\s*/, '')\n                             .split(/\"\\s+\"/)\n                             .map(c => c.replace(/\"/g,\"\"));\n        return vars;\n    }\n\n    /**\n     * Update highlighting (R syntax highlighting not implemented yet)\n     */\n    updateHighlighting() {\n        // TODO: Implement R syntax highlighting\n    }\n\n    /**\n     * Get execution bindings for R\n     * @returns {Object} R execution bindings\n     */\n    getExecutionBindings() {\n        return {\n            language: 'r',\n            executeCommand: 'Rscript',\n            packages: this.packages\n        };\n    }\n\n    /**\n     * Cleanup resources\n     */\n    onDestroy() {\n        this.isExecuting = false;\n        this.output = null;\n        \n        // Call parent cleanup\n        super.onDestroy();\n    }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "cellId",
          "lineNumber": 2,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Unique identifier for the cell"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        {
          "title": "param",
          "name": "cellIndex",
          "lineNumber": 3,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Position index of the cell in the notebook"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        {
          "title": "param",
          "name": "initialText",
          "lineNumber": 4,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Initial R code content"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "default": "''"
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": []
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Render the R cell - returns Svelte component instance"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "Render configuration with component and props",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 38,
              "column": 4,
              "index": 1368
            },
            "end": {
              "line": 41,
              "column": 7,
              "index": 1511
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 42,
                "column": 4,
                "index": 1516
              },
              "end": {
                "line": 50,
                "column": 5,
                "index": 1753
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/RCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "callbacks",
              "lineNumber": 42,
              "default": "{}"
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Render configuration with component and props"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "render",
          "kind": "function",
          "memberof": "RCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "RCellController",
              "kind": "class"
            },
            {
              "name": "render",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "RCellController#render"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Execute R code using WebR service"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "Execution result",
              "lineNumber": 2,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "Object"
                  }
                ]
              }
            }
          ],
          "loc": {
            "start": {
              "line": 52,
              "column": 4,
              "index": 1759
            },
            "end": {
              "line": 55,
              "column": 7,
              "index": 1862
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 56,
                "column": 4,
                "index": 1867
              },
              "end": {
                "line": 125,
                "column": 5,
                "index": 4296
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/RCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Execution result"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "Object"
                  }
                ]
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "execute",
          "kind": "function",
          "async": true,
          "memberof": "RCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "RCellController",
              "kind": "class"
            },
            {
              "name": "execute",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "RCellController#execute"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Start editing mode"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 127,
              "column": 4,
              "index": 4302
            },
            "end": {
              "line": 129,
              "column": 7,
              "index": 4339
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 130,
                "column": 4,
                "index": 4344
              },
              "end": {
                "line": 132,
                "column": 5,
                "index": 4397
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/RCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "startEditing",
          "kind": "function",
          "memberof": "RCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "RCellController",
              "kind": "class"
            },
            {
              "name": "startEditing",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "RCellController#startEditing"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Stop editing mode"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 134,
              "column": 4,
              "index": 4403
            },
            "end": {
              "line": 136,
              "column": 7,
              "index": 4441
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 137,
                "column": 4,
                "index": 4446
              },
              "end": {
                "line": 139,
                "column": 5,
                "index": 4499
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/RCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "stopEditing",
          "kind": "function",
          "memberof": "RCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "RCellController",
              "kind": "class"
            },
            {
              "name": "stopEditing",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "RCellController#stopEditing"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Clear cell content and reset state"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 141,
              "column": 4,
              "index": 4505
            },
            "end": {
              "line": 143,
              "column": 7,
              "index": 4558
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 144,
                "column": 4,
                "index": 4563
              },
              "end": {
                "line": 148,
                "column": 5,
                "index": 4664
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/RCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "clear",
          "kind": "function",
          "memberof": "RCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "RCellController",
              "kind": "class"
            },
            {
              "name": "clear",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "RCellController#clear"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Handle input events"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Input event",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Event"
              },
              "name": "event"
            }
          ],
          "loc": {
            "start": {
              "line": 150,
              "column": 4,
              "index": 4670
            },
            "end": {
              "line": 153,
              "column": 7,
              "index": 4750
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 154,
                "column": 4,
                "index": 4755
              },
              "end": {
                "line": 156,
                "column": 5,
                "index": 4821
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/RCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "event",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Input event"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Event"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "handleInput",
          "kind": "function",
          "memberof": "RCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "RCellController",
              "kind": "class"
            },
            {
              "name": "handleInput",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "RCellController#handleInput"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Get icon configuration for R cells"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "Icon configuration",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 158,
              "column": 4,
              "index": 4827
            },
            "end": {
              "line": 161,
              "column": 7,
              "index": 4924
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 162,
                "column": 4,
                "index": 4929
              },
              "end": {
                "line": 168,
                "column": 5,
                "index": 5074
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/RCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Icon configuration"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "getIconConfig",
          "kind": "function",
          "memberof": "RCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "RCellController",
              "kind": "class"
            },
            {
              "name": "getIconConfig",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "RCellController#getIconConfig"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Get variables from R environment"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "Array of R variable names",
              "lineNumber": 2,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "applications": [
                  {
                    "type": "TypeApplication",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Array"
                    },
                    "applications": [
                      {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "loc": {
            "start": {
              "line": 170,
              "column": 4,
              "index": 5080
            },
            "end": {
              "line": 173,
              "column": 7,
              "index": 5198
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 174,
                "column": 4,
                "index": 5203
              },
              "end": {
                "line": 183,
                "column": 5,
                "index": 5571
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/RCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Array of R variable names"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "applications": [
                  {
                    "type": "TypeApplication",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Array"
                    },
                    "applications": [
                      {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "getVariables",
          "kind": "function",
          "async": true,
          "memberof": "RCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "RCellController",
              "kind": "class"
            },
            {
              "name": "getVariables",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "RCellController#getVariables"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Update highlighting (R syntax highlighting not implemented yet)"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 185,
              "column": 4,
              "index": 5577
            },
            "end": {
              "line": 187,
              "column": 7,
              "index": 5659
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 188,
                "column": 4,
                "index": 5664
              },
              "end": {
                "line": 190,
                "column": 5,
                "index": 5741
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/RCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "updateHighlighting",
          "kind": "function",
          "memberof": "RCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "RCellController",
              "kind": "class"
            },
            {
              "name": "updateHighlighting",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "RCellController#updateHighlighting"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Get execution bindings for R"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": "R execution bindings",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 192,
              "column": 4,
              "index": 5747
            },
            "end": {
              "line": 195,
              "column": 7,
              "index": 5840
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 196,
                "column": 4,
                "index": 5845
              },
              "end": {
                "line": 202,
                "column": 5,
                "index": 6005
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/RCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "R execution bindings"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "getExecutionBindings",
          "kind": "function",
          "memberof": "RCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "RCellController",
              "kind": "class"
            },
            {
              "name": "getExecutionBindings",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "RCellController#getExecutionBindings"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Cleanup resources"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 204,
              "column": 4,
              "index": 6011
            },
            "end": {
              "line": 206,
              "column": 7,
              "index": 6047
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 207,
                "column": 4,
                "index": 6052
              },
              "end": {
                "line": 213,
                "column": 5,
                "index": 6200
              }
            },
            "file": "/Users/erikor/codyx/src/lib/classes/cells/RCellController.svelte.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "onDestroy",
          "kind": "function",
          "memberof": "RCellController",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "RCellController",
              "kind": "class"
            },
            {
              "name": "onDestroy",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "RCellController#onDestroy"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "RCellController",
        "kind": "class"
      }
    ],
    "namespace": "RCellController"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Lexicographic ordering key generator for sortable identifiers"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Generates lexicographically sortable keys that maintain order when sorted\nas strings. Useful for creating sortable identifiers, fractional indexing,\nand maintaining insertion order in databases."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 7,
        "type": null,
        "name": "LexaOrderKey"
      },
      {
        "title": "example",
        "description": "// Create lexicographic keys\nconst lexa = new LexaOrderKey();\n\n// Generate keys that sort correctly\nconst key1 = lexa.getKey();      // '1'\nconst key2 = lexa.getKey();      // '2' \nconst between = lexa.between(key1, key2); // '1g'\n\n// Keys sort lexicographically: ['1', '1g', '2']\n[key1, between, key2].sort(); // Maintains correct order\n\n// Custom alphabet\nconst custom = new LexaOrderKey('ABCDEFG');\nconst customKey = custom.getKey(); // 'B'",
        "lineNumber": 8
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 24,
        "column": 3,
        "index": 805
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 25,
          "column": 0,
          "index": 806
        },
        "end": {
          "line": 117,
          "column": 1,
          "index": 3393
        }
      },
      "file": "/Users/erikor/codyx/src/lib/classes/lexasort.js"
    },
    "augments": [],
    "examples": [
      {
        "description": "// Create lexicographic keys\nconst lexa = new LexaOrderKey();\n\n// Generate keys that sort correctly\nconst key1 = lexa.getKey();      // '1'\nconst key2 = lexa.getKey();      // '2' \nconst between = lexa.between(key1, key2); // '1g'\n\n// Keys sort lexicographically: ['1', '1g', '2']\n[key1, between, key2].sort(); // Maintains correct order\n\n// Custom alphabet\nconst custom = new LexaOrderKey('ABCDEFG');\nconst customKey = custom.getKey(); // 'B'"
      }
    ],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "LexaOrderKey",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Create a new LexaOrderKey generator"
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "param",
          "description": "Character set for key generation",
          "lineNumber": 2,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "string"
            }
          },
          "name": "alphabet",
          "default": "'0123456789abcdefghijklmnopqrstuvwxyz'"
        },
        {
          "title": "throws",
          "description": "When alphabet contains duplicate characters or is empty",
          "lineNumber": 3,
          "type": {
            "type": "NameExpression",
            "name": "Error"
          }
        }
      ],
      "loc": {
        "start": {
          "line": 28,
          "column": 2,
          "index": 899
        },
        "end": {
          "line": 32,
          "column": 5,
          "index": 1132
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 33,
            "column": 2,
            "index": 1135
          },
          "end": {
            "line": 41,
            "column": 3,
            "index": 1494
          }
        },
        "file": "/Users/erikor/codyx/src/lib/classes/lexasort.js",
        "sortKey": "!/Users/erikor/codyx/src/lib/classes/lexasort.js 00000033",
        "code": "{\n  static DEFAULT_ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'; \n\n  /**\n   * Create a new LexaOrderKey generator\n   * @param {string} [alphabet='0123456789abcdefghijklmnopqrstuvwxyz'] - Character set for key generation\n   * @throws {Error} When alphabet contains duplicate characters or is empty\n   */\n  constructor(alphabet = LexaOrderKey.DEFAULT_ALPHABET) {\n    const uniq = new Set(alphabet);\n    if (!alphabet || uniq.size !== alphabet.length) {\n      throw new Error('Alphabet must contain unique, non-empty characters');\n    }\n    this.alphabet = alphabet;\n    this.base = alphabet.length;\n    this._idx = new Map([...alphabet].map((ch, i) => [ch, i]));\n  }\n\n  _getCharIndex(ch) { \n    return this._idx.get(ch) ?? -1; \n  }\n\n  _isValidKey(key) { \n    return typeof key === 'string' && [...key].every(ch => this._getCharIndex(ch) !== -1); \n  }\n\n  first() { \n    return this.alphabet[0]; \n  }\n\n  mid() { \n    return this.alphabet[Math.floor(this.base / 2)]; \n  }\n\n  last() { \n    return this.alphabet[this.base - 1]; \n  }\n\n  between(before, after) {\n    const L = before ?? '';\n    const U = after ?? '';\n\n    if (before != null && !this._isValidKey(L)) {\n      throw new Error(`Invalid before key: ${before}`);\n    }\n    if (after != null && !this._isValidKey(U)) {\n      throw new Error(`Invalid after key: ${after}`);\n    }\n    if (L && U && L >= U) {\n      throw new Error(`Before key must be < after key: ${before} >= ${after}`);\n    }\n\n    let pos = 0, out = '';\n    \n    while (true) {\n      const lv = pos < L.length ? this._getCharIndex(L[pos]) : -1;\n      const uv = pos < U.length ? this._getCharIndex(U[pos]) : this.base;\n      \n      if (lv + 1 < uv) {\n        return out + this.alphabet[Math.floor((lv + uv) / 2)];\n      }\n      \n      if (lv + 1 === uv && lv === -1 && uv === 0) {\n        throw new Error(`No lexicographic space between \"${before}\" and \"${after}\"`);\n      }\n      \n      out += lv === -1 ? this.alphabet[0] : L[pos];\n      pos++;\n    }\n  }\n   \n  generateKeys(before, after, count) {\n    if (!Number.isInteger(count) || count < 1) {\n      throw new Error('Count must be a positive integer');\n    }\n    if (count === 1) return [this.between(before, after)];\n    \n    const keys = [];\n    let cur = before;\n    for (let i = 0; i < count; i++) {\n      const k = this.between(cur, after);\n      keys.push(k);\n      cur = k;\n    }\n    return keys;\n  }\n\n  static sortByOrderKey(items, keyProperty = 'orderKey') {\n    return [...items].sort((x, y) => \n      (x[keyProperty] ?? '').localeCompare(y[keyProperty] ?? '', 'en')\n    );\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "alphabet",
          "lineNumber": 2,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Character set for key generation"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "default": "'0123456789abcdefghijklmnopqrstuvwxyz'"
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "When alphabet contains duplicate characters or is empty"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "Error"
          }
        }
      ],
      "todos": [],
      "yields": []
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "LexaOrderKey",
        "kind": "class"
      }
    ],
    "namespace": "LexaOrderKey"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Default LexaOrderKey instance for convenient key generation"
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "type",
        "description": null,
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "LexaOrderKey"
        }
      },
      {
        "title": "example",
        "description": "import { LexaKey } from './lexasort.js';\n\nconst key1 = LexaKey.getKey();\nconst key2 = LexaKey.getKey();  \nconst between = LexaKey.between(key1, key2);",
        "lineNumber": 3
      }
    ],
    "loc": {
      "start": {
        "line": 119,
        "column": 0,
        "index": 3395
      },
      "end": {
        "line": 128,
        "column": 3,
        "index": 3667
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 129,
          "column": 0,
          "index": 3668
        },
        "end": {
          "line": 129,
          "column": 35,
          "index": 3703
        }
      },
      "file": "/Users/erikor/codyx/src/lib/classes/lexasort.js"
    },
    "augments": [],
    "examples": [
      {
        "description": "import { LexaKey } from './lexasort.js';\n\nconst key1 = LexaKey.getKey();\nconst key2 = LexaKey.getKey();  \nconst between = LexaKey.between(key1, key2);"
      }
    ],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "type": {
      "type": "NameExpression",
      "name": "LexaOrderKey"
    },
    "name": "LexaKey",
    "kind": "constant",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "LexaKey",
        "kind": "constant"
      }
    ],
    "namespace": "LexaKey"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Real-time collaborative text editing using operational transformation"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Provides live text synchronization between multiple clients using diff-match-patch\nalgorithm for operational transformation. Handles conflict resolution, typing\nindicators, and real-time updates via Supabase real-time channels."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 7,
        "type": null,
        "name": "LiveText"
      },
      {
        "title": "extends",
        "description": null,
        "lineNumber": 8,
        "type": null,
        "name": "EventTarget"
      },
      {
        "title": "example",
        "description": "// Create collaborative text editor\nconst liveText = await LiveText.create('Initial content', 'doc-123', supabase, 'user-456');\n\n// Listen for text changes\nliveText.addEventListener('textchange', (event) => {\n  console.log('Text updated:', event.detail.text);\n});\n\n// Update text (will sync to other clients)\nliveText.updateText('New content here');\n\n// Handle typing indicators\nliveText.addEventListener('typing', (event) => {\n  console.log('User typing:', event.detail.clientId);\n});",
        "lineNumber": 9
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0,
        "index": 48
      },
      "end": {
        "line": 28,
        "column": 3,
        "index": 959
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 29,
          "column": 0,
          "index": 960
        },
        "end": {
          "line": 259,
          "column": 1,
          "index": 9130
        }
      },
      "file": "/Users/erikor/codyx/src/lib/classes/live-text.js"
    },
    "augments": [
      {
        "title": "extends",
        "description": null,
        "lineNumber": 8,
        "type": null,
        "name": "EventTarget"
      }
    ],
    "examples": [
      {
        "description": "// Create collaborative text editor\nconst liveText = await LiveText.create('Initial content', 'doc-123', supabase, 'user-456');\n\n// Listen for text changes\nliveText.addEventListener('textchange', (event) => {\n  console.log('Text updated:', event.detail.text);\n});\n\n// Update text (will sync to other clients)\nliveText.updateText('New content here');\n\n// Handle typing indicators\nliveText.addEventListener('typing', (event) => {\n  console.log('User typing:', event.detail.clientId);\n});"
      }
    ],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "LiveText",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "LiveText",
        "kind": "class"
      }
    ],
    "namespace": "LiveText"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Notebook management class for Codyx interactive notebooks"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Handles notebook persistence, cell management, collaboration features,\nand integration with Supabase backend. Provides CRUD operations for\nnotebooks and manages sandbox/sharing functionality."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 7,
        "type": null,
        "name": "Notebook"
      },
      {
        "title": "example",
        "description": "// Create a new notebook\nconst notebook = await Notebook.create('my-notebook-slug');\n\n// Load an existing notebook\nconst existing = new Notebook('existing-slug');\nawait existing.load();\n\n// Add cells to the notebook\nconst cellId = await notebook.addCell('python', 'print(\"Hello World\")');\n\n// Save changes\nawait notebook.save();\n\n// Create a sandbox for experimentation\nconst sandbox = await notebook.createSandbox();",
        "lineNumber": 8
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0,
        "index": 187
      },
      "end": {
        "line": 30,
        "column": 3,
        "index": 958
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 31,
          "column": 0,
          "index": 959
        },
        "end": {
          "line": 614,
          "column": 1,
          "index": 20846
        }
      },
      "file": "/Users/erikor/codyx/src/lib/classes/notebook.js"
    },
    "augments": [],
    "examples": [
      {
        "description": "// Create a new notebook\nconst notebook = await Notebook.create('my-notebook-slug');\n\n// Load an existing notebook\nconst existing = new Notebook('existing-slug');\nawait existing.load();\n\n// Add cells to the notebook\nconst cellId = await notebook.addCell('python', 'print(\"Hello World\")');\n\n// Save changes\nawait notebook.save();\n\n// Create a sandbox for experimentation\nconst sandbox = await notebook.createSandbox();"
      }
    ],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "Notebook",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Create a new Notebook instance"
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "param",
          "description": "Unique identifier for the notebook",
          "lineNumber": 2,
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "name": "slug"
        },
        {
          "title": "param",
          "description": "Owner of the notebook (user ID or 'public')",
          "lineNumber": 3,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "string"
            }
          },
          "name": "owner",
          "default": "'public'"
        }
      ],
      "loc": {
        "start": {
          "line": 35,
          "column": 4,
          "index": 1031
        },
        "end": {
          "line": 39,
          "column": 7,
          "index": 1231
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 40,
            "column": 4,
            "index": 1236
          },
          "end": {
            "line": 50,
            "column": 5,
            "index": 1626
          }
        },
        "file": "/Users/erikor/codyx/src/lib/classes/notebook.js",
        "sortKey": "!/Users/erikor/codyx/src/lib/classes/notebook.js 00000040",
        "code": "{\n\n    static haikunator = new Haikunator();\n\n    /**\n     * Create a new Notebook instance\n     * @param {string} slug - Unique identifier for the notebook\n     * @param {string} [owner='public'] - Owner of the notebook (user ID or 'public')\n     */\n    constructor(slug, owner = 'public') {\n        this.slug = slug;\n        this.owner = owner ?? 'public';\n        this.id = null;\n        this.sandboxSlug = null;\n        this.mainSlug = null; // Will store the original slug when accessing via sandbox\n        this.isSandbox = false;\n        this.cellsStore = writable([]);\n        this.initialized = false;\n        this.channel = null;\n    }\n\n    // Helper to get current cells array when needed internally\n    get cells() {\n        let currentCells;\n        this.cellsStore.subscribe(cells => currentCells = cells)();\n        return currentCells;\n    }\n    \n    static async create(slug, owner = 'public') {\n        const nb = new Notebook(slug, owner);\n        await nb.#init();\n        return nb;\n    }\n\n    async checkIfSlugAvailable(newSlug) {\n        if (newSlug === this.slug) return true; // no change, so it's \"available\"\n        \n        // Check if slug exists in either 'slug' or 'sandbox_slug' columns\n        const { data, error } = await supabase\n            .from('notebooks')\n            .select('id')\n            .or(`slug.eq.${newSlug},sandbox_slug.eq.${newSlug}`);\n        if (error) {\n            throw error;\n        }\n        \n        return data && data.length === 0; // available if no rows found in either column\n    }\n    \n    async renameSandbox(newSlug) {\n        if (!newSlug) return;\n        \n        const isAvailable = await this.checkIfSlugAvailable(newSlug);\n        if (!isAvailable) {\n            throw new Error('That name is already taken');\n        }\n        \n        const { error } = await supabase\n            .from('notebooks')\n            .update({ sandbox_slug: newSlug })\n            .eq('id', this.id);\n            \n        if (error) throw error;\n        \n        this.sandboxSlug = newSlug;\n    }\n\n    async rename(newSlug) {\n        if (!newSlug) return;\n        \n        const isAvailable = await this.checkIfSlugAvailable(newSlug);\n        if (!isAvailable) {\n            throw new Error('That name is already taken');\n        }\n        \n        const { error } = await supabase\n            .from('notebooks')\n            .update({ slug: newSlug })\n            .eq('id', this.id);\n            \n        if (error) throw error;\n        \n        this.slug = newSlug;\n    }\n\n    async createCopy(newSlug) {\n        if (!newSlug) throw new Error('New slug is required for copy');\n        \n        const isAvailable = await this.checkIfSlugAvailable(newSlug);\n        if (!isAvailable) {\n            throw new Error('That name is already taken');\n        }\n\n        // Generate a unique sandbox slug for the new notebook\n        const sandboxSlug = await this.#generateUniqueSandboxSlug();\n        \n        // Create new notebook entry\n        const { data: newNotebookData, error: notebookError } = await supabase\n            .from('notebooks')\n            .insert({\n                slug: newSlug,\n                sandbox_slug: sandboxSlug,\n                owner: this.owner\n            })\n            .select()\n            .single();\n            \n        if (notebookError) throw notebookError;\n        \n        // Copy all cells from current notebook to new notebook\n        // Fetch cells directly from database to ensure we get all current data\n        const { data: currentCells, error: fetchError } = await supabase\n            .from('cells')\n            .select('content, type, position')\n            .eq('notebook_id', this.id)\n            .order('position');\n            \n        if (fetchError) {\n            // Clean up the notebook if cell fetching failed\n            await supabase.from('notebooks').delete().eq('id', newNotebookData.id);\n            throw fetchError;\n        }\n        \n        if (currentCells && currentCells.length > 0) {\n            const cellsToInsert = currentCells.map(cell => ({\n                notebook_id: newNotebookData.id,\n                content: cell.content,\n                type: cell.type,\n                position: cell.position\n            }));\n            \n            const { error: cellsError } = await supabase\n                .from('cells')\n                .insert(cellsToInsert);\n                \n            if (cellsError) {\n                // Clean up the notebook if cell copying failed\n                await supabase.from('notebooks').delete().eq('id', newNotebookData.id);\n                throw cellsError;\n            }\n        }\n        \n        // Copy completed successfully - the UI will navigate to the new notebook\n        return newSlug;\n    }\n\n    getSandboxUrl() {\n        if (!this.sandboxSlug) return null;\n        return `${window.location.origin}/notebooks?slug=${this.sandboxSlug}`;\n    }\n\n    getMainUrl() {\n        // Get the original notebook URL (not sandbox)\n        const mainSlug = this.isSandbox ? this.mainSlug : this.slug;\n        return `${window.location.origin}/notebooks?${mainSlug}`;\n    }\n\n    async #generateUniqueSandboxSlug() {\n        let attempts = 0;\n        const maxAttempts = 10;\n        \n        while (attempts < maxAttempts) {\n            const candidateSlug = Notebook.haikunator.haikunate({ tokenLength: 0 });\n            \n            // Check if this sandbox slug is available\n            const { data, error } = await supabase\n                .from('notebooks')\n                .select('id')\n                .or(`slug.eq.${candidateSlug},sandbox_slug.eq.${candidateSlug}`);\n                \n            if (error) throw error;\n            \n            if (data.length === 0) {\n                return candidateSlug; // Found a unique slug\n            }\n            \n            attempts++;\n        }\n        \n        // Fallback: add timestamp if we can't find a unique one\n        const timestamp = Date.now().toString(36);\n        return `${Notebook.haikunator.haikunate({ tokenLength: 0 })}-${timestamp}`;\n    }\n\n    async #init() {\n        if (this.initialized) return;\n        \n        // Try to load by slug (check both main slug and sandbox_slug columns)\n        const { data, error } = await supabase\n            .from('notebooks')\n            .select('id, slug, sandbox_slug, owner')\n            .or(`slug.eq.${this.slug},sandbox_slug.eq.${this.slug}`)\n            .maybeSingle();\n        \n        if (error) throw error;\n        \n        if (!data) {\n            // Not found: generate unique sandbox slug and create\n            const sandboxSlug = await this.#generateUniqueSandboxSlug();\n            \n            const { data: created, error: insErr } = await supabase\n                .from('notebooks')\n                .insert({ \n                    slug: this.slug, \n                    sandbox_slug: sandboxSlug,\n                    owner: this.owner \n                })\n                .select('id, slug, sandbox_slug, owner')\n                .single();\n            \n            if (insErr) {\n                if (insErr.code === '23505') {\n                    // Race: someone created it first ‚Üí reselect\n                    const { data: nb, error: reSelErr } = await supabase\n                        .from('notebooks')\n                        .select('id, slug, sandbox_slug, owner')\n                        .eq('slug', this.slug)\n                        .single();\n                    if (reSelErr) throw reSelErr;\n                    this.id = nb.id;\n                    this.sandboxSlug = nb.sandbox_slug;\n                } else {\n                    throw insErr;\n                }\n            } else {\n                this.id = created.id;\n                this.sandboxSlug = created.sandbox_slug;\n            }\n        } else {\n            this.id = data.id;\n            this.sandboxSlug = data.sandbox_slug;\n            \n            // Determine if we're accessing via sandbox slug\n            this.isSandbox = (this.slug === data.sandbox_slug);\n            \n            // Store the main slug for reference\n            this.mainSlug = data.slug;\n        }\n        \n        const cells = await this.getCells();\n        this.cellsStore.set(cells);\n        \n        if (cells.length === 0) {\n            await this.upsertCell({ content: 'Welcome to your new notebook!', type: 'md', position: 'h' });\n        }\n\n        if(!this.isSandbox) {\n            // Set up realtime channel for notebook-level changes\n            await this.#setupRealtimeChannel();\n        }\n\n        this.initialized = true;\n    }\n    \n    async #setupRealtimeChannel() {\n        const channelName = `notebook_${this.id}`;\n        \n        this.channel = supabase.channel(channelName)\n            .on('broadcast', { event: 'cell_sync' }, (payload) => {\n                this.#handleCellSync(payload.payload);\n            })\n        let sub = this.channel.subscribe();\n        \n        const maxRetries = 5;\n        let attempt = 0;\n        \n        while (attempt < maxRetries) {\n            try {\n                await this.#wait_for_join(sub);\n                console.log(`‚úÖ Realtime channel joined successfully${attempt > 0 ? ` (after ${attempt} retries)` : ''}`);\n                return; // Success! Exit the retry loop\n            } catch (error) {\n                attempt++;\n                console.log(`‚ö†Ô∏è Channel join attempt ${attempt} failed:`, error.message);\n                \n                if (attempt >= maxRetries) {\n                    console.error(`‚ùå Failed to join realtime channel after ${maxRetries} attempts`);\n                    throw new Error(`Failed to join realtime channel after ${maxRetries} attempts: ${error.message}`);\n                }\n                \n                await new Promise(resolve => setTimeout(resolve, 1000));\n                \n                try {\n                    this.channel?.unsubscribe();\n                } catch (cleanupError) {\n                    console.log('Note: Error during channel cleanup (expected):', cleanupError.message);\n                }\n                \n                this.channel = supabase.channel(channelName)\n                    .on('broadcast', { event: 'cell_sync' }, (payload) => {\n                        this.#handleCellSync(payload.payload);\n                    });\n                const newSub = this.channel.subscribe();\n                sub = newSub; \n            }\n        }\n    }\n\n    async #handleCellSync(data) {\n        const cells = await this.getCells();\n        this.cellsStore.set(cells);\n    }\n\n    #broadcastCellSync(action, cellId) {\n        if (!this.channel || this.isSandbox) return;\n        this.channel?.send({\n            type: 'broadcast',\n            event: 'cell_sync',\n            payload: { \n                action,\n                cellId,\n                notebookId: this.id \n            }\n        });\n    }\n\n    async #wait_for_join(sub) {\n        if (sub.state === 'joined') {\n            return sub;\n        }\n        return new Promise((resolve, reject) => {\n            const check = setInterval(() => {\n                if (sub.state === 'joined') {\n                    clearInterval(check);\n                    resolve(sub);\n                } else if (sub.state === 'closed' || sub.state === 'errored') {\n                    clearInterval(check);\n                    reject(new Error(`Channel failed: ${sub.state}`));\n                }\n            }, 200); // check every 200ms\n        });\n    }\n    \n    \n    /******************************************\n    * üóÑÔ∏è Notebook CRUD \n    ******************************************/\n    \n    async createNotebook() {\n        const { data, error } = await supabase\n            .from('notebooks')\n            .insert([{ slug: this.slug, owner: this.owner || 'public' }])\n            .select()\n            .single();\n        if (error) throw error;\n        const cells = await this.getCells();\n        this.cellsStore.set(cells);\n        if (cells.length === 0) {\n            let cell = { content: 'Welcome to your new notebook!', type: \"md\", position: 'h' };\n            this.upsertCell(cell);\n        }\n    }\n    \n    async deleteNotebook() {\n        if(this.isSandbox) return;\n\n        const { error } = await supabase\n            .from('notebooks')\n            .delete()\n            .eq('id', this.id);\n        if (error) throw error;\n        \n        // Clean up realtime channel\n        if (this.channel) {\n            await supabase.removeChannel(this.channel);\n            this.channel = null;\n        }\n        \n        this.cellsStore.set([]);\n        this.initialized = false;\n    }\n    \n    /******************************************\n    * üóÑÔ∏è Cell CRUD \n    ******************************************/\n    \n    async upsertCell(cell) {\n        if(this.isSandbox) {\n            // Generate ID for new cells in sandbox mode\n \n            return cell;\n        }\n        if (!this.id) throw new Error('Notebook not initialized');\n        if (!cell.position) throw new Error('Cell position is required');\n        const { data, error } = await supabase\n                    .from('cells')\n                    .upsert({ notebook_id: this.id, ...cell })\n                    .select()\n                    .single();\n        if (error) throw error;\n        \n        // Update the store instead of this.cells\n        this.cellsStore.update(cells => {\n            const index = cells.findIndex(obj => obj.id === cell.id);\n            const isNewCell = index === -1;\n            \n            if (isNewCell) {\n                cells.push(data); // hydrated with ID, timestamps\n                this.#broadcastCellSync('added', data.id);\n            } else {\n                cells[index] = data; // rehydrated with time stamps\n            }\n            return cells.sort((a, b) => a.position.localeCompare(b.position));\n        });\n        \n        return data;\n    }\n    \n    async getCells() {\n        const { data, error } = await supabase\n            .from('cells')\n            .select('*')\n            .eq('notebook_id', this.id)\n            .order('position', { ascending: true });\n        if (error) throw error;\n        return data;\n    }\n    \n    async deleteCell(id) {\n        if(this.isSandbox) return;\n\n        const { error } = await supabase\n            .from('cells')\n            .delete()\n            .eq('id', id);\n        if (error) throw error;\n        \n        this.#broadcastCellSync('deleted', id);        \n        this.cellsStore.update(cells => cells.filter(c => c.id !== id));\n    }  \n\n\n    /******************************************\n    * ‚§µ Insert/Move Cells by LexaKey\n    ******************************************/\n    \n    async insertCellAtIndex(index, cell) {\n        if (!cell) throw new Error('Cell not found');\n        if (index < 0 || index > this.cells.length) {\n            throw new Error('Index out of bounds');\n        }\n        \n        let after = index === 0 ? null : this.cells[index - 1].position;\n        let before = index === this.cells.length ? null : this.cells[index].position;\n        const newPosition = LexaKey.between(after, before);\n        cell.position = newPosition;\n        \n        await this.upsertCell(cell); // sorts as side effect\n        return cell;\n    }\n\n    async insertCell(cell, before, after) { // before and after are cells\n        return this.moveCell(cell, before, after); // just a convenience alias\n    }\n\n    async insertCellAfter(cell, after) { // after is a cell\n        const afterIndex = this.cells.findIndex(c => c.id === after.id); \n        return this.insertCellAtIndex(afterIndex + 1, cell);\n    }\n\n    async insertCellBefore(cell, before) { // before is a cell\n        const beforeIndex = this.cells.findIndex(c => c.id === before.id); \n        return this.insertCellAtIndex(beforeIndex, cell);\n    }\n    \n    async moveCell(cell, before, after) { // before and after are cells\n        if (!cell) throw new Error('Cell not found');\n        if(!before && !after) return cell; // no move\n\n        const oldPosition = cell.position;\n        const newPosition = LexaKey.between(before?.position || null, after?.position || null);\n        cell.position = newPosition;\n        \n        await this.upsertCell(cell); // sorts as side effect - this will NOT broadcast since it's an update\n\n        if(!this.isSandbox) {\n            this.#broadcastCellSync('moved', cell.id);\n        }\n\n        return cell;\n    }\n\n    async pushCell(cell) {\n        if (!cell) throw new Error('Must provide cell to pushCell function');\n        if (this.cells.length === 0) {\n            cell.position = LexaKey.middle();\n        } else {\n            let last = this.cells[this.cells.length - 1];\n            const newPosition = LexaKey.between(last.position, null);\n            cell.position = newPosition;\n        }\n        await this.upsertCell(cell); // sorts as side effect and handles sandbox mode\n        return cell;\n    }\n\n    async moveCellDown(cellId) {\n        const cell = this.cells.find(c => c.id === cellId);\n        if (!cell) throw new Error('Cell not found');\n        const index = this.cells.findIndex(c => c.id === cellId);\n        let after = this.cells[index + 1].position;\n        let before = index + 2 < this.cells.length ? this.cells[index + 2].position : null;\n        const newPosition = LexaKey.between(after, before);\n        cell.position = newPosition;\n        await this.upsertCell(cell); // sorts as side effect\n\n        if (!this.isSandbox) { // ‚Üê Add this check\n            this.#broadcastCellSync('moved', cell.id);\n        }\n        return cell;\n    }\n\n    async moveCellUp(cellId) {\n        const cell = this.cells.find(c => c.id === cellId);\n        if (!cell) throw new Error('Cell not found');\n        const index = this.cells.findIndex(c => c.id === cellId);\n        let after = index - 2 >= 0 ? this.cells[index - 2].position : null;\n        let before = this.cells[index - 1].position;\n        const newPosition = LexaKey.between(after, before);\n        cell.position = newPosition;\n        await this.upsertCell(cell);\n\n        if (!this.isSandbox) { // ‚Üê Add this check\n            this.#broadcastCellSync('moved', cell.id);\n        }\n        return cell;\n    }\n\n    /******************************************\n    * üì• Import functionality\n    ******************************************/\n    \n    async importCells(cells) {\n        if (!Array.isArray(cells)) {\n            throw new Error('Cells must be an array');\n        }\n        \n        if (cells.length === 0) {\n            return;\n        }\n        \n        // Clear existing cells first\n        const existingCells = this.cells;\n        for (const cell of existingCells) {\n            await this.deleteCell(cell.id);\n        }\n        \n        // Add imported cells with proper positioning\n        let lastPosition = null;\n        \n        for (let i = 0; i < cells.length; i++) {\n            const cellData = cells[i];\n            let position;\n            \n            if (i === 0) {\n                // First cell gets middle position\n                position = LexaKey.mid();\n            } else {\n                // Subsequent cells go after the previous one\n                position = LexaKey.between(lastPosition, null);\n            }\n            \n            await this.upsertCell({\n                content: cellData.content,\n                type: cellData.type,\n                position: position\n            });\n            \n            // Track the position for the next iteration\n            lastPosition = position;\n        }\n    }\n\n    // Clean up resources when notebook instance is no longer needed\n    async destroy() {\n        if (this.channel) {\n            await supabase.removeChannel(this.channel);\n            this.channel = null;\n        }\n        \n        // Reset the notebook state\n        this.initialized = false;\n        this.cellsStore.set([]);\n    }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "slug",
          "lineNumber": 2,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Unique identifier for the notebook"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        {
          "title": "param",
          "name": "owner",
          "lineNumber": 3,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Owner of the notebook (user ID or 'public')"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "default": "'public'"
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": []
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "Notebook",
        "kind": "class"
      }
    ],
    "namespace": "Notebook"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Python runtime service using Pyodide WebAssembly"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Manages Python code execution in the browser via Pyodide. Handles package\ninstallation, variable tracking, import suggestions, and provides a complete\nPython environment without server dependencies."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 7,
        "type": null,
        "name": "PyodideService"
      },
      {
        "title": "example",
        "description": "// Initialize Python environment\nconst pyodide = new PyodideService();\nawait pyodide.initialize();\n\n// Execute Python code\nconst result = await pyodide.runPython('print(\"Hello from Python!\")');\nconsole.log(result.output); // \"Hello from Python!\"\n\n// Install packages\nawait pyodide.installPackage('numpy');\n\n// Get available variables for syntax highlighting\nconst variables = pyodide.getGlobalVariables();\nconsole.log(variables); // { 'numpy': {...}, ... }",
        "lineNumber": 8
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0,
        "index": 40
      },
      "end": {
        "line": 26,
        "column": 3,
        "index": 851
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 27,
          "column": 0,
          "index": 852
        },
        "end": {
          "line": 702,
          "column": 1,
          "index": 29928
        }
      },
      "file": "/Users/erikor/codyx/src/lib/classes/pyodide-service.js"
    },
    "augments": [],
    "examples": [
      {
        "description": "// Initialize Python environment\nconst pyodide = new PyodideService();\nawait pyodide.initialize();\n\n// Execute Python code\nconst result = await pyodide.runPython('print(\"Hello from Python!\")');\nconsole.log(result.output); // \"Hello from Python!\"\n\n// Install packages\nawait pyodide.installPackage('numpy');\n\n// Get available variables for syntax highlighting\nconst variables = pyodide.getGlobalVariables();\nconsole.log(variables); // { 'numpy': {...}, ... }"
      }
    ],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "PyodideService",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Create a new PyodideService instance\nInitializes the Python runtime manager with empty state"
              }
            ]
          }
        ]
      },
      "tags": [],
      "loc": {
        "start": {
          "line": 28,
          "column": 4,
          "index": 879
        },
        "end": {
          "line": 31,
          "column": 7,
          "index": 997
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 32,
            "column": 4,
            "index": 1002
          },
          "end": {
            "line": 38,
            "column": 5,
            "index": 1200
          }
        },
        "file": "/Users/erikor/codyx/src/lib/classes/pyodide-service.js",
        "sortKey": "!/Users/erikor/codyx/src/lib/classes/pyodide-service.js 00000032",
        "code": "{\n    /**\n     * Create a new PyodideService instance\n     * Initializes the Python runtime manager with empty state\n     */\n    constructor() {\n        this.pyodide = null;\n        this.initPromise = null;\n        this.isInitialized = false;\n        this.globalVariables = {};\n        this.variableCallbacks = new Set();\n    }\n\n    async initialize() {\n        // Return existing promise if already initializing\n        if (this.initPromise) {\n            return this.initPromise;\n        }\n\n        // Return existing instance if already initialized\n        if (this.pyodide && this.isInitialized) {\n            return this.pyodide;\n        }\n\n        // Create new initialization promise\n        this.initPromise = this._doInitialize();\n        return this.initPromise;\n    }\n\n    async _doInitialize() {\n        try {\n            \n            this.pyodide = await loadPyodide({\n                indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.28.3/full/\"\n            });\n            \n            // Load only essential packages for fast startup\n            await this.pyodide.loadPackage(['micropip']);\n            \n            // Set up global output capture system with lazy matplotlib loading\n            await this.pyodide.runPython(`\n                import sys\n                from io import StringIO\n                import traceback\n                \n                class OutputCapture:\n                    def __init__(self):\n                        self.output = StringIO()\n                        self.original_stdout = sys.stdout\n                        self.original_stderr = sys.stderr\n                    \n                    def start_capture(self):\n                        self.output = StringIO()\n                        sys.stdout = self.output\n                        sys.stderr = self.output\n                    \n                    def stop_capture(self):\n                        sys.stdout = self.original_stdout\n                        sys.stderr = self.original_stderr\n                        result = self.output.getvalue()\n                        self.output.close()\n                        return result\n\n                _output_capture = OutputCapture()\n                \n                # Global flag to track matplotlib loading state\n                _matplotlib_loaded = False\n                _matplotlib_loading = False\n                \n                async def ensure_matplotlib():\n                    \"\"\"Lazy load matplotlib only when needed\"\"\"\n                    global _matplotlib_loaded, _matplotlib_loading\n                    \n                    if _matplotlib_loaded:\n                        return True\n                    \n                    if _matplotlib_loading:\n                        # Wait for ongoing load to complete\n                        import asyncio\n                        while _matplotlib_loading:\n                            await asyncio.sleep(0.1)\n                        return _matplotlib_loaded\n                    \n                    try:\n                        _matplotlib_loading = True\n                        print(\"üì¶ Loading matplotlib for plotting support...\")\n                        \n                        # Check if matplotlib is already imported\n                        if 'matplotlib' not in sys.modules:\n                            import micropip\n                            await micropip.install('matplotlib')\n                        \n                        import matplotlib\n                        matplotlib.use('Agg')  # Use non-interactive backend\n                        import matplotlib.pyplot as plt\n                        import base64\n                        from io import BytesIO\n                        import warnings\n                        \n                        # Suppress the non-interactive backend warning\n                        warnings.filterwarnings('ignore', message='.*non-interactive.*', category=UserWarning)\n                        \n                        # Store in globals for capture function\n                        globals()['plt'] = plt\n                        globals()['base64'] = base64\n                        globals()['BytesIO'] = BytesIO\n                        \n                        _matplotlib_loaded = True\n                        print(\"‚úÖ Matplotlib ready for plotting!\")\n                        return True\n                        \n                    except Exception as e:\n                        print(f\"‚ùå Failed to load matplotlib: {e}\")\n                        return False\n                    finally:\n                        _matplotlib_loading = False\n                \n                def capture_matplotlib():\n                    \"\"\"Capture current matplotlib figure as base64 image\"\"\"\n                    if not _matplotlib_loaded:\n                        return \"\"\n                    \n                    try:\n                        plt = globals().get('plt')\n                        if plt and plt.get_fignums():  # Check if there are active figures\n                            BytesIO = globals().get('BytesIO')\n                            base64 = globals().get('base64')\n                            \n                            buf = BytesIO()\n                            plt.savefig(buf, format='png', bbox_inches='tight', dpi=100)\n                            buf.seek(0)\n                            img_base64 = base64.b64encode(buf.read()).decode('utf-8')\n                            plt.close('all')  # Close all figures\n                            return f\"__MATPLOTLIB_IMG__{img_base64}__END_IMG__\"\n                    except Exception as e:\n                        print(f\"Warning: Failed to capture plot: {e}\")\n                    \n                    return \"\"\n                \n                # Alternative: Support for lighter plotting libraries\n                def capture_plotly():\n                    \"\"\"Capture Plotly figures if available\"\"\"\n                    try:\n                        import plotly.graph_objects as go\n                        import plotly.io as pio\n                        # Note: Plotly generates HTML/JS, not images\n                        # This would need different handling in the UI\n                        return \"\"\n                    except ImportError:\n                        return \"\"\n                \n                # Function to get user-defined variables\n                def get_user_variables():\n                    \"\"\"Get user-defined variables with their types and values\"\"\"\n                    import builtins\n                    import types\n                    import sys\n                    \n                    user_vars = {}\n                    \n                    try:\n                        # Get current globals - avoid creating dict() which might cause JsProxy issues\n                        current_globals = globals()\n                        \n                        # Built-in names to exclude\n                        try:\n                            builtin_names = set(dir(builtins))\n                        except:\n                            builtin_names = set()\n                            \n                        system_names = {\n                            '__name__', '__doc__', '__package__', '__loader__', '__spec__',\n                            '__annotations__', '__builtins__', '__file__', '__cached__',\n                            'sys', 'traceback', 'StringIO', 'OutputCapture', '_output_capture',\n                            '_matplotlib_loaded', '_matplotlib_loading', 'ensure_matplotlib',\n                            'capture_matplotlib', 'capture_plotly', 'get_user_variables',\n                            'plt', 'base64', 'BytesIO', '__user_code__', 'builtins', 'types'\n                        }\n                        \n                        # Very defensive iteration over globals\n                        try:\n                            # Get keys as a list very carefully\n                            keys_to_check = []\n                            for key in current_globals:\n                                try:\n                                    # Ensure key is a string and safe to use\n                                    if isinstance(key, str) and key not in system_names:\n                                        keys_to_check.append(key)\n                                except:\n                                    continue\n                        except:\n                            # If we can't iterate, return empty\n                            return {}\n                        \n                        # Process each key safely\n                        for name in keys_to_check:\n                            try:\n                                # Skip system variables and built-ins\n                                if (name.startswith('_') or \n                                    name in builtin_names or \n                                    name in system_names):\n                                    continue\n                                \n                                # Get value very safely\n                                try:\n                                    value = current_globals[name]\n                                except:\n                                    continue\n                                    \n                                if value is None:\n                                    continue\n                                \n                                # Skip modules and functions\n                                try:\n                                    if (isinstance(value, types.ModuleType) or\n                                        callable(value)):\n                                        continue\n                                except:\n                                    continue\n                                \n                                # Get type very safely\n                                try:\n                                    var_type = type(value).__name__\n                                    # Skip problematic types immediately\n                                    if var_type in ['JsProxy', 'JsMethod', 'JsBuffer', 'JsException']:\n                                        continue\n                                except:\n                                    continue\n                                \n                                # Get string representation very safely\n                                try:\n                                    str_value = str(value)\n                                    if len(str_value) > 100:\n                                        str_value = str_value[:97] + '...'\n                                    elif '\\\\n' in str_value:\n                                        lines = str_value.split('\\\\n')\n                                        str_value = lines[0] + ('...' if len(lines) > 1 else '')\n                                except:\n                                    str_value = f\"<{var_type} object>\"\n                                \n                                # Only add if we have valid string name\n                                if isinstance(name, str) and name:\n                                    user_vars[name] = {\n                                        'type': var_type,\n                                        'value': str_value\n                                    }\n                                \n                            except Exception as e:\n                                # Skip any variable that causes any error\n                                continue\n                        \n                    except Exception as e:\n                        # Return empty dict if there's any global error\n                        return {}\n                    \n                    return user_vars\n                \n                # Check what's available\n                import sys\n                print(f\"üì¶ Python {sys.version}\")\n                \n                available_modules = ['micropip']\n                for module in ['numpy', 'pandas']:\n                    try:\n                        __import__(module)\n                        available_modules.append(module)\n                    except ImportError:\n                        pass\n                \n                print(f\"üìã Pre-loaded modules: {available_modules}\")\n                print(\"‚úÖ Ready for Python code execution!\")\n                print(\"üí° Tip: Import any package and get auto-install prompts from 250+ Pyodide packages!\")\n            `);\n            \n            this.isInitialized = true;\n            \n            return this.pyodide;\n            \n        } catch (error) {\n            console.error('‚ùå Failed to initialize Pyodide:', error);\n            this.pyodide = null;\n            this.initPromise = null;\n            this.isInitialized = false;\n            throw error;\n        }\n    }\n\n    async executeCode(code, onProgress = null) {\n        const py = await this.initialize();\n        if (!py) {\n            throw new Error('Pyodide not available');\n        }\n\n        try {\n            // Start capturing output\n            await py.runPython('_output_capture.start_capture()');\n            \n            let output = '';\n            let error = null;\n            let hasPlot = false;\n            let plotData = null;\n\n            try {\n                \n                // Check if code uses matplotlib and auto-load if needed\n                const usesMatplotlib = /\\b(matplotlib|plt\\.|pyplot)\\b/.test(code) || \n                                     /\\bfrom\\s+matplotlib/.test(code) ||\n                                     /\\bimport\\s+matplotlib/.test(code);\n                \n                if (usesMatplotlib) {\n                        if (onProgress) onProgress('üìä Loading matplotlib for plotting support... (first time may take a moment)');\n                    await py.runPythonAsync('await ensure_matplotlib()');\n                    if (onProgress) onProgress('‚úÖ Matplotlib ready - executing your code...');\n                }\n                \n                // Check for micropip installations and provide progress feedback\n                const hasMicropipInstall = /micropip\\.install/.test(code);\n                if (hasMicropipInstall && onProgress) {\n                    // Extract package names from micropip.install calls with better regex\n                    let packages = [];\n                    \n                    // Match single package: micropip.install('package') or micropip.install(\"package\")\n                    const singleMatches = code.match(/micropip\\.install\\s*\\(\\s*['\"`]([^'\"`]+)['\"`]\\s*\\)/g);\n                    if (singleMatches) {\n                        singleMatches.forEach(match => {\n                            const pkg = match.match(/['\"`]([^'\"`]+)['\"`]/)[1];\n                            packages.push(pkg);\n                        });\n                    }\n                    \n                    // Match array format: micropip.install(['pkg1', 'pkg2'])\n                    const arrayMatches = code.match(/micropip\\.install\\s*\\(\\s*\\[([^\\]]+)\\]\\s*\\)/g);\n                    if (arrayMatches) {\n                        arrayMatches.forEach(match => {\n                            const arrayContent = match.match(/\\[([^\\]]+)\\]/)[1];\n                            const arrayPackages = arrayContent.split(',')\n                                .map(pkg => pkg.trim().replace(/['\"`]/g, ''))\n                                .filter(pkg => pkg);\n                            packages = packages.concat(arrayPackages);\n                        });\n                    }\n                    \n                    if (packages.length > 0) {\n                        const uniquePackages = [...new Set(packages)];\n                        if (uniquePackages.length === 1) {\n                            onProgress(`üì¶ Installing ${uniquePackages[0]}... (this may take a moment)`);\n                        } else {\n                            onProgress(`üì¶ Installing ${uniquePackages.length} packages: ${uniquePackages.join(', ')}... (this may take a moment)`);\n                        }\n                    } else {\n                        onProgress('üì¶ Installing packages... (this may take a moment)');\n                    }\n                }\n                \n                // Check if code contains await - if so, use runPythonAsync\n                const hasAwait = /\\bawait\\s+/.test(code);\n                \n                if (hasAwait) {\n                    // Execute async code directly using runPythonAsync\n                    await py.runPythonAsync(code);\n                } else {\n                    // Execute regular code using runPython\n                    await py.runPython(code);\n                }\n                \n                // Capture any matplotlib plots\n                const plotOutput = await py.runPython('capture_matplotlib()');\n                \n                // Get captured text output\n                const capturedOutput = await py.runPython('_output_capture.stop_capture()');\n                \n                // Check if the output contains error information\n                if (capturedOutput && capturedOutput.includes('Traceback')) {\n                    // Extract just the error line from the traceback\n                    const lines = capturedOutput.split('\\n');\n                    const errorLine = lines.find(line => \n                        line.includes('Error:') || \n                        line.match(/^\\w+Error:/) ||\n                        line.match(/^\\w+Exception:/)\n                    );\n                    \n                    if (errorLine) {\n                        error = errorLine.trim();\n                        output = ''; // Clear output since this was an error\n                    } else {\n                        // Fallback: use the last non-empty line\n                        const nonEmptyLines = lines.filter(line => line.trim());\n                        if (nonEmptyLines.length > 0) {\n                            error = nonEmptyLines[nonEmptyLines.length - 1].trim();\n                            output = '';\n                        }\n                    }\n                } else {\n                    // Process plot output\n                    if (plotOutput && plotOutput.includes('__MATPLOTLIB_IMG__')) {\n                        hasPlot = true;\n                        plotData = plotOutput.replace('__MATPLOTLIB_IMG__', '').replace('__END_IMG__', '');\n                    }\n                    \n                    output = capturedOutput;\n                }\n                \n                // If no output, try to get the result of the last expression\n                if (!output.trim() && !hasPlot) {\n                    try {\n                        const result = await py.runPython(`\nimport ast\n\n# Parse the code to find the last expression\ntry:\n    tree = ast.parse(__user_code__)\n    if tree.body and isinstance(tree.body[-1], ast.Expr):\n        # Last statement is an expression, evaluate it\n        result = eval(compile(ast.Expression(tree.body[-1].value), '<string>', 'eval'))\n        if result is not None:\n            str(result)\n        else:\n            \"\"\n    else:\n        \"\"\nexcept:\n    \"\"\n                        `);\n                        if (result) output = result;\n                    } catch (evalError) {\n                        // Ignore evaluation errors for expressions\n                    }\n                }\n\n            } catch (executionError) {\n                // Stop capturing output to get any partial output\n                let capturedOutput = '';\n                try {\n                    capturedOutput = await py.runPython('_output_capture.stop_capture()');\n                } catch (cleanupError) {\n                    // Ignore cleanup errors\n                }\n                \n                // Only clean up on severe errors that might contaminate the environment\n                try {\n                    const isRecursionError = executionError.message?.includes('RecursionError') || \n                                           executionError.message?.includes('maximum recursion depth') ||\n                                           String(executionError).includes('RecursionError');\n                    \n                    if (isRecursionError) {\n                        console.log('üî• Recursion error detected - suggesting manual reset');\n                        // Don't auto-cleanup, let user decide to reset manually\n                    }\n                } catch (cleanupError) {\n                    console.log('‚ö†Ô∏è Error analysis failed:', cleanupError);\n                }\n                \n                // Extract meaningful Python error message\n                let errorMessage = executionError.message || String(executionError) || 'Python execution failed';\n                \n                // Clean up Pyodide wrapper text and extract the actual Python error\n                if (errorMessage.includes('PythonError:')) {\n                    // Extract everything after \"PythonError: \"\n                    errorMessage = errorMessage.replace(/^.*PythonError:\\s*/, '');\n                }\n                \n                // If it's still just \"PythonError\", try to get more details from the string representation\n                if (errorMessage === 'PythonError' || errorMessage.trim() === '') {\n                    const fullError = String(executionError);\n                    // Look for actual Python error patterns\n                    const pythonErrorMatch = fullError.match(/(SyntaxError|NameError|IndentationError|TypeError|ValueError|AttributeError|ImportError|ModuleNotFoundError)[^:]*:.*$/m);\n                    if (pythonErrorMatch) {\n                        errorMessage = pythonErrorMatch[0];\n                    } else {\n                        errorMessage = fullError || 'Unknown Python error';\n                    }\n                }\n                \n                \n                // Handle import errors specifically\n                if (errorMessage.includes('ModuleNotFoundError') || errorMessage.includes('ImportError')) {\n                    const match = errorMessage.match(/No module named '([^']+)'/);\n                    if (match) {\n                        const moduleName = match[1];\n                        if (['matplotlib', 'numpy', 'pandas'].includes(moduleName)) {\n                            errorMessage = `Module '${moduleName}' should be available. Try reloading the page or check the exact import name.`;\n                        } else {\n                            errorMessage = `Module '${moduleName}' not found. Try installing it with:\\n\\nimport micropip\\nawait micropip.install('${moduleName}')`;\n                        }\n                    }\n                }\n                \n                // Enhanced error messages for specific cases\n                if (errorMessage?.includes('RecursionError') || errorMessage?.includes('maximum recursion depth')) {\n                    error = `${errorMessage}\\n\\nüí° Tip: Click the \"üßπ Reset\" button to completely restart the Python environment.`;\n                } else {\n                    error = errorMessage || 'Python execution error';\n                }\n                \n                output = capturedOutput; // Include any partial output\n            }\n\n            // Get user variables after execution (even if there was an error)\n            let userVariables = {};\n            try {\n                const varResult = await py.runPython('get_user_variables()');\n                // Ensure varResult is a proper object and not a JsProxy\n                if (varResult && typeof varResult === 'object') {\n                    userVariables = varResult.toJs ? varResult.toJs() : varResult;\n                } else {\n                    userVariables = {};\n                }\n            } catch (varError) {\n                userVariables = {};\n            }\n            \n            // Update global variables and notify all subscribers\n            this.updateGlobalVariables(userVariables);\n            \n            return { \n                output: output || null, \n                error: error,\n                hasPlot: hasPlot,\n                plotData: plotData,\n                userVariables: userVariables\n            };\n\n        } catch (err) {\n            let errorMessage = err.message || 'Unknown error';\n            \n            // Still try to get user variables even after a fatal error\n            let userVariables = {};\n            try {\n                const py = await this.initialize();\n                const varResult = await py.runPython('get_user_variables()');\n                if (varResult && typeof varResult === 'object') {\n                    userVariables = varResult.toJs ? varResult.toJs() : varResult;\n                } else {\n                    userVariables = {};\n                }\n            } catch (varError) {\n                // Ignore variable retrieval errors in error case\n                userVariables = {};\n            }\n            \n            // Update global variables even in error case\n            this.updateGlobalVariables(userVariables);\n            \n            return { \n                output: null, \n                error: errorMessage, \n                hasPlot: false, \n                plotData: null,\n                userVariables: userVariables\n            };\n        }\n    }\n\n    // Get current user-defined variables\n    async getUserVariables() {\n        const py = await this.initialize();\n        if (!py) {\n            return {};\n        }\n\n        try {\n            const varResult = await py.runPython('get_user_variables()');\n            if (varResult && typeof varResult === 'object') {\n                return varResult.toJs ? varResult.toJs() : varResult;\n            } else {\n                return {};\n            }\n        } catch (error) {\n            return {};\n        }\n    }\n\n    // Subscribe to variable changes\n    subscribeToVariables(callback) {\n        this.variableCallbacks.add(callback);\n        // Immediately call with current variables\n        callback(this.globalVariables);\n        \n        // Return unsubscribe function\n        return () => {\n            this.variableCallbacks.delete(callback);\n        };\n    }\n\n    // Update global variables and notify subscribers\n    updateGlobalVariables(variables) {\n        this.globalVariables = variables || {};\n        // Notify all subscribers\n        this.variableCallbacks.forEach(callback => {\n            try {\n                callback(this.globalVariables);\n            } catch (error) {\n                console.error('Error in variable callback:', error);\n            }\n        });\n    }\n\n    // Get current global variables\n    getGlobalVariables() {\n        return this.globalVariables;\n    }\n\n    // Manual cleanup method for users - NUCLEAR RESET\n    async resetEnvironment() {\n        \n        try {\n            // Completely destroy the current Pyodide instance\n            this.pyodide = null;\n            this.isInitialized = false;\n            this.initPromise = null;\n            \n            // Clear global variables and notify subscribers\n            this.updateGlobalVariables({});\n            \n            // Force garbage collection to clean up memory\n            if (typeof window !== 'undefined' && window.gc) {\n                window.gc();\n            }\n            \n            \n            // Reinitialize from scratch (like a fresh page load)\n            await this.initialize();\n            \n            return { \n                error: null, \n                hasPlot: false, \n                plotData: null \n            };\n            \n        } catch (error) {\n            return { \n                output: null, \n                error: `Reset failed: ${error.message}. Try reloading the page.`, \n                hasPlot: false, \n                plotData: null \n            };\n        }\n    }\n\n    // Optional: Warm up Pyodide in the background\n    warmUp() {\n        if (!this.initPromise && !this.isInitialized) {\n            this.initialize().catch(err => {\n                console.log('Pre-warm failed, will try again when needed:', err.message);\n            });\n        }\n    }\n\n    // Legacy cleanup method - now deprecated in favor of nuclear reset\n    // This method is kept for backwards compatibility but does minimal cleanup\n    async cleanNamespace(aggressive = false) {\n        return;\n        // Do nothing - nuclear reset is the preferred method now\n    }\n    \n    // Get initialization status for UI feedback\n    // Memory cleanup method\n    async cleanup() {\n        if (this.pyodide) {\n            try {\n                // Just destroy the engine completely\n                this.pyodide = null;\n                this.isInitialized = false;\n                this.initPromise = null;\n            } catch (error) {\n                return;\n            }\n        }\n    }\n\n    getStatus() {\n        if (this.isInitialized) return 'ready';\n        if (this.initPromise) return 'initializing';\n        return 'not-started';\n    }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": []
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "PyodideService",
        "kind": "class"
      }
    ],
    "namespace": "PyodideService"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "R statistical computing service using WebR WebAssembly"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Provides R statistical computing capabilities in the browser via WebR.\nHandles R code execution, package management, data analysis, and statistical\ncomputations without requiring an R server."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 7,
        "type": null,
        "name": "WebRService"
      },
      {
        "title": "example",
        "description": "// Initialize R environment\nconst webR = new WebRService();\nawait webR.initialize();\n\n// Execute R code\nconst result = await webR.executeCode('data <- c(1,2,3,4,5); mean(data)');\nconsole.log(result.output); // [1] 3\n\n// Install R packages\nawait webR.installPackages(['ggplot2', 'dplyr']);\n\n// Check available packages\nconst packages = await webR.getInstalledPackages();\nconsole.log(packages); // ['base', 'stats', 'ggplot2', ...]",
        "lineNumber": 8
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0,
        "index": 30
      },
      "end": {
        "line": 26,
        "column": 3,
        "index": 812
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 27,
          "column": 0,
          "index": 813
        },
        "end": {
          "line": 229,
          "column": 1,
          "index": 7971
        }
      },
      "file": "/Users/erikor/codyx/src/lib/classes/webr-service.js"
    },
    "augments": [],
    "examples": [
      {
        "description": "// Initialize R environment\nconst webR = new WebRService();\nawait webR.initialize();\n\n// Execute R code\nconst result = await webR.executeCode('data <- c(1,2,3,4,5); mean(data)');\nconsole.log(result.output); // [1] 3\n\n// Install R packages\nawait webR.installPackages(['ggplot2', 'dplyr']);\n\n// Check available packages\nconst packages = await webR.getInstalledPackages();\nconsole.log(packages); // ['base', 'stats', 'ggplot2', ...]"
      }
    ],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "WebRService",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Create a new WebRService instance\nInitializes the R runtime manager with default state"
              }
            ]
          }
        ]
      },
      "tags": [],
      "loc": {
        "start": {
          "line": 28,
          "column": 4,
          "index": 837
        },
        "end": {
          "line": 31,
          "column": 7,
          "index": 949
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 32,
            "column": 4,
            "index": 954
          },
          "end": {
            "line": 36,
            "column": 5,
            "index": 1071
          }
        },
        "file": "/Users/erikor/codyx/src/lib/classes/webr-service.js",
        "sortKey": "!/Users/erikor/codyx/src/lib/classes/webr-service.js 00000032",
        "code": "{\n    /**\n     * Create a new WebRService instance\n     * Initializes the R runtime manager with default state\n     */\n    constructor() {\n        this.webR = null;\n        this.status = 'not-started';\n        this.initPromise = null;\n    }\n\n    async initialize() {\n        if (this.status === 'ready') return;\n        if (this.initPromise) return this.initPromise;\n\n        this.initPromise = this._doInitialize();\n        return this.initPromise;\n    }\n\n    async _doInitialize() {\n        if (this.status !== 'not-started') return;\n        \n        this.status = 'initializing';\n        \n        try {\n            this.webR = new WebR({\n                SW_URL: '/webr-sw.js'\n            });\n            \n            await this.webR.init();            \n            \n            // Don't pre-install packages - use lazy loading instead!\n            // This prevents the massive download at startup\n            \n            // Set default plot size (width=480, height=320 for 3:2 ratio)  \n            await this.webR.evalR(`\n                options(repr.plot.width = 4.8, repr.plot.height = 3.2)\n                webr::canvas(width = 480, height = 320)\n            `);\n            \n            this.status = 'ready';\n        } catch (error) {\n            this.status = 'error';\n            throw error;\n        }\n    }\n\n    async executeCode(code) {\n        if (this.status !== 'ready') {\n            await this.initialize();\n        }\n\n        // Auto-install packages that are used in the code\n        await this.ensurePackagesLoaded(code);\n\n        try {\n            \n            // Capture output and plots\n            const shelter = await new this.webR.Shelter();\n            try {\n                // Execute the R code with proper output capture\n                const result = await shelter.captureR(code, {\n                    withAutoprint: true,\n                    captureStreams: true,\n                    captureConditions: true,\n                    env: await this.webR.objs.globalEnv\n                });\n\n                let output = '';\n                let plots = [];\n                \n                // Process output messages - keep raw formatting\n                let outputLines = [];\n                for (const msg of result.output) {\n                    if (msg.type === 'stdout' || msg.type === 'stderr') {\n                        // Split by lines and preserve each line\n                        const lines = msg.data.split('\\n');\n                        outputLines.push(...lines);\n                    }\n                }\n                \n                // Join lines back with newlines to preserve original formatting\n                output = outputLines.join('\\n');\n\n                // Process any plots - convert ImageBitmap to displayable format\n                \n                if (result && result.images && result.images.length > 0) {                    \n                    // Convert each ImageBitmap to a data URL\n                    for (const imageBitmap of result.images) {\n                        if (imageBitmap instanceof ImageBitmap) {\n                            // Create a canvas to convert ImageBitmap to data URL\n                            const canvas = document.createElement('canvas');\n                            canvas.width = imageBitmap.width;\n                            canvas.height = imageBitmap.height;\n                            const ctx = canvas.getContext('2d');\n                            \n                            // Draw the ImageBitmap to the canvas\n                            ctx.drawImage(imageBitmap, 0, 0);\n                            \n                            // Convert to data URL\n                            const dataUrl = canvas.toDataURL('image/png');\n                            plots.push(dataUrl);\n                            \n                            // MEMORY LEAK FIX: Release ImageBitmap and canvas\n                            imageBitmap.close(); // Release ImageBitmap memory\n                            canvas.width = 0;     // Clear canvas memory  \n                            canvas.height = 0;\n                            \n                        }\n                    }\n                }\n                \n                return {\n                    output: output.trim(),\n                    plots: plots,\n                    error: null\n                };\n\n            } finally {\n                shelter.purge();\n            }\n\n        } catch (error) {\n            console.error('‚ùå R execution error:', error);\n            \n            return {\n                output: null,\n                plots: [],\n                error: this._extractErrorMessage(error)\n            };\n        }\n    }\n\n    _extractErrorMessage(error) {\n        if (error.message) {\n            return error.message;\n        }\n        return String(error);\n    }\n\n    // Auto-detect and install packages used in R code\n    async ensurePackagesLoaded(code) {\n        const commonPackages = {\n            'ggplot2': /\\b(ggplot|geom_|aes\\(|theme_)/,\n            'dplyr': /\\b(filter\\(|select\\(|mutate\\(|arrange\\(|summarise\\(|group_by\\(|%>%)/,\n            'tidyr': /\\b(pivot_longer|pivot_wider|gather|spread|separate|unite)/,\n            'plotly': /\\b(ggplotly|plot_ly)/,\n            'stringr': /\\b(str_detect|str_replace|str_extract|str_length)/,\n            'lubridate': /\\b(ymd|mdy|dmy|today|now|year|month|day)/\n        };\n\n        const packagesToInstall = [];\n        \n        // Check which packages are used in the code\n        for (const [pkg, pattern] of Object.entries(commonPackages)) {\n            if (pattern.test(code)) {\n                packagesToInstall.push(pkg);\n            }\n        }\n\n        // Also check for library() calls\n        const libraryMatches = code.match(/library\\s*\\(\\s*([^)]+)\\s*\\)/g);\n        if (libraryMatches) {\n            libraryMatches.forEach(match => {\n                const pkg = match.match(/library\\s*\\(\\s*([^)]+)\\s*\\)/)[1].replace(/['\"]/g, '');\n                if (!packagesToInstall.includes(pkg)) {\n                    packagesToInstall.push(pkg);\n                }\n            });\n        }\n\n        // Install packages that are needed but not yet installed\n        if (packagesToInstall.length > 0) {\n            console.log(`üì¶ Installing R packages: ${packagesToInstall.join(', ')}`);\n            try {\n                await this.webR.installPackages(packagesToInstall);\n                console.log(`‚úÖ R packages installed successfully`);\n            } catch (error) {\n                console.log(`‚ö†Ô∏è Some R packages may not have installed correctly:`, error);\n            }\n        }\n    }\n\n    // Memory cleanup method\n    async cleanup() {\n        if (this.webR) {\n            try {\n                // Close WebR connection and clean up memory\n                await this.webR.close();\n            } catch (error) {\n                console.log('‚ö†Ô∏è WebR cleanup error:', error);\n            } finally {\n                this.webR = null;\n                this.status = 'not-started';\n                this.initPromise = null;\n            }\n        }\n    }\n\n    getStatus() {\n        return this.status;\n    }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": []
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "WebRService",
        "kind": "class"
      }
    ],
    "namespace": "WebRService"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Universal cell container with lifecycle management"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "A flexible cell component that can render different cell types (Python, R, Markdown)\nthrough pluggable controllers. Handles cell execution, editing states, drag-and-drop\nreordering, and provides consistent UI for all cell types."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "component",
        "description": "CodyxCell",
        "lineNumber": 7
      },
      {
        "title": "example",
        "description": "<!-- Python cell -->\n<CodyxCell \n  controller={pythonController}\n  cellId=\"cell-001\"\n  index={0}\n  on:execute={handleExecute}\n  on:delete={handleDelete}\n/>\n\n<!-- R cell with custom styling -->\n<CodyxCell \n  controller={rController}\n  cellId=\"cell-002\" \n  index={1}\n  focused={true}\n  class=\"custom-cell-style\"\n/>\n\n<!-- Markdown cell in edit mode -->\n<CodyxCell \n  controller={markdownController}\n  cellId=\"cell-003\"\n  index={2}\n  initiallyEditing={true}\n/>",
        "lineNumber": 8
      },
      {
        "title": "param",
        "description": "Cell controller instance (Python, R, or Markdown)",
        "lineNumber": 35,
        "type": {
          "type": "NameExpression",
          "name": "CellController"
        },
        "name": "controller"
      },
      {
        "title": "param",
        "description": "Unique identifier for this cell instance",
        "lineNumber": 36,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "cellId"
      },
      {
        "title": "param",
        "description": "Position index in the notebook (0-based)",
        "lineNumber": 37,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "index"
      },
      {
        "title": "param",
        "description": "Whether this cell has focus for keyboard navigation",
        "lineNumber": 38,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "focused",
        "default": "false"
      },
      {
        "title": "param",
        "description": "Start the cell in editing mode",
        "lineNumber": 39,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "initiallyEditing",
        "default": "false"
      },
      {
        "title": "param",
        "description": "Prevent editing (sandbox mode)",
        "lineNumber": 40,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "readOnly",
        "default": "false"
      },
      {
        "title": "param",
        "description": "Additional CSS classes to apply",
        "lineNumber": 41,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "class"
      },
      {
        "title": "fires",
        "description": "CodyxCell#execute - Fired when cell execution is requested",
        "lineNumber": 43
      },
      {
        "title": "fires",
        "description": "CodyxCell#delete - Fired when cell deletion is requested",
        "lineNumber": 44
      },
      {
        "title": "fires",
        "description": "CodyxCell#focus - Fired when cell gains focus",
        "lineNumber": 45
      },
      {
        "title": "fires",
        "description": "CodyxCell#blur - Fired when cell loses focus",
        "lineNumber": 46
      },
      {
        "title": "fires",
        "description": "CodyxCell#editStart - Fired when cell enters edit mode",
        "lineNumber": 47
      },
      {
        "title": "fires",
        "description": "CodyxCell#editEnd - Fired when cell exits edit mode",
        "lineNumber": 48
      },
      {
        "title": "fires",
        "description": "CodyxCell#moveUp - Fired when user requests to move cell up",
        "lineNumber": 49
      },
      {
        "title": "fires",
        "description": "CodyxCell#moveDown - Fired when user requests to move cell down",
        "lineNumber": 50
      },
      {
        "title": "fires",
        "description": "CodyxCell#insertAbove - Fired when user requests new cell above",
        "lineNumber": 51
      },
      {
        "title": "fires",
        "description": "CodyxCell#insertBelow - Fired when user requests new cell below",
        "lineNumber": 52
      },
      {
        "title": "since",
        "description": "1.0.0",
        "lineNumber": 54
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 56,
        "column": 3,
        "index": 2097
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 57,
          "column": 0,
          "index": 2098
        },
        "end": {
          "line": 57,
          "column": 28,
          "index": 2126
        }
      },
      "file": "/Users/erikor/codyx/src/lib/components/CodyxCell.jsdoc.js"
    },
    "augments": [],
    "examples": [
      {
        "description": "<!-- Python cell -->\n<CodyxCell \n  controller={pythonController}\n  cellId=\"cell-001\"\n  index={0}\n  on:execute={handleExecute}\n  on:delete={handleDelete}\n/>\n\n<!-- R cell with custom styling -->\n<CodyxCell \n  controller={rController}\n  cellId=\"cell-002\" \n  index={1}\n  focused={true}\n  class=\"custom-cell-style\"\n/>\n\n<!-- Markdown cell in edit mode -->\n<CodyxCell \n  controller={markdownController}\n  cellId=\"cell-003\"\n  index={2}\n  initiallyEditing={true}\n/>"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "controller",
        "lineNumber": 35,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Cell controller instance (Python, R, or Markdown)"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "CellController"
        }
      },
      {
        "title": "param",
        "name": "cellId",
        "lineNumber": 36,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Unique identifier for this cell instance"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "param",
        "name": "index",
        "lineNumber": 37,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Position index in the notebook (0-based)"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      },
      {
        "title": "param",
        "name": "focused",
        "lineNumber": 38,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Whether this cell has focus for keyboard navigation"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "false"
      },
      {
        "title": "param",
        "name": "initiallyEditing",
        "lineNumber": 39,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Start the cell in editing mode"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "false"
      },
      {
        "title": "param",
        "name": "readOnly",
        "lineNumber": 40,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Prevent editing (sandbox mode)"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "false"
      },
      {
        "title": "param",
        "name": "class",
        "lineNumber": 41,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Additional CSS classes to apply"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        }
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "since": "1.0.0",
    "name": "CodyxCell",
    "kind": "constant",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "CodyxCell",
        "kind": "constant"
      }
    ],
    "namespace": "CodyxCell"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Main notebook container and orchestrator"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "The primary component that manages an entire Codyx notebook, including\ncell creation, deletion, reordering, persistence, collaboration, and\nintegration with various runtime services (Python, R, Markdown)."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "component",
        "description": "CodyxNotebook",
        "lineNumber": 7
      },
      {
        "title": "example",
        "description": "<!-- Basic notebook -->\n<CodyxNotebook />\n\n<!-- Notebook with specific slug -->\n<CodyxNotebook slug=\"data-analysis-2024\" />\n\n<!-- Collaborative notebook -->\n<CodyxNotebook \n  slug=\"team-project\" \n  collaborative={true}\n  userId=\"user-123\"\n/>\n\n<!-- Import Jupyter notebook -->\n<CodyxNotebook \n  importFile={jupyterFile}\n  onImportComplete={(notebook) => console.log('Imported:', notebook)}\n/>",
        "lineNumber": 8
      },
      {
        "title": "param",
        "description": "Notebook identifier for persistence and collaboration",
        "lineNumber": 28,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "slug"
      },
      {
        "title": "param",
        "description": "Enable real-time collaboration features",
        "lineNumber": 29,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "collaborative",
        "default": "false"
      },
      {
        "title": "param",
        "description": "User identifier for collaboration and ownership",
        "lineNumber": 30,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "userId"
      },
      {
        "title": "param",
        "description": "Jupyter notebook (.ipynb) file to import",
        "lineNumber": 31,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "File"
          }
        },
        "name": "importFile"
      },
      {
        "title": "param",
        "description": "Run in sandbox mode (read-only, no persistence)",
        "lineNumber": 32,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "sandboxMode",
        "default": "false"
      },
      {
        "title": "param",
        "description": "Owner identifier for shared notebooks",
        "lineNumber": 33,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "owner"
      },
      {
        "title": "fires",
        "description": "CodyxNotebook#notebookLoad - Fired when notebook is loaded from database",
        "lineNumber": 35
      },
      {
        "title": "fires",
        "description": "CodyxNotebook#notebookSave - Fired when notebook is saved to database",
        "lineNumber": 36
      },
      {
        "title": "fires",
        "description": "CodyxNotebook#cellAdd - Fired when a new cell is added to the notebook",
        "lineNumber": 37
      },
      {
        "title": "fires",
        "description": "CodyxNotebook#cellDelete - Fired when a cell is deleted from the notebook",
        "lineNumber": 38
      },
      {
        "title": "fires",
        "description": "CodyxNotebook#cellReorder - Fired when cells are reordered via drag-and-drop",
        "lineNumber": 39
      },
      {
        "title": "fires",
        "description": "CodyxNotebook#importComplete - Fired when Jupyter file import completes",
        "lineNumber": 40
      },
      {
        "title": "fires",
        "description": "CodyxNotebook#collaborationSync - Fired when collaboration changes are synchronized",
        "lineNumber": 41
      },
      {
        "title": "since",
        "description": "1.0.0",
        "lineNumber": 43
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 45,
        "column": 3,
        "index": 1852
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 46,
          "column": 0,
          "index": 1853
        },
        "end": {
          "line": 46,
          "column": 32,
          "index": 1885
        }
      },
      "file": "/Users/erikor/codyx/src/lib/components/CodyxNotebook.jsdoc.js"
    },
    "augments": [],
    "examples": [
      {
        "description": "<!-- Basic notebook -->\n<CodyxNotebook />\n\n<!-- Notebook with specific slug -->\n<CodyxNotebook slug=\"data-analysis-2024\" />\n\n<!-- Collaborative notebook -->\n<CodyxNotebook \n  slug=\"team-project\" \n  collaborative={true}\n  userId=\"user-123\"\n/>\n\n<!-- Import Jupyter notebook -->\n<CodyxNotebook \n  importFile={jupyterFile}\n  onImportComplete={(notebook) => console.log('Imported:', notebook)}\n/>"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "slug",
        "lineNumber": 28,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Notebook identifier for persistence and collaboration"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        }
      },
      {
        "title": "param",
        "name": "collaborative",
        "lineNumber": 29,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Enable real-time collaboration features"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "false"
      },
      {
        "title": "param",
        "name": "userId",
        "lineNumber": 30,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "User identifier for collaboration and ownership"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        }
      },
      {
        "title": "param",
        "name": "importFile",
        "lineNumber": 31,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Jupyter notebook (.ipynb) file to import"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "File"
          }
        }
      },
      {
        "title": "param",
        "name": "sandboxMode",
        "lineNumber": 32,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Run in sandbox mode (read-only, no persistence)"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "false"
      },
      {
        "title": "param",
        "name": "owner",
        "lineNumber": 33,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Owner identifier for shared notebooks"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        }
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "since": "1.0.0",
    "name": "CodyxNotebook",
    "kind": "constant",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "CodyxNotebook",
        "kind": "constant"
      }
    ],
    "namespace": "CodyxNotebook"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Rich text editing interface with live preview"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Specialized cell renderer for Markdown content with enhanced editing capabilities.\nProvides live preview, edit/preview mode toggling, and integration with enhanced\nmarkdown features for rich documentation and narrative text."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "component",
        "description": "MarkdownCellRenderer",
        "lineNumber": 7
      },
      {
        "title": "example",
        "description": "<!-- Basic Markdown cell -->\n<MarkdownCellRenderer \n  controller={markdownController}\n  on:previewToggle={handlePreviewToggle}\n/>\n\n<!-- Markdown cell in preview mode -->\n<MarkdownCellRenderer \n  controller={markdownController}\n  initialPreview={true}\n  enableMath={true}\n/>\n\n<!-- Markdown cell with enhanced features -->\n<MarkdownCellRenderer \n  controller={markdownController}\n  enableTables={true}\n  enableCodeBlocks={true}\n  enableMath={true}\n/>",
        "lineNumber": 8
      },
      {
        "title": "param",
        "description": "Markdown cell controller instance",
        "lineNumber": 30,
        "type": {
          "type": "NameExpression",
          "name": "MarkdownCellController"
        },
        "name": "controller"
      },
      {
        "title": "param",
        "description": "Whether cell is in edit mode (vs preview)",
        "lineNumber": 31,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "editing",
        "default": "true"
      },
      {
        "title": "param",
        "description": "Start in preview mode instead of edit",
        "lineNumber": 32,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "initialPreview",
        "default": "false"
      },
      {
        "title": "param",
        "description": "Enable LaTeX math rendering",
        "lineNumber": 33,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "enableMath",
        "default": "true"
      },
      {
        "title": "param",
        "description": "Enable table syntax support",
        "lineNumber": 34,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "enableTables",
        "default": "true"
      },
      {
        "title": "param",
        "description": "Enable syntax-highlighted code blocks",
        "lineNumber": 35,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "enableCodeBlocks",
        "default": "true"
      },
      {
        "title": "param",
        "description": "Prevent editing (preview only)",
        "lineNumber": 36,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "readOnly",
        "default": "false"
      },
      {
        "title": "param",
        "description": "Editor and preview theme",
        "lineNumber": 37,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "theme",
        "default": "'default'"
      },
      {
        "title": "fires",
        "description": "MarkdownCellRenderer#previewToggle - Fired when edit/preview mode is toggled",
        "lineNumber": 39
      },
      {
        "title": "fires",
        "description": "MarkdownCellRenderer#contentChange - Fired when markdown content changes",
        "lineNumber": 40
      },
      {
        "title": "fires",
        "description": "MarkdownCellRenderer#linkClick - Fired when a link in preview is clicked",
        "lineNumber": 41
      },
      {
        "title": "fires",
        "description": "MarkdownCellRenderer#imageLoad - Fired when an image in preview loads",
        "lineNumber": 42
      },
      {
        "title": "fires",
        "description": "MarkdownCellRenderer#mathRender - Fired when math expressions are rendered",
        "lineNumber": 43
      },
      {
        "title": "since",
        "description": "1.0.0",
        "lineNumber": 45
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 47,
        "column": 3,
        "index": 1900
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 48,
          "column": 0,
          "index": 1901
        },
        "end": {
          "line": 48,
          "column": 39,
          "index": 1940
        }
      },
      "file": "/Users/erikor/codyx/src/lib/components/renderers/MarkdownCellRenderer.jsdoc.js"
    },
    "augments": [],
    "examples": [
      {
        "description": "<!-- Basic Markdown cell -->\n<MarkdownCellRenderer \n  controller={markdownController}\n  on:previewToggle={handlePreviewToggle}\n/>\n\n<!-- Markdown cell in preview mode -->\n<MarkdownCellRenderer \n  controller={markdownController}\n  initialPreview={true}\n  enableMath={true}\n/>\n\n<!-- Markdown cell with enhanced features -->\n<MarkdownCellRenderer \n  controller={markdownController}\n  enableTables={true}\n  enableCodeBlocks={true}\n  enableMath={true}\n/>"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "controller",
        "lineNumber": 30,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Markdown cell controller instance"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "MarkdownCellController"
        }
      },
      {
        "title": "param",
        "name": "editing",
        "lineNumber": 31,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Whether cell is in edit mode (vs preview)"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "true"
      },
      {
        "title": "param",
        "name": "initialPreview",
        "lineNumber": 32,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Start in preview mode instead of edit"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "false"
      },
      {
        "title": "param",
        "name": "enableMath",
        "lineNumber": 33,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Enable LaTeX math rendering"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "true"
      },
      {
        "title": "param",
        "name": "enableTables",
        "lineNumber": 34,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Enable table syntax support"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "true"
      },
      {
        "title": "param",
        "name": "enableCodeBlocks",
        "lineNumber": 35,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Enable syntax-highlighted code blocks"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "true"
      },
      {
        "title": "param",
        "name": "readOnly",
        "lineNumber": 36,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Prevent editing (preview only)"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "false"
      },
      {
        "title": "param",
        "name": "theme",
        "lineNumber": 37,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Editor and preview theme"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "default": "'default'"
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "since": "1.0.0",
    "name": "MarkdownCellRenderer",
    "kind": "constant",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "MarkdownCellRenderer",
        "kind": "constant"
      }
    ],
    "namespace": "MarkdownCellRenderer"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Python code execution interface with intelligent features"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Specialized cell renderer for Python code with Pyodide integration. Provides\nsyntax highlighting, variable tracking, import suggestions, package installation,\nand rich output display for plots, data tables, and execution results."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "component",
        "description": "PythonCellRenderer",
        "lineNumber": 7
      },
      {
        "title": "example",
        "description": "<!-- Basic Python cell -->\n<PythonCellRenderer \n  controller={pythonController}\n  on:execute={handleExecution}\n/>\n\n<!-- Python cell with import suggestions -->\n<PythonCellRenderer \n  controller={pythonController}\n  showImportSuggestions={true}\n  on:packageInstall={handlePackageInstall}\n/>\n\n<!-- Python cell with variable highlighting -->\n<PythonCellRenderer \n  controller={pythonController}\n  highlightVariables={true}\n  variables={['df', 'plt', 'np']}\n/>",
        "lineNumber": 8
      },
      {
        "title": "param",
        "description": "Python cell controller instance",
        "lineNumber": 29,
        "type": {
          "type": "NameExpression",
          "name": "PythonCellController"
        },
        "name": "controller"
      },
      {
        "title": "param",
        "description": "Whether cell is in edit mode",
        "lineNumber": 30,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "editing",
        "default": "false"
      },
      {
        "title": "param",
        "description": "Show intelligent import suggestions",
        "lineNumber": 31,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "showImportSuggestions",
        "default": "true"
      },
      {
        "title": "param",
        "description": "Enable variable syntax highlighting",
        "lineNumber": 32,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "highlightVariables",
        "default": "true"
      },
      {
        "title": "param",
        "description": "Available variables for highlighting",
        "lineNumber": 33,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "Array"
            },
            "applications": [
              {
                "type": "NameExpression",
                "name": "string"
              }
            ]
          }
        },
        "name": "variables",
        "default": "[]"
      },
      {
        "title": "param",
        "description": "Prevent code editing",
        "lineNumber": 34,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "readOnly",
        "default": "false"
      },
      {
        "title": "param",
        "description": "Code editor theme",
        "lineNumber": 35,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "theme",
        "default": "'default'"
      },
      {
        "title": "fires",
        "description": "PythonCellRenderer#execute - Fired when Python code execution is triggered",
        "lineNumber": 37
      },
      {
        "title": "fires",
        "description": "PythonCellRenderer#codeChange - Fired when code content changes",
        "lineNumber": 38
      },
      {
        "title": "fires",
        "description": "PythonCellRenderer#packageInstall - Fired when package installation is requested",
        "lineNumber": 39
      },
      {
        "title": "fires",
        "description": "PythonCellRenderer#importSuggestion - Fired when import suggestion is accepted",
        "lineNumber": 40
      },
      {
        "title": "fires",
        "description": "PythonCellRenderer#variableClick - Fired when a highlighted variable is clicked",
        "lineNumber": 41
      },
      {
        "title": "fires",
        "description": "PythonCellRenderer#outputToggle - Fired when output visibility is toggled",
        "lineNumber": 42
      },
      {
        "title": "since",
        "description": "1.0.0",
        "lineNumber": 44
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 46,
        "column": 3,
        "index": 1928
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 47,
          "column": 0,
          "index": 1929
        },
        "end": {
          "line": 47,
          "column": 37,
          "index": 1966
        }
      },
      "file": "/Users/erikor/codyx/src/lib/components/renderers/PythonCellRenderer.jsdoc.js"
    },
    "augments": [],
    "examples": [
      {
        "description": "<!-- Basic Python cell -->\n<PythonCellRenderer \n  controller={pythonController}\n  on:execute={handleExecution}\n/>\n\n<!-- Python cell with import suggestions -->\n<PythonCellRenderer \n  controller={pythonController}\n  showImportSuggestions={true}\n  on:packageInstall={handlePackageInstall}\n/>\n\n<!-- Python cell with variable highlighting -->\n<PythonCellRenderer \n  controller={pythonController}\n  highlightVariables={true}\n  variables={['df', 'plt', 'np']}\n/>"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "controller",
        "lineNumber": 29,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Python cell controller instance"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "PythonCellController"
        }
      },
      {
        "title": "param",
        "name": "editing",
        "lineNumber": 30,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Whether cell is in edit mode"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "false"
      },
      {
        "title": "param",
        "name": "showImportSuggestions",
        "lineNumber": 31,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Show intelligent import suggestions"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "true"
      },
      {
        "title": "param",
        "name": "highlightVariables",
        "lineNumber": 32,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Enable variable syntax highlighting"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "true"
      },
      {
        "title": "param",
        "name": "variables",
        "lineNumber": 33,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Available variables for highlighting"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "string"
            }
          ]
        },
        "default": "[]"
      },
      {
        "title": "param",
        "name": "readOnly",
        "lineNumber": 34,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Prevent code editing"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "false"
      },
      {
        "title": "param",
        "name": "theme",
        "lineNumber": 35,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Code editor theme"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "default": "'default'"
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "since": "1.0.0",
    "name": "PythonCellRenderer",
    "kind": "constant",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "PythonCellRenderer",
        "kind": "constant"
      }
    ],
    "namespace": "PythonCellRenderer"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "R statistical computing interface with WebR integration"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Specialized cell renderer for R statistical computing with WebR runtime.\nProvides R syntax highlighting, package management, statistical output\nrendering, and integration with popular R libraries like ggplot2 and tidyverse."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "component",
        "description": "RCellRenderer",
        "lineNumber": 7
      },
      {
        "title": "example",
        "description": "<!-- Basic R cell -->\n<RCellRenderer \n  controller={rController}\n  on:execute={handleExecution}\n/>\n\n<!-- R cell with package installation -->\n<RCellRenderer \n  controller={rController}\n  availablePackages={['ggplot2', 'dplyr', 'tidyr']}\n  on:packageInstall={handleRPackageInstall}\n/>\n\n<!-- R cell with plot output -->\n<RCellRenderer \n  controller={rController}\n  showPlots={true}\n  plotWidth={600}\n  plotHeight={400}\n/>",
        "lineNumber": 8
      },
      {
        "title": "param",
        "description": "R cell controller instance",
        "lineNumber": 30,
        "type": {
          "type": "NameExpression",
          "name": "RCellController"
        },
        "name": "controller"
      },
      {
        "title": "param",
        "description": "Whether cell is in edit mode",
        "lineNumber": 31,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "editing",
        "default": "false"
      },
      {
        "title": "param",
        "description": "Display R plot outputs",
        "lineNumber": 32,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "showPlots",
        "default": "true"
      },
      {
        "title": "param",
        "description": "Default plot width in pixels",
        "lineNumber": 33,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "plotWidth",
        "default": "500"
      },
      {
        "title": "param",
        "description": "Default plot height in pixels",
        "lineNumber": 34,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "plotHeight",
        "default": "350"
      },
      {
        "title": "param",
        "description": "Available R packages for installation",
        "lineNumber": 35,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "Array"
            },
            "applications": [
              {
                "type": "NameExpression",
                "name": "string"
              }
            ]
          }
        },
        "name": "availablePackages",
        "default": "[]"
      },
      {
        "title": "param",
        "description": "Prevent code editing",
        "lineNumber": 36,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "readOnly",
        "default": "false"
      },
      {
        "title": "param",
        "description": "Code editor theme",
        "lineNumber": 37,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "theme",
        "default": "'default'"
      },
      {
        "title": "fires",
        "description": "RCellRenderer#execute - Fired when R code execution is triggered",
        "lineNumber": 39
      },
      {
        "title": "fires",
        "description": "RCellRenderer#codeChange - Fired when R code content changes",
        "lineNumber": 40
      },
      {
        "title": "fires",
        "description": "RCellRenderer#packageInstall - Fired when R package installation is requested",
        "lineNumber": 41
      },
      {
        "title": "fires",
        "description": "RCellRenderer#plotGenerated - Fired when R generates a plot output",
        "lineNumber": 42
      },
      {
        "title": "fires",
        "description": "RCellRenderer#dataFrameOutput - Fired when R outputs a data frame",
        "lineNumber": 43
      },
      {
        "title": "fires",
        "description": "RCellRenderer#outputToggle - Fired when output visibility is toggled",
        "lineNumber": 44
      },
      {
        "title": "since",
        "description": "1.0.0",
        "lineNumber": 46
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 48,
        "column": 3,
        "index": 1858
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 49,
          "column": 0,
          "index": 1859
        },
        "end": {
          "line": 49,
          "column": 32,
          "index": 1891
        }
      },
      "file": "/Users/erikor/codyx/src/lib/components/renderers/RCellRenderer.jsdoc.js"
    },
    "augments": [],
    "examples": [
      {
        "description": "<!-- Basic R cell -->\n<RCellRenderer \n  controller={rController}\n  on:execute={handleExecution}\n/>\n\n<!-- R cell with package installation -->\n<RCellRenderer \n  controller={rController}\n  availablePackages={['ggplot2', 'dplyr', 'tidyr']}\n  on:packageInstall={handleRPackageInstall}\n/>\n\n<!-- R cell with plot output -->\n<RCellRenderer \n  controller={rController}\n  showPlots={true}\n  plotWidth={600}\n  plotHeight={400}\n/>"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "controller",
        "lineNumber": 30,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "R cell controller instance"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "RCellController"
        }
      },
      {
        "title": "param",
        "name": "editing",
        "lineNumber": 31,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Whether cell is in edit mode"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "false"
      },
      {
        "title": "param",
        "name": "showPlots",
        "lineNumber": 32,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Display R plot outputs"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "true"
      },
      {
        "title": "param",
        "name": "plotWidth",
        "lineNumber": 33,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Default plot width in pixels"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "default": "500"
      },
      {
        "title": "param",
        "name": "plotHeight",
        "lineNumber": 34,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Default plot height in pixels"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "default": "350"
      },
      {
        "title": "param",
        "name": "availablePackages",
        "lineNumber": 35,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Available R packages for installation"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "string"
            }
          ]
        },
        "default": "[]"
      },
      {
        "title": "param",
        "name": "readOnly",
        "lineNumber": 36,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Prevent code editing"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "default": "false"
      },
      {
        "title": "param",
        "name": "theme",
        "lineNumber": 37,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Code editor theme"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "default": "'default'"
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "since": "1.0.0",
    "name": "RCellRenderer",
    "kind": "constant",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "RCellRenderer",
        "kind": "constant"
      }
    ],
    "namespace": "RCellRenderer"
  }
]