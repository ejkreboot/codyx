import { test, expect } from '@playwright/test';

test.describe('Code runners', () => {
  test('Run R code', async ({ page }) => {
    await page.goto('http://localhost:5173/');
    await page.getByRole('button', { name: 'add New Notebook' }).nth(1).click();
    await page.getByRole('button', { name: 'R', exact: true }).click();
    await page.getByRole('textbox').click();
    await page.getByRole('textbox').fill('# New R Cell\nlibrary(ggplot2)\n# Comprehensive R Test Suite for Codyx\n# Testing various R functionality, data structures, and operations\n\ncat("🧪 Starting Codyx R Test Suite\\n")\ncat(paste(rep("=", 40), collapse = ""), "\\n\\n")\n\n# Test 1: Basic R Operations and Data Types\ncat("📋 Test 1: Basic R Operations\\n")\ncat(paste(rep("-", 25), collapse = ""), "\\n")\n\n# Numeric operations\na <- 10\nb <- 3.14159\nresult <- a * b\ncat(sprintf("Numeric calculation: %d × %.5f = %.3f\\n", a, b, result))\n\n# String operations\ntext1 <- "Hello"\ntext2 <- "Codyx"\ncombined <- paste(text1, text2, sep = " ")\ncat(sprintf("String operation: \'%s\' + \'%s\' = \'%s\'\\n", text1, text2, combined))\n\n# Logical operations\nlogical_test <- (a > 5) && (b < 4)\ncat(sprintf("Logical test: (%d > 5) AND (%.2f < 4) = %s\\n", a, b, logical_test))\n\n# Test 2: Vector Operations\ncat("\\n📊 Test 2: Vector Operations\\n")\ncat(paste(rep("-", 25), collapse = ""), "\\n")\n\n# Create vectors\nnumbers <- c(1, 2, 3, 4, 5, 10, 15, 20)\nnames_vec <- c("Alice", "Bob", "Charlie", "Diana")\n\ncat(sprintf("Numbers vector: [%s]\\n", paste(numbers, collapse = ", ")))\ncat(sprintf("Names vector: [%s]\\n", paste(names_vec, collapse = ", ")))\n\n# Vector statistics\ncat(sprintf("Mean: %.2f, Median: %.1f, Sum: %d\\n", \n    mean(numbers), median(numbers), sum(numbers)))\ncat(sprintf("Min: %d, Max: %d, Length: %d\\n", \n    min(numbers), max(numbers), length(numbers)))\n\n# Vector filtering\nfiltered <- numbers[numbers > 5]\ncat(sprintf("Numbers > 5: [%s]\\n", paste(filtered, collapse = ", ")))\n\n# Test 3: Data Frame Operations\ncat("\\n📈 Test 3: Data Frame Operations\\n")\ncat(paste(rep("-", 30), collapse = ""), "\\n")\n\n# Create a test data frame\ndf <- data.frame(\n  name = c("Alice", "Bob", "Charlie", "Diana", "Eve"),\n  age = c(25, 30, 35, 28, 32),\n  score = c(85.5, 92.0, 78.5, 96.0, 89.5),\n  department = c("Engineering", "Marketing", "Engineering", "Sales", "Marketing"),\n  stringsAsFactors = FALSE\n)\n\ncat("Created data frame:\\n")\nprint(df)\n\n# Data frame analysis\ncat(sprintf("\\nData frame dimensions: %d rows × %d columns\\n", nrow(df), ncol(df)))\ncat(sprintf("Average age: %.1f years\\n", mean(df$age)))\ncat(sprintf("Average score: %.1f points\\n", mean(df$score)))\n\n# Filtering data frame\nhigh_scorers <- df[df$score > 85, ]\ncat(sprintf("\\nHigh scorers (>85): %d people\\n", nrow(high_scorers)))\nprint(high_scorers[, c("name", "score")])\n\n# Test 4: Statistical Functions\ncat("\\n📊 Test 4: Statistical Analysis\\n")\ncat(paste(rep("-", 30), collapse = ""), "\\n")\n\n# Generate sample data\nset.seed(123)\nsample_data <- rnorm(100, mean = 50, sd = 10)\n\n# Basic statistics\nstats <- data.frame(\n  Statistic = c("Mean", "Median", "Std Dev", "Variance", "Min", "Max"),\n  Value = c(mean(sample_data), median(sample_data), sd(sample_data), \n           var(sample_data), min(sample_data), max(sample_data))\n)\n\ncat("Statistical summary of random normal data (n=100):\\n")\nprint(stats)\n\n# Quartiles\nquartiles <- quantile(sample_data, c(0, 0.25, 0.5, 0.75, 1))\ncat("\\nQuartiles:\\n")\nprint(quartiles)\n\n# Test 5: Control Structures\ncat("\\n🔄 Test 5: Control Structures\\n")\ncat(paste(rep("-", 30), collapse = ""), "\\n")\n\n# For loop\ncat("For loop - counting squares:\\n")\nsquares <- c()\nfor(i in 1:5) {\n  square <- i^2\n  squares <- c(squares, square)\n  cat(sprintf("%d² = %d\\n", i, square))\n}\n\n# While loop\ncat("\\nWhile loop - Fibonacci sequence:\\n")\nfib <- c(1, 1)\nwhile(length(fib) < 8) {\n  next_fib <- sum(tail(fib, 2))\n  fib <- c(fib, next_fib)\n}\ncat(sprintf("First 8 Fibonacci numbers: [%s]\\n", paste(fib, collapse = ", ")))\n\n# Conditional statements\ncat("\\nConditional testing:\\n")\ntest_values <- c(-5, 0, 3, 10, 15)\nfor(val in test_values) {\n  if(val < 0) {\n    category <- "Negative"\n  } else if(val == 0) {\n    category <- "Zero"\n  } else if(val <= 10) {\n    category <- "Small positive"\n  } else {\n    category <- "Large positive"\n  }\n  cat(sprintf("Value %d is: %s\\n", val, category))\n}\n\n# Test 6: Functions and Apply Family\ncat("\\n⚙️  Test 6: Custom Functions\\n")\ncat(paste(rep("-", 25), collapse = ""), "\\n")\n\n# Custom function\ncalculate_stats <- function(x) {\n  list(\n    mean = mean(x),\n    median = median(x),\n    sd = sd(x),\n    length = length(x)\n  )\n}\n\n# Test the function\ntest_data <- c(10, 20, 30, 25, 15, 35, 40, 22, 18, 28)\nresults <- calculate_stats(test_data)\ncat("Custom function results:\\n")\ncat(sprintf("Data: [%s]\\n", paste(test_data, collapse = ", ")))\ncat(sprintf("Mean: %.2f, Median: %.1f\\n", results$mean, results$median))\ncat(sprintf("Std Dev: %.2f, Length: %d\\n", results$sd, results$length))\n\n# Apply functions\ncat("\\nUsing apply functions:\\n")\nmatrix_data <- matrix(1:12, nrow = 3, ncol = 4)\ncat("Test matrix:\\n")\nprint(matrix_data)\n\nrow_sums <- apply(matrix_data, 1, sum)\ncol_means <- apply(matrix_data, 2, mean)\ncat(sprintf("Row sums: [%s]\\n", paste(row_sums, collapse = ", ")))\ncat(sprintf("Column means: [%s]\\n", paste(round(col_means, 2), collapse = ", ")))\n\n# Test 7: List Operations\ncat("\\n📋 Test 7: List Operations\\n")\ncat(paste(rep("-", 25), collapse = ""), "\\n")\n\n# Create a complex list\nmy_list <- list(\n  numbers = 1:5,\n  text = c("apple", "banana", "cherry"),\n  matrix = matrix(1:6, nrow = 2),\n  nested = list(a = 10, b = 20)\n)\n\ncat("Created complex list structure:\\n")\ncat("- Numbers:", paste(my_list$numbers, collapse = ", "), "\\n")\ncat("- Text:", paste(my_list$text, collapse = ", "), "\\n")\ncat("- Matrix dimensions:", dim(my_list$matrix)[1], "×", dim(my_list$matrix)[2], "\\n")\ncat("- Nested list sum:", my_list$nested$a + my_list$nested$b, "\\n")\n\n# Test 8: String Manipulation\ncat("\\n📝 Test 8: String Operations\\n")\ncat(paste(rep("-", 30), collapse = ""), "\\n")\n\ntext <- "The Quick Brown Fox Jumps Over The Lazy Dog"\ncat(sprintf("Original: \'%s\'\\n", text))\ncat(sprintf("Lowercase: \'%s\'\\n", tolower(text)))\ncat(sprintf("Uppercase: \'%s\'\\n", toupper(text)))\ncat(sprintf("Character count: %d\\n", nchar(text)))\n\n# String splitting and manipulation\nwords <- strsplit(text, " ")[[1]]\ncat(sprintf("Word count: %d\\n", length(words)))\ncat(sprintf("Words starting with vowels: %s\\n", \n    paste(words[grepl("^[AEIOUaeiou]", words)], collapse = ", ")))\n\n# Test 9: Date and Time\ncat("\\n📅 Test 9: Date and Time Operations\\n")\ncat(paste(rep("-", 35), collapse = ""), "\\n")\n\ncurrent_time <- Sys.time()\ncurrent_date <- Sys.Date()\ncat(sprintf("Current time: %s\\n", current_time))\ncat(sprintf("Current date: %s\\n", current_date))\n\n# Date arithmetic\nfuture_date <- current_date + 30\npast_date <- current_date - 7\ncat(sprintf("30 days from now: %s\\n", future_date))\ncat(sprintf("7 days ago: %s\\n", past_date))\n\n# Test 10: Base R Plotting\ncat("\\n📊 Test 10: Base R Plotting\\n")\ncat(paste(rep("-", 25), collapse = ""), "\\n")\n\n# Generate sample data for plotting\nset.seed(456)\nx <- 1:20\ny <- x + rnorm(20, 0, 3)\ncategories <- factor(rep(c("Group A", "Group B"), each = 10))\n\ncat("Creating base R plots...\\n")\n\n# Basic scatter plot\nplot(x, y, \n     main = "Base R Scatter Plot", \n     xlab = "X Values", \n     ylab = "Y Values",\n     pch = 19, \n     col = "blue",\n     cex = 1.2)\nabline(lm(y ~ x), col = "red", lwd = 2)\n\ncat("✓ Scatter plot with trend line created\\n")\n\n# Histogram\nhist(y, \n     main = "Distribution of Y Values", \n     xlab = "Y Values", \n     col = "lightblue", \n     border = "black",\n     breaks = 8)\n\ncat("✓ Histogram created\\n")\n\n# Box plot by categories\nboxplot(y ~ categories, \n        main = "Y Values by Category",\n        xlab = "Category", \n        ylab = "Y Values",\n        col = c("lightgreen", "lightcoral"))\n\ncat("✓ Box plot created\\n")\n\n# Test 11: ggplot2 Advanced Plotting\ncat("\\n🎨 Test 11: ggplot2 Advanced Plotting\\n")\ncat(paste(rep("-", 35), collapse = ""), "\\n")\n\n# Load ggplot2 for advanced plotting\nlibrary(ggplot2)\n\ncat("ggplot2 loaded successfully!\\n")\n\n# Create a more complex dataset\nplot_data <- data.frame(\n  x = rep(1:10, 3),\n  y = c(1:10 + rnorm(10, 0, 1),\n        (1:10)^1.5 + rnorm(10, 0, 2),\n        log(1:10) * 5 + rnorm(10, 0, 0.5)),\n  group = factor(rep(c("Linear", "Power", "Logarithmic"), each = 10)),\n  size = runif(30, 0.5, 3)\n)\n\ncat("Created complex dataset for ggplot2 testing\\n")\n\n# Multi-panel ggplot with different geoms\np1 <- ggplot(plot_data, aes(x = x, y = y, color = group)) +\n  geom_point(aes(size = size), alpha = 0.7) +\n  geom_smooth(method = "loess", se = TRUE, alpha = 0.3) +\n  facet_wrap(~ group, scales = "free_y") +\n  labs(\n    title = "Multi-Panel Analysis by Function Type",\n    subtitle = "Points sized by random variable, with smoothed trends",\n    x = "X Values",\n    y = "Y Values",\n    color = "Function Type",\n    size = "Random Size"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),\n    plot.subtitle = element_text(hjust = 0.5, size = 11),\n    legend.position = "bottom"\n  ) +\n  scale_color_brewer(type = "qual", palette = "Set1")\n\nprint(p1)\n\ncat("✓ Multi-panel ggplot with facets created\\n")\n\n# Density and violin plots\np2 <- ggplot(plot_data, aes(x = group, y = y, fill = group)) +\n  geom_violin(alpha = 0.7, trim = FALSE) +\n  geom_boxplot(width = 0.2, fill = "white", alpha = 0.8) +\n  geom_jitter(width = 0.15, alpha = 0.5, size = 1) +\n  labs(\n    title = "Distribution Comparison Across Groups",\n    x = "Function Type",\n    y = "Y Values",\n    fill = "Group"\n  ) +\n  theme_classic() +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = "bold"),\n    legend.position = "none"\n  ) +\n  scale_fill_viridis_d(option = "plasma", alpha = 0.8)\n\nprint(p2)\n\ncat("✓ Violin plot with overlaid boxplot created\\n")\n\n# Test 12: Statistical Plotting\ncat("\\n📈 Test 12: Statistical Visualization\\n")\ncat(paste(rep("-", 35), collapse = ""), "\\n")\n\n# Generate data for statistical plots\nn <- 100\nstat_data <- data.frame(\n  normal = rnorm(n, 50, 10),\n  uniform = runif(n, 20, 80),\n  exponential = rexp(n, 0.1),\n  chi_square = rchisq(n, df = 5) * 10\n)\n\ncat("Generated statistical distributions for plotting\\n")\n\n# Correlation matrix visualization using base R\npairs(stat_data, \n      main = "Correlation Matrix of Different Distributions",\n      pch = 19,\n      col = rgb(0, 0, 1, 0.5))\n\ncat("✓ Correlation matrix plot created\\n")\n\n# QQ plots for normality checking\npar(mfrow = c(2, 2))\nfor(i in 1:4) {\n  col_name <- names(stat_data)[i]\n  qqnorm(stat_data[, i], \n         main = paste("Q-Q Plot:", col_name),\n         pch = 19,\n         col = rainbow(4)[i])\n  qqline(stat_data[, i], col = "red", lwd = 2)\n}\npar(mfrow = c(1, 1))\n\ncat("✓ Q-Q plots for all distributions created\\n")\n\n# Test 13: Error Handling\ncat("\\n⚠️  Test 13: Error Handling\\n")\ncat(paste(rep("-", 25), collapse = ""), "\\n")\n\n# Demonstrate error handling\nsafe_divide <- function(x, y) {\n  tryCatch({\n    if(y == 0) {\n      stop("Cannot divide by zero!")\n    }\n    result <- x / y\n    cat(sprintf("%.2f ÷ %.2f = %.3f\\n", x, y, result))\n    return(result)\n  }, error = function(e) {\n    cat(sprintf("Error: %s\\n", e$message))\n    return(NA)\n  })\n}\n\n# Test error handling\nsafe_divide(10, 2)\nsafe_divide(10, 0)\nsafe_divide(15, 3)\n\n# Test plotting with error handling\nsafe_plot <- function(data, title) {\n  tryCatch({\n    if(length(data) < 2) {\n      stop("Insufficient data for plotting")\n    }\n    plot(data, main = title, type = "l", col = "blue", lwd = 2)\n    cat(sprintf("✓ Plot \'%s\' created successfully\\n", title))\n  }, error = function(e) {\n    cat(sprintf("✗ Plot error: %s\\n", e$message))\n  })\n}\n\n# Test safe plotting\nsafe_plot(1:10, "Valid Data Plot")\nsafe_plot(c(), "Empty Data Plot")\nsafe_plot(c(5), "Single Point Plot")\n\n# Final Summary\ncat("\\n✅ Test Suite Complete!\\n")\ncat(paste(rep("=", 40), collapse = ""), "\\n")\ncat("All R functionality tests completed successfully.\\n")\ncat("✓ Basic operations and data types\\n")\ncat("✓ Vector and matrix operations\\n") \ncat("✓ Data frame manipulation\\n")\ncat("✓ Statistical functions\\n")\ncat("✓ Control structures (loops, conditionals)\\n")\ncat("✓ Custom functions and apply family\\n")\ncat("✓ List operations and data structures\\n")\ncat("✓ String manipulation and pattern matching\\n")\ncat("✓ Date and time operations\\n")\ncat("✓ Base R plotting (scatter, histogram, boxplot)\\n")\ncat("✓ ggplot2 advanced visualization\\n")\ncat("✓ Statistical plotting (correlation matrix, Q-Q plots)\\n")\ncat("✓ Error handling and exception management\\n")\ncat("\\n� Graphics capabilities tested:\\n")\ncat("  • Base R plots with customization\\n")\ncat("  • ggplot2 multi-panel faceted plots\\n")\ncat("  • Statistical distribution visualizations\\n")\ncat("  • Error handling for plotting functions\\n")\ncat("\\n�🎉 Codyx R environment is fully functional with graphics!\\n")');
    await page.getByRole('button', { name: 'play_circle' }).click();
    
    await page.waitForTimeout(5000); // Initial wait for execution to start
    
    // Wait for completion with extended timeout
    await expect(page.locator('pre')).toContainText(
      'Codyx R environment is fully functional with graphics!',
      { timeout: 30000 } 
    );
  });
  test('test', async ({ page }) => {
    await page.goto('http://localhost:5173/');
    await page.getByRole('button', { name: 'add New Notebook' }).nth(1).click();
    await page.getByRole('button', { name: 'Py', exact: true }).click();
    await page.getByRole('textbox').click();
    await page.getByRole('textbox').fill('# Comprehensive Python Test Suite for Codyx\n# Testing various Python functionality, data structures, and operations\n\nprint("🧪 Starting Codyx Python Test Suite")\nprint("=" * 40)\nprint()\n\n# Test 1: Basic Python Operations and Data Types\nprint("📋 Test 1: Basic Python Operations")\nprint("-" * 25)\n\n# Numeric operations\na = 10\nb = 3.14159\nresult = a * b\nprint(f"Numeric calculation: {a} × {b:.5f} = {result:.3f}")\n\n# String operations\ntext1 = "Hello"\ntext2 = "Codyx"\ncombined = f"{text1} {text2}"\nprint(f"String operation: \'{text1}\' + \'{text2}\' = \'{combined}\'")\n\n# Boolean operations\nlogical_test = (a > 5) and (b < 4)\nprint(f"Logical test: ({a} > 5) AND ({b:.2f} < 4) = {logical_test}")\n\n# Test 2: List and Tuple Operations\nprint("\\n📊 Test 2: List and Tuple Operations")\nprint("-" * 25)\n\n# Create lists and tuples\nnumbers = [1, 2, 3, 4, 5, 10, 15, 20]\nnames = ["Alice", "Bob", "Charlie", "Diana"]\ncoordinates = (10.5, 20.3)\n\nprint(f"Numbers list: {numbers}")\nprint(f"Names list: {names}")\nprint(f"Coordinates tuple: {coordinates}")\n\n# List statistics using built-in functions\nimport statistics\nprint(f"Mean: {statistics.mean(numbers):.2f}, Median: {statistics.median(numbers):.1f}, Sum: {sum(numbers)}")\nprint(f"Min: {min(numbers)}, Max: {max(numbers)}, Length: {len(numbers)}")\n\n# List comprehension and filtering\nfiltered = [x for x in numbers if x > 5]\nsquares = [x**2 for x in range(1, 6)]\nprint(f"Numbers > 5: {filtered}")\nprint(f"Squares 1-5: {squares}")\n\n# Test 3: Dictionary Operations\nprint("\\n📈 Test 3: Dictionary Operations")\nprint("-" * 30)\n\n# Create a test dictionary\npeople = {\n    "Alice": {"age": 25, "score": 85.5, "department": "Engineering"},\n    "Bob": {"age": 30, "score": 92.0, "department": "Marketing"},\n    "Charlie": {"age": 35, "score": 78.5, "department": "Engineering"},\n    "Diana": {"age": 28, "score": 96.0, "department": "Sales"},\n    "Eve": {"age": 32, "score": 89.5, "department": "Marketing"}\n}\n\nprint("Created people dictionary:")\nfor name, info in people.items():\n    print(f"  {name}: Age {info[\'age\']}, Score {info[\'score\']}, {info[\'department\']}")\n\n# Dictionary analysis\nages = [info["age"] for info in people.values()]\nscores = [info["score"] for info in people.values()]\nprint(f"\\nDictionary analysis:")\nprint(f"Average age: {sum(ages)/len(ages):.1f} years")\nprint(f"Average score: {sum(scores)/len(scores):.1f} points")\n\n# Filtering dictionary\nhigh_scorers = {name: info for name, info in people.items() if info["score"] > 85}\nprint(f"\\nHigh scorers (>85): {len(high_scorers)} people")\nfor name, info in high_scorers.items():\n    print(f"  {name}: {info[\'score\']}")\n\n# Test 4: NumPy Array Operations\nprint("\\n📊 Test 4: NumPy Array Operations")\nprint("-" * 30)\n\nimport numpy as np\n\n# Create numpy arrays\narr = np.array([1, 2, 3, 4, 5, 10, 15, 20])\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrandom_data = np.random.normal(50, 10, 100)\n\nprint(f"Array: {arr}")\nprint(f"Matrix shape: {matrix.shape}")\nprint(f"Matrix:\\n{matrix}")\n\n# Array statistics\nprint(f"\\nArray statistics:")\nprint(f"Mean: {np.mean(arr):.2f}, Std: {np.std(arr):.2f}")\nprint(f"Random data mean: {np.mean(random_data):.2f}, std: {np.std(random_data):.2f}")\n\n# Array operations\narr_squared = arr ** 2\nmatrix_sum = np.sum(matrix, axis=1)  # Sum along rows\nprint(f"Array squared: {arr_squared}")\nprint(f"Matrix row sums: {matrix_sum}")\n\n# Test 5: Control Structures\nprint("\\n🔄 Test 5: Control Structures")\nprint("-" * 30)\n\n# For loop\nprint("For loop - counting squares:")\nsquares = []\nfor i in range(1, 6):\n    square = i**2\n    squares.append(square)\n    print(f"{i}² = {square}")\n\n# While loop\nprint("\\nWhile loop - Fibonacci sequence:")\nfib = [1, 1]\nwhile len(fib) < 8:\n    next_fib = fib[-1] + fib[-2]\n    fib.append(next_fib)\nprint(f"First 8 Fibonacci numbers: {fib}")\n\n# Conditional statements\nprint("\\nConditional testing:")\ntest_values = [-5, 0, 3, 10, 15]\nfor val in test_values:\n    if val < 0:\n        category = "Negative"\n    elif val == 0:\n        category = "Zero"\n    elif val <= 10:\n        category = "Small positive"\n    else:\n        category = "Large positive"\n    print(f"Value {val} is: {category}")\n\n# Test 6: Functions and Lambda\nprint("\\n⚙️  Test 6: Functions and Lambda")\nprint("-" * 25)\n\n# Custom function\ndef calculate_stats(data):\n    """Calculate basic statistics for a list of numbers."""\n    return {\n        "mean": sum(data) / len(data),\n        "median": sorted(data)[len(data)//2],\n        "std": np.std(data),\n        "length": len(data)\n    }\n\n# Test the function\ntest_data = [10, 20, 30, 25, 15, 35, 40, 22, 18, 28]\nresults = calculate_stats(test_data)\nprint("Custom function results:")\nprint(f"Data: {test_data}")\nprint(f"Mean: {results[\'mean\']:.2f}, Median: {results[\'median\']:.1f}")\nprint(f"Std Dev: {results[\'std\']:.2f}, Length: {results[\'length\']}")\n\n# Lambda functions and map/filter\nprint("\\nUsing lambda functions:")\ndoubled = list(map(lambda x: x * 2, range(1, 6)))\nevens = list(filter(lambda x: x % 2 == 0, range(1, 11)))\nprint(f"Doubled 1-5: {doubled}")\nprint(f"Even numbers 1-10: {evens}")\n\n# Test 7: Class and Object Operations\nprint("\\n📋 Test 7: Classes and Objects")\nprint("-" * 25)\n\nclass DataAnalyzer:\n    def __init__(self, name):\n        self.name = name\n        self.data = []\n    \n    def add_data(self, *values):\n        self.data.extend(values)\n    \n    def get_summary(self):\n        if not self.data:\n            return "No data available"\n        return {\n            "count": len(self.data),\n            "mean": sum(self.data) / len(self.data),\n            "min": min(self.data),\n            "max": max(self.data)\n        }\n    \n    def __str__(self):\n        return f"DataAnalyzer(\'{self.name}\') with {len(self.data)} data points"\n\n# Create and use class instance\nanalyzer = DataAnalyzer("Test Analysis")\nanalyzer.add_data(1, 2, 3, 4, 5, 10, 15, 20)\nsummary = analyzer.get_summary()\n\nprint(f"Created analyzer: {analyzer}")\nprint("Analysis summary:")\nfor key, value in summary.items():\n    if isinstance(value, float):\n        print(f"  {key}: {value:.2f}")\n    else:\n        print(f"  {key}: {value}")\n\n# Test 8: String Manipulation\nprint("\\n📝 Test 8: String Operations")\nprint("-" * 30)\n\ntext = "The Quick Brown Fox Jumps Over The Lazy Dog"\nprint(f"Original: \'{text}\'")\nprint(f"Lowercase: \'{text.lower()}\'")\nprint(f"Uppercase: \'{text.upper()}\'")\nprint(f"Character count: {len(text)}")\n\n# String splitting and manipulation\nwords = text.split()\nprint(f"Word count: {len(words)}")\nvowel_words = [word for word in words if word[0].lower() in \'aeiou\']\nprint(f"Words starting with vowels: {vowel_words}")\n\n# Regular expressions\nimport re\nprint(f"Words with \'o\': {len(re.findall(r\'\\\\b\\\\w*o\\\\w*\\\\b\', text, re.IGNORECASE))}")\n\n# Test 9: Date and Time\nprint("\\n📅 Test 9: Date and Time Operations")\nprint("-" * 35)\n\nfrom datetime import datetime, timedelta\nimport time\n\ncurrent_time = datetime.now()\ncurrent_timestamp = time.time()\nprint(f"Current datetime: {current_time}")\nprint(f"Current timestamp: {current_timestamp}")\n\n# Date arithmetic\nfuture_date = current_time + timedelta(days=30)\npast_date = current_time - timedelta(days=7)\nprint(f"30 days from now: {future_date.strftime(\'%Y-%m-%d %H:%M:%S\')}")\nprint(f"7 days ago: {past_date.strftime(\'%Y-%m-%d %H:%M:%S\')}")\n\n# Test 10: Matplotlib Plotting\nprint("\\n📊 Test 10: Matplotlib Plotting")\nprint("-" * 30)\n\nimport matplotlib.pyplot as plt\n\n# Generate sample data for plotting\nx = np.linspace(0, 10, 50)\ny1 = np.sin(x) + 0.1 * np.random.randn(50)\ny2 = np.cos(x) + 0.1 * np.random.randn(50)\n\nprint("Creating matplotlib plots...")\n\n# Basic line plot\nplt.figure(figsize=(10, 6))\nplt.subplot(2, 2, 1)\nplt.plot(x, y1, \'b-\', label=\'Sin wave\', linewidth=2)\nplt.plot(x, y2, \'r--\', label=\'Cos wave\', linewidth=2)\nplt.title(\'Trigonometric Functions\')\nplt.xlabel(\'X values\')\nplt.ylabel(\'Y values\')\nplt.legend()\nplt.grid(True, alpha=0.3)\n\n# Histogram\nplt.subplot(2, 2, 2)\ndata_hist = np.random.normal(50, 15, 1000)\nplt.hist(data_hist, bins=30, alpha=0.7, color=\'skyblue\', edgecolor=\'black\')\nplt.title(\'Normal Distribution\')\nplt.xlabel(\'Values\')\nplt.ylabel(\'Frequency\')\n\n# Scatter plot\nplt.subplot(2, 2, 3)\nscatter_x = np.random.randn(100)\nscatter_y = scatter_x + np.random.randn(100) * 0.5\ncolors = np.random.rand(100)\nplt.scatter(scatter_x, scatter_y, c=colors, alpha=0.6, cmap=\'viridis\')\nplt.title(\'Scatter Plot with Colors\')\nplt.xlabel(\'X values\')\nplt.ylabel(\'Y values\')\nplt.colorbar()\n\n# Bar plot\nplt.subplot(2, 2, 4)\ncategories = [\'A\', \'B\', \'C\', \'D\', \'E\']\nvalues = [23, 45, 56, 78, 32]\nplt.bar(categories, values, color=[\'red\', \'green\', \'blue\', \'orange\', \'purple\'])\nplt.title(\'Bar Chart\')\nplt.xlabel(\'Categories\')\nplt.ylabel(\'Values\')\n\nplt.tight_layout()\nplt.show()\n\nprint("✓ Four matplotlib subplots created successfully")\n\n# Test 11: Pandas DataFrame Operations\nprint("\\n📊 Test 11: Pandas DataFrame Operations")\nprint("-" * 35)\n\nimport pandas as pd\n\n# Create a sample DataFrame\ndf = pd.DataFrame({\n    \'name\': [\'Alice\', \'Bob\', \'Charlie\', \'Diana\', \'Eve\', \'Frank\'],\n    \'age\': [25, 30, 35, 28, 32, 27],\n    \'score\': [85.5, 92.0, 78.5, 96.0, 89.5, 83.0],\n    \'department\': [\'Engineering\', \'Marketing\', \'Engineering\', \'Sales\', \'Marketing\', \'Sales\'],\n    \'salary\': [70000, 65000, 75000, 68000, 72000, 66000]\n})\n\nprint("Created DataFrame:")\nprint(df)\n\n# DataFrame analysis\nprint(f"\\nDataFrame info:")\nprint(f"Shape: {df.shape}")\nprint(f"Columns: {list(df.columns)}")\nprint(f"Data types:\\n{df.dtypes}")\n\n# Basic statistics\nprint(f"\\nNumerical statistics:")\nprint(df.describe())\n\n# Filtering and grouping\nhigh_scorers = df[df[\'score\'] > 85]\ndept_summary = df.groupby(\'department\').agg({\n    \'age\': \'mean\',\n    \'score\': \'mean\',\n    \'salary\': \'mean\'\n}).round(2)\n\nprint(f"\\nHigh scorers (>85):")\nprint(high_scorers[[\'name\', \'score\']])\n\nprint(f"\\nDepartment summary:")\nprint(dept_summary)\n\n# Test 12: Error Handling and Context Managers\nprint("\\n⚠️  Test 12: Error Handling")\nprint("-" * 25)\n\n# Demonstrate error handling\ndef safe_divide(x, y):\n    try:\n        if y == 0:\n            raise ValueError("Cannot divide by zero!")\n        result = x / y\n        print(f"{x:.2f} ÷ {y:.2f} = {result:.3f}")\n        return result\n    except ValueError as e:\n        print(f"Error: {e}")\n        return None\n    except Exception as e:\n        print(f"Unexpected error: {e}")\n        return None\n\n# Test error handling\nsafe_divide(10, 2)\nsafe_divide(10, 0)\nsafe_divide(15, 3)\n\n# Context manager example\nprint("\\nContext manager example:")\ntry:\n    with open(\'/tmp/test_file.txt\', \'w\') as f:\n        f.write("Test content for Codyx")\n    \n    with open(\'/tmp/test_file.txt\', \'r\') as f:\n        content = f.read()\n        print(f"File content: \'{content}\'")\nexcept Exception as e:\n    print(f"File operation error: {e}")\n\n# Test 13: List/Dict Comprehensions and Generators\nprint("\\n🔄 Test 13: Advanced Python Features")\nprint("-" * 35)\n\n# List comprehensions\nnumbers = range(1, 11)\nsquares = [x**2 for x in numbers]\neven_squares = [x**2 for x in numbers if x % 2 == 0]\nprint(f"Squares: {squares}")\nprint(f"Even squares: {even_squares}")\n\n# Dictionary comprehension\nsquare_dict = {x: x**2 for x in range(1, 6)}\nprint(f"Square dictionary: {square_dict}")\n\n# Generator function\ndef fibonacci_generator(n):\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        yield a\n        a, b = b, a + b\n        count += 1\n\nfib_gen = list(fibonacci_generator(10))\nprint(f"Fibonacci generator (10): {fib_gen}")\n\n# Set operations\nset1 = {1, 2, 3, 4, 5}\nset2 = {4, 5, 6, 7, 8}\nprint(f"Set 1: {set1}")\nprint(f"Set 2: {set2}")\nprint(f"Union: {set1 | set2}")\nprint(f"Intersection: {set1 & set2}")\nprint(f"Difference: {set1 - set2}")\n\n# Final Summary\nprint("\\n✅ Test Suite Complete!")\nprint("=" * 40)\nprint("All Python functionality tests completed successfully.")\nprint("✓ Basic operations and data types")\nprint("✓ Lists, tuples, and dictionaries")\nprint("✓ NumPy arrays and operations")\nprint("✓ Control structures (loops, conditionals)")\nprint("✓ Functions and lambda expressions")\nprint("✓ Classes and object-oriented programming")\nprint("✓ String manipulation and regular expressions")\nprint("✓ Date and time operations")\nprint("✓ Matplotlib plotting (4 subplot types)")\nprint("✓ Pandas DataFrame analysis")\nprint("✓ Error handling and context managers")\nprint("✓ Advanced features (comprehensions, generators, sets)")\n\nprint("\\n🎨 Graphics capabilities tested:")\nprint("  • Line plots with multiple series")\nprint("  • Histograms with custom styling")\nprint("  • Scatter plots with color mapping")\nprint("  • Bar charts with category colors")\n\nprint("\\n🎉 Codyx Python environment is fully functional!")');
    await page.getByTitle('Click to add: await micropip.install(\'numpy\')').click();
    await page.getByTitle('Click to add: await micropip.install(\'matplotlib\')').click();
    await page.getByRole('button', { name: 'Add install' }).click();
      await page.waitForTimeout(10000); // Initial wait for execution to start
    await page.getByRole('button', { name: 'play_circle' }).click();
    await expect(page.locator('pre')).toContainText('Codyx Python environment is fully functional!',
        { timeout: 60000 });
  });
});